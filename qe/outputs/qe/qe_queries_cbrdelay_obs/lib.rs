// Computer generated. Do not edit by hand.
#![allow(clippy::all)]
use ds::interval::{Interval, IntervalList};
use ds::*;
use lazy_static::lazy_static;
use std::collections::HashMap;

pub type QeFun = fn(&[RealNumRep], &[RealNumRep], &[RealNumRep]) -> IntervalList<RealNumRep>;
pub type QeFunRate =
    fn(&[RealNumRep], &[RealNumRep], &[RealNumRep], RealNumRep) -> IntervalList<RealNumRep>;
pub type QeFunSim = fn(
    &[RealNumRep],
    &[RealNumRep],
    &[RealNumRep],
    RealNumRep,
    RealNumRep,
) -> IntervalList<RealNumRep>;

pub fn compute_c_t_5_l_1(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 1);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[2] * 1 / 3 + -s[0] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[1] * 1 / 2 + -s[0] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        l[0] * 1 / 3 + -a[0] * 1 / 3 + s[3] * 1 / 3,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3] * 1 / 4 + -s[0] * 1 / 4)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 5 + -s[0] * 1 / 5)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3] * 1 / 3 + -s[1] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 4 + -s[1] * 1 / 4)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[3] * 1 / 2 + -s[0] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[4] * 1 / 3 + -s[0] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[2] + -s[0] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(RealNumRep::new(5, 1))]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(l[0] + -a[0] * 1 + s[0] <= RealNumRep::new(0, 1));
    assert!(!(s[4] + -a[1] * 1 + l[0] >= RealNumRep::new(0, 1)));
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3] * 1 / 2 + -s[2] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[3] + -s[1] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 3 + -s[2] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 2 + -s[3] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        s[4] * 1 / 4 + l[0] * 1 / 4 + -a[0] * 1 / 4,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(l[0] + -a[0] * 1 + s[1])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        l[0] * 1 / 2 + -a[0] * 1 / 2 + s[2] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[2] * 1 / 2 + -s[1] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[4] * 1 / 2 + -s[1] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[4] + -s[2] * 1)]);
    ret = ret.intersection(&tmp);
    ret
}

pub fn compute_b_t_5_l_1(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 1);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!(-s[4] * 2 + -a[0] * 1 + s[2] * 3 + l[0] <= RealNumRep::new(0, 1));
    assert!(-s[4] * 3 + s[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-s[4] * 1 + s[2] <= RealNumRep::new(-5, 1));
    assert!(-s[4] * 1 / 2 + -a[0] * 1 + s[1] * 3 / 2 + l[0] <= RealNumRep::new(0, 1));
    assert!(-s[4] * 2 + s[2] * 3 + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-s[4] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1));
    assert!(-s[4] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        s[4] * 2 / 3 + -a[0] * 2 / 3 + l[0] * 2 / 3,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 2 / 3 + -s[1] * 2 / 3)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(RealNumRep::new(10, 1))]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(l[0] + -a[0] * 1 + s[0] <= RealNumRep::new(0, 1));
    assert!(!(s[4] + -a[1] * 1 + l[0] >= RealNumRep::new(0, 1)));
    assert!(-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1));
    assert!(s[4] + -s[3] * 2 + s[0] <= RealNumRep::new(0, 1));
    assert!(-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1));
    assert!(-a[0] * 1 + -s[3] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1));
    assert!(s[4] + -s[3] * 3 + s[1] * 2 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] + -s[2] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        RealNumRep::new(5, 1) + s[4] + -s[3] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        s[4] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + l[0] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 3 / 2 + -s[3] * 3 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        s[4] + -s[3] * 1 / 2 + -s[1] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    assert!(-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        s[4] + -s[3] * 2 / 3 + -s[0] * 1 / 3,
    )]);
    ret = ret.intersection(&tmp);
    assert!(-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1));
    assert!(s[3] + -s[2] * 3 + s[0] * 2 <= RealNumRep::new(0, 1));
    assert!(s[4] * 1 / 4 + -s[2] * 1 + s[0] * 3 / 4 <= RealNumRep::new(0, 1));
    assert!(-s[4] * 1 / 3 + s[0] * 1 / 3 <= RealNumRep::new(-5, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 2 + -s[0] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    ret
}

pub fn compute_q_4_t_5_l_1(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 1);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!(a[2] >= a[1]);
    assert!(s[3] >= s[2]);
    assert!(s[4] * 1 / 3 + -s[3] * 1 + s[1] * 2 / 3 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_lower(RealNumRep::new(0, 1)),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-15, 1) + -l[0] * 1 + a[4] + -s[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(-s[3] * 3 / 2 + s[0] * 3 / 2 <= RealNumRep::new(-15, 1));
    assert!(s[4] * 3 + -s[3] * 6 + s[0] * 3 <= RealNumRep::new(0, 1));
    assert!(-s[4] * 3 + s[2] * 3 <= RealNumRep::new(-15, 1));
    assert!(-s[4] * 1 / 2 + l[0] + -a[0] * 1 + s[1] * 3 / 2 <= RealNumRep::new(0, 1));
    assert!(s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-s[4] * 1 / 2 + a[4] + -a[1] * 1 + s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[3] * 3 + s[1] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[1] * 1 + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(-s[4] * 6 + s[2] * 9 + -s[1] * 3 <= RealNumRep::new(0, 1));
    assert!(-s[4] * 2 + l[0] + -a[0] * 1 + s[2] * 3 <= RealNumRep::new(0, 1));
    assert!(-s[4] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[0] * 1 + a[4] + -s[3] * 3 / 2 + s[2] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[0] * 4 / 3 + a[4] + a[0] * 1 / 3 + -s[3] * 4 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-20, 1) + -l[0] * 1 + a[4] + -s[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(s[4] + -s[2] * 4 + s[0] * 3 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-10, 1) + -l[0] * 1 + a[4] + -s[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[0] * 1 + a[4] + -s[1] * 5 / 2 + s[0] * 3 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[0] * 1 + a[4] + -s[2] * 5 / 3 + s[0] * 2 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[0] * 1 + a[4] + -s[2] * 2 + s[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[0] * 4 + a[4] + a[0] * 3 + -s[1] * 4),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[0] * 2 + a[4] + a[0] + -s[2] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[0] * 1 + a[4] + -s[3] * 5 / 4 + s[0] * 1 / 4),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[1] * 1 + s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[3] * 2 + s[0]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[2] * 4 + s[0] * 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[0] * 1 + a[4] + -s[3] * 4 / 3 + s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-5, 1) + -l[0] * 1 + a[4] + -s[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(-s[4] * 1 / 2 + a[4] + -a[1] * 1 + s[1] * 1 / 2),
        Interval::interval_lower(s[4] * 1 / 2 + -s[0] * 1 / 2),
        Interval::interval_lower(s[4] * 1 / 4 + a[4] + -a[3] * 1 + -s[0] * 1 / 4),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[1] * 1 + s[2]),
        Interval::interval_lower(s[4] * 1 / 2 + -s[0] * 1 / 2),
        Interval::interval_lower(s[4] * 1 / 4 + a[4] + -a[3] * 1 + -s[0] * 1 / 4),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[1] * 1 + s[2]),
        Interval::interval_lower(s[4] * 2 / 3 + -a[0] * 2 / 3 + l[0] * 2 / 3),
        Interval::interval_lower(s[4] * 1 / 3 + a[4] + -a[3] * 1 + -a[0] * 1 / 3 + l[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(RealNumRep::new(10, 1)),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[1] * 1 + s[2]),
        Interval::interval_lower(RealNumRep::new(5, 1) + a[4] + -a[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[4] + -s[2] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[2] * 4 + s[0] * 3),
        Interval::interval_lower(s[4] + a[4] + -a[2] * 1 + -s[2] * 3 + s[0] * 2),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[2] * 2 + s[0]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[1] * 1 + s[0] * 1 / 3),
        Interval::interval_lower(s[4] * 2 / 3 + -a[0] * 2 / 3 + l[0] * 2 / 3),
        Interval::interval_lower(s[4] * 1 / 3 + a[4] + -a[3] * 1 + -a[0] * 1 / 3 + l[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(RealNumRep::new(10, 1)),
        Interval::interval_lower(-s[4] * 1 / 2 + a[4] + -a[1] * 1 + s[1] * 1 / 2),
        Interval::interval_lower(RealNumRep::new(5, 1) + a[4] + -a[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(5, 1) + s[4] + -s[3] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[2] * 1 + -s[3] * 2 + s[1]),
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[3] * 3 + s[1] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[4] * 3 / 2 + -s[3] * 3 / 2),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[2] * 1 + -s[3] * 2 + s[1]),
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[3] * 3 + s[1] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(s[4] + -s[2] * 1),
        Interval::interval_lower(-s[4] * 1 / 2 + a[4] + -a[1] * 1 + s[1] * 1 / 2),
        Interval::interval_lower(s[4] * 1 / 2 + a[4] + -a[3] * 1 + -s[2] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(RealNumRep::new(5, 1) + s[4] + -s[3] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(-s[4] * 1 / 2 + a[4] + -a[1] * 1 + s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(-s[4] * 1 / 2 + a[4] + -a[1] * 1 + s[1] * 1 / 2),
        Interval::interval_lower(s[4] * 2 / 3 + -a[0] * 2 / 3 + l[0] * 2 / 3),
        Interval::interval_lower(s[4] * 1 / 3 + a[4] + -a[3] * 1 + -a[0] * 1 / 3 + l[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[4] + -s[3] * 2 / 3 + -s[0] * 1 / 3),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[2] * 1 + -s[3] * 2 + s[1]),
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[3] * 3 + s[1] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[4] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + l[0] * 1 / 2),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[2] * 1 + -s[3] * 2 + s[1]),
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[3] * 3 + s[1] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(s[4] * 2 / 3 + -s[1] * 2 / 3),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[1] * 1 + s[0] * 1 / 3),
        Interval::interval_lower(s[4] * 1 / 3 + a[4] + -a[3] * 1 + -s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[3] * 2 + s[0]),
        Interval::interval_lower(RealNumRep::new(5, 1) + s[4] + -s[3] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[2] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(s[4] + -s[3] * 1 / 2 + -s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[1] * 1 + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(s[4] * 2 / 3 + -s[1] * 2 / 3),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[1] * 1 + s[2]),
        Interval::interval_lower(s[4] * 1 / 3 + a[4] + -a[3] * 1 + -s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[4] + -s[2] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[2] * 1 + -s[3] * 2 + s[1]),
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[3] * 3 + s[1] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(RealNumRep::new(5, 1) + s[4] + -s[3] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[1] * 1 + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(!(RealNumRep::new(0, 1) <= a[4] + -a[2] * 1 + -s[3] * 1 + s[0])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[3] * 2 + s[0]),
            Interval::interval_lower(s[4] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + l[0] * 1 / 2),
            Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[3] * 2 + s[0]),
        Interval::interval_lower(s[4] + -s[3] * 2 / 3 + -s[0] * 1 / 3),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[3] * 2 + s[0]),
        Interval::interval_lower(s[4] * 3 / 2 + -s[3] * 3 / 2),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[2] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[1] * 1 + s[0] * 1 / 3),
        Interval::interval_lower(s[4] * 1 / 2 + -s[0] * 1 / 2),
        Interval::interval_lower(s[4] * 1 / 4 + a[4] + -a[3] * 1 + -s[0] * 1 / 4),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(RealNumRep::new(10, 1)),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[1] * 1 + s[0] * 1 / 3),
        Interval::interval_lower(RealNumRep::new(5, 1) + a[4] + -a[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(!(RealNumRep::new(-5, 1) <= -a[2] * 1 + a[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + s[4] + -s[3] * 1),
            Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[1] * 1 + s[0] * 1 / 3),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[4] + -a[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[3] * 2 + s[0]),
        Interval::interval_lower(s[4] + -s[2] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[3] * 2 + s[0]),
        Interval::interval_lower(s[4] + -s[2] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[2] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(s[4] + -s[2] * 1),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[1] * 1 + s[0] * 1 / 3),
        Interval::interval_lower(s[4] * 1 / 2 + a[4] + -a[3] * 1 + -s[2] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(s[4] + -s[2] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[1] * 1 + s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(s[4] + -s[2] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(-s[4] * 1 / 2 + a[4] + -a[1] * 1 + s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(s[4] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + l[0] * 1 / 2),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[1] * 1 + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(s[4] + -s[3] * 2 / 3 + -s[0] * 1 / 3),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[1] * 1 + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(s[4] + -s[3] * 1 / 2 + -s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[1] * 1 + s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(RealNumRep::new(5, 1) + s[4] + -s[3] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[1] * 1 + s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(s[4] + -s[3] * 2 / 3 + -s[0] * 1 / 3),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[1] * 1 + s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(s[4] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + l[0] * 1 / 2),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(-s[4] * 1 / 2 + a[4] + -a[1] * 1 + s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(s[4] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + l[0] * 1 / 2),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[1] * 1 + s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[3] * 2 + s[0]),
        Interval::interval_lower(s[4] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + l[0] * 1 / 2),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[2] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[3] * 2 + s[0]),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(s[4] + -s[3] * 1 / 2 + -s[1] * 1 / 2),
        Interval::interval_lower(s[4] + a[4] + -a[2] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[4] + a[4] + -a[1] * 1 + -s[3] * 2 + s[0]),
        Interval::interval_lower(s[4] + -s[3] * 2 / 3 + -s[0] * 1 / 3),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[2] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[2] * 1),
        Interval::interval_lower(s[4] + -s[3] * 2 / 3 + -s[0] * 1 / 3),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 1),
        Interval::interval_lower(-s[4] * 1 / 2 + a[4] + -a[1] * 1 + s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(l[0] + -a[0] * 1 + s[0] <= RealNumRep::new(0, 1));
    assert!(-s[4] * 1 / 3 + s[0] * 1 / 3 <= RealNumRep::new(-5, 1));
    assert!(-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1));
    assert!(l[0] + -a[0] * 1 + -s[3] * 1 + s[1] * 2 <= RealNumRep::new(0, 1));
    assert!(!(s[4] + -a[1] * 1 + l[0] >= RealNumRep::new(0, 1)));
    assert!(-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(-s[4] * 1 + -l[0] * 1 + a[4])]);
    ret = ret.intersection(&tmp);
    assert!(-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1));
    assert!(-s[4] * 3 + s[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-s[4] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_s_4_t_5_l_1(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 1);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3])]);
    ret = ret.intersection(&tmp);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[2] * 4 + -s[0] * 3)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(l[0] * 2 + -a[0] * 2 + s[1] * 3),
        Interval::interval_lower(s[3] + a[3] + -a[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(10, 1) + s[1]),
        Interval::interval_lower(s[3] + a[3] + -a[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[3] + a[3] + -a[1] * 1),
        Interval::interval_lower(RealNumRep::new(5, 1) + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(l[0] * 1 / 2 + -a[0] * 1 / 2 + s[2] * 3 / 2),
        Interval::interval_lower(s[3] + a[3] + -a[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[2] * 4 / 3 + -s[0] * 1 / 3),
        Interval::interval_lower(s[3] + a[3] + -a[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[2] * 3 / 2 + -s[1] * 1 / 2),
        Interval::interval_lower(s[3] + a[3] + -a[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[1] * 2 + -s[0] * 1),
        Interval::interval_lower(s[3] + a[3] + -a[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(15, 1) + s[0]),
        Interval::interval_lower(s[3] + a[3] + -a[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(l[0] + -a[0] * 1 + s[0] <= RealNumRep::new(0, 1));
    assert!(!(-a[1] * 1 + s[3] + l[0] >= RealNumRep::new(0, 1)));
    assert!(-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(-l[0] * 1 + a[4])]);
    ret = ret.intersection(&tmp);
    assert!(-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1));
    assert!(-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1));
    assert!(-s[3] * 1 + -a[0] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1));
    assert!(-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[3] * 3 + -s[1] * 2)]);
    ret = ret.intersection(&tmp);
    assert!(s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[3] * 2 + -s[0] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        -l[0] * 1 + a[3] + s[2] + -s[0] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        s[3] * 1 / 2 + -l[0] * 1 + a[3] + -s[0] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        s[3] + -l[0] * 1 + a[3] + -s[1] * 1,
    )]);
    ret = ret.intersection(&tmp);
    ret
}

pub fn compute_sim_s_4_t_5_l_1(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
    C: RealNumRep,
    B: RealNumRep,
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 1);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3])]);
    ret = ret.intersection(&tmp);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    let tmp = IntervalList::new(vec![Interval::interval_upper(-l[0] * 1 + a[3] + C)]);
    ret = ret.intersection(&tmp);
    if !(a[3] + -a[2] * 1 + -C * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(C * 2 + s[1])]);
        ret = ret.intersection(&tmp);
    }
    if !(a[3] + -a[2] * 1 + -C * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(-B * 1 + s[3] + C * 2)]);
        ret = ret.intersection(&tmp);
    }
    if !(-C * 1 + a[2] + -a[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(C + s[2])]);
        ret = ret.intersection(&tmp);
    }
    if !(-C * 1 + a[2] + -a[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(C * 3 + s[0])]);
        ret = ret.intersection(&tmp);
    }
    if !(-C * 1 + a[2] + -a[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(C * 2 + s[1])]);
        ret = ret.intersection(&tmp);
    }
    if !(-C * 1 + a[2] + -a[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(-B * 1 + s[3] + C * 2)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_upper(-l[0] * 1 + a[4])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 2 + a[4] + -a[2] * 1 + a[0] + -l[0] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 3 + a[4] + -a[2] * 1 + s[0],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(B + s[3] + a[4] + -a[2] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 2 + a[4] + -a[2] * 1 + s[1],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C + a[4] + -a[1] * 1 + a[0] + -l[0] * 1,
    )]);
    ret = ret.intersection(&tmp);
    if !(!(a[1] + -s[3] * 1 + -l[0] * 1 + C + -B * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(C * 2 + s[1]),
            Interval::interval_lower(-l[0] * 1 + a[3] + C + -B * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(a[1] + -l[0] * 1 + -s[1] * 1 + -B * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[0] * 1 + a[3]),
            Interval::interval_lower(C * 2 + s[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[1] + -s[3] * 1 + -l[0] * 1 + C + -B * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(C * 2 + s[1]),
            Interval::interval_lower(B + a[3] + -a[1] * 1 + s[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 2 + a[4] + -a[1] * 1 + s[0],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(B + a[4] + -a[1] * 1 + s[2])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + s[3] + -C * 1 + a[4] + -a[1] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C + a[4] + -a[1] * 1 + s[1],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[0] * 1 + a[3]),
        Interval::interval_lower(C * 3 + s[0]),
        Interval::interval_lower(B + C + a[3] + -a[1] * 1 + s[0]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[0] * 1 + a[3]),
        Interval::interval_lower(B + -C * 1 + a[3] + -a[1] * 1 + s[2]),
        Interval::interval_lower(C + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(a[1] + -l[0] * 1 + -s[1] * 1 + -B * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(C * 2 + s[1]),
            Interval::interval_lower(B + a[3] + -a[1] * 1 + s[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-B * 1 + s[3] + C * 2),
        Interval::interval_lower(s[3] + a[3] + -a[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C + a[3] + -a[1] * 1 + s[2],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(B + s[3] + a[3] + -a[1] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 2 + a[3] + -a[1] * 1 + a[0] + -l[0] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 3 + a[3] + -a[1] * 1 + s[0],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 2 + a[3] + -a[1] * 1 + s[1],
    )]);
    ret = ret.intersection(&tmp);
    assert!(C >= RealNumRep::new(5, 1));
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(l[0] + -a[0] * 1 + s[0] <= RealNumRep::new(0, 1));
    assert!(C + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1));
    assert!(l[0] + -a[0] * 1 + -C * 1 + s[1] <= RealNumRep::new(0, 1));
    assert!(-C * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-s[3] * 1 + C + s[1] <= RealNumRep::new(0, 1));
    assert!(-C * 2 + s[2] + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-C * 2 + -a[0] * 1 + s[2] + l[0] <= RealNumRep::new(0, 1));
    assert!(-C * 3 + s[2] + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 4 + a[0] + -l[0] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 4 + s[1])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[3] + C * 2)]);
    ret = ret.intersection(&tmp);
    assert!(!(-a[1] * 1 + s[3] + l[0] >= RealNumRep::new(0, 1)));
    assert!(!(-B * 1 + s[3] + -C * 1 + -a[0] * 1 + l[0] >= RealNumRep::new(0, 1)));
    assert!(!(-B * 1 + s[3] + -C * 1 + -s[1] * 1 >= RealNumRep::new(0, 1)));
    assert!(s[3] + -C * 4 + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 5 + s[0])]);
    ret = ret.intersection(&tmp);
    assert!(s[3] + -C * 3 + -a[0] * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(s[3] + -C * 3 + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(!(-B * 1 + s[3] + -s[2] * 1 >= RealNumRep::new(0, 1)));
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C + a[4] + -a[2] * 1 + s[2],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 3 + s[2])]);
    ret = ret.intersection(&tmp);
    assert!(!(-B * 1 + s[3] + -C * 2 + -s[0] * 1 >= RealNumRep::new(0, 1)));
    assert!(s[3] + -C * 2 + -s[2] * 1 <= RealNumRep::new(0, 1));
    assert!(-s[3] * 1 + C * 2 + s[0] <= RealNumRep::new(0, 1));
    assert!(!(-B * 1 + C >= RealNumRep::new(0, 1)));
    ret
}

pub fn compute_c_t_5_l_2(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 2);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])) || (l[1] == l[0]));
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[1] + -s[0] * 1),
        Interval::interval_upper(s[3] * 1 / 2 + -s[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] + -a[1] * 1 + l[1])]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(-l[1] * 1 + a[1] + -s[0] * 1),
        Interval::interval_upper(l[1] + -a[1] * 1 + s[3]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[1] + -s[0] * 1),
        Interval::interval_upper(s[4] * 1 / 3 + -s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(-l[1] * 1 + a[1] + -s[0] * 1),
        Interval::interval_upper(l[1] * 1 / 2 + s[4] * 1 / 2 + -a[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[0] * 1 / 2 + s[2] * 1 / 2 + l[0] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[1] + -s[0] * 1),
        Interval::interval_upper(s[2] + -s[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(-l[1] * 1 + a[1] + -s[0] * 1)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(RealNumRep::new(5, 1))]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(!(l[1] + -a[2] * 1 + s[4] >= RealNumRep::new(0, 1)));
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[3] + -s[1] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3] * 1 / 2 + -s[2] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[4] + -s[2] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[4] * 1 / 2 + -s[1] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(-a[0] * 1 + s[1] + l[0])]);
    ret = ret.intersection(&tmp);
    assert!(-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 2 + -s[3] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        s[4] * 1 / 4 + -a[0] * 1 / 4 + l[0] * 1 / 4,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        l[1] * 1 / 3 + s[4] * 1 / 3 + -a[1] * 1 / 3,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 4 + -s[1] * 1 / 4)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[2] * 1 / 3 + -s[0] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(-a[1] * 1 + s[2] + l[1])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 5 + -s[0] * 1 / 5)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[2] * 1 / 2 + -s[1] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[1] * 1 / 2 + -s[0] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 3 + -s[2] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3] * 1 / 3 + -s[1] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[0] * 1 / 3 + s[3] * 1 / 3 + l[0] * 1 / 3,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[1] * 1 / 2 + s[3] * 1 / 2 + l[1] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3] * 1 / 4 + -s[0] * 1 / 4)]);
    ret = ret.intersection(&tmp);
    ret
}

pub fn compute_b_t_5_l_2(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 2);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])) || (l[1] == l[0]));
    let tmp = IntervalList::new(vec![Interval::interval_lower(-l[1] * 1 + a[1] + -s[2] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -l[1] * 1 + -s[4] * 1 / 3 + a[1] + -s[1] * 2 / 3,
    )]);
    ret = ret.intersection(&tmp);
    assert!(s[4] >= s[3]);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(-l[1] * 1 + a[1] + -s[1] * 1)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -l[1] * 1 + -s[4] * 1 / 3 + a[1] + -a[0] * 2 / 3 + l[0] * 2 / 3,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -l[1] * 1 + -s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        RealNumRep::new(10, 1) + -l[1] * 1 + -s[4] * 1 + a[1],
    )]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[1] * 1 + s[4] + a[1] + -s[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        s[4] * 1 / 2 + a[1] + -s[3] * 3 / 2 + -l[1] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[1] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1,
    )]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] + -a[1] * 1 + l[1])]);
        ret = ret.intersection(&tmp);
    }
    assert!(l[1] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 / 2 + s[2] <= RealNumRep::new(0, 1));
    assert!(
        (-s[4] * 1 / 3 + s[0] * 1 / 3 <= RealNumRep::new(-5, 1))
            || (-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        s[4] * 1 / 3 + -a[0] * 1 / 3 + l[0] * 1 / 3,
    )]);
    ret = ret.intersection(&tmp);
    assert!(
        (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
            || (RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] + l[1])
    );
    assert!(
        (s[4] + -s[3] * 2 + s[0] <= RealNumRep::new(0, 1))
            || (-l[1] * 2 + a[1] * 2 + s[4] + -s[3] * 3 <= RealNumRep::new(0, 1))
    );
    assert!(
        (s[3] + -s[2] * 3 + s[0] * 2 <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] + l[1])
    );
    if !(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] + l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] + -s[2] * 2 + s[0])]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (s[4] + -s[2] * 4 + s[0] * 3 <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] + l[1])
    );
    assert!(
        (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (-l[1] * 1 + a[1] + -s[3] * 1 <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![Interval::interval_lower(RealNumRep::new(5, 1))]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(!(l[1] + -a[2] * 1 + s[4] >= RealNumRep::new(0, 1)));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] + -s[3] * 1)]);
    ret = ret.intersection(&tmp);
    assert!(-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1));
    assert!(s[4] + -s[3] * 3 + s[1] * 2 <= RealNumRep::new(0, 1));
    assert!(-s[4] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1));
    assert!(-a[0] * 1 + -s[3] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1));
    assert!(-s[4] * 1 / 2 + -a[0] * 1 + s[1] * 3 / 2 + l[0] <= RealNumRep::new(0, 1));
    assert!(-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-s[4] * 1 + s[2] <= RealNumRep::new(-5, 1));
    assert!(-s[4] * 2 + -a[0] * 1 + s[2] * 3 + l[0] <= RealNumRep::new(0, 1));
    assert!(-s[4] * 3 + s[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-s[4] * 2 + s[2] * 3 + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-s[4] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 2 + -s[2] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    assert!(l[1] + -a[1] * 1 + s[1] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 3 + -s[1] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 4 + -s[0] * 1 / 4)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        s[4] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    ret
}

pub fn compute_q_4_t_5_l_2(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 2);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_lower(RealNumRep::new(0, 1)),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (-s[4] * 1 / 3 + s[0] * 1 / 3 <= RealNumRep::new(-5, 1))
            || (-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(a[4] + -a[3] * 1),
        Interval::interval_upper(RealNumRep::new(-15, 1) + -l[1] * 1 + a[4] + -s[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (-l[1] * 1 + a[1] + -s[3] * 1 <= RealNumRep::new(-5, 1))
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (-l[1] * 2 + a[1] * 2 + s[4] + -s[3] * 3 <= RealNumRep::new(0, 1))
            || (s[4] * 1 / 2 + -s[3] * 1 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
    );
    assert!(-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1));
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[1] + -s[1] * 1 + -l[1] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(-a[0] * 1 + -s[3] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-10, 1) + -l[1] * 1 + a[4] + -s[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(l[1] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 / 2 + s[2] <= RealNumRep::new(0, 1));
    assert!(-s[4] * 2 + -a[0] * 1 + s[2] * 3 + l[0] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-5, 1) + -l[1] * 1 + a[4] + -s[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[1] * 1 + a[4] + -s[3] * 3 / 2 + s[2] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(-s[4] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(s[4] * 1 / 2 + -s[2] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(l[1] * 1 / 2 + -a[1] * 1 / 2 + s[4] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + s[2]),
        Interval::interval_lower(s[4] * 1 / 4 + -s[0] * 1 / 4),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -a[3] * 1 + a[1] + -s[2] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 2 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[1] * 1 + a[4] + -a[3] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1),
            Interval::interval_upper(a[4] + -a[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -a[3] * 1 + a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (!(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-15, 1) + -l[1] * 1 + a[4] + -s[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[4] + a[1] + -s[2] * 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(a[4] + -a[3] * 1),
        Interval::interval_upper(-l[1] * 3 / 2 + a[4] + a[1] * 1 / 2 + -s[3] * 3 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
        Interval::interval_lower(a[4] + -a[2] * 1 + a[1] + -s[3] * 2 + s[1] + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= s[4] + -a[1] * 1 + -s[3] * 1 + s[1] + l[1]))
    );
    assert!(
        (l[1] == l[0])
            || (!(RealNumRep::new(0, 1) <= s[4] * 1 / 2 + -a[1] * 1 + s[1] * 1 / 2 + l[1]))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[1] * 1 + a[4] + -s[3] * 5 / 4 + s[0] * 1 / 4),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[1] * 1 + a[4] + a[0] * 1 / 3 + -s[3] * 4 / 3 + -l[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(a[4] + -a[3] * 1),
        Interval::interval_upper(-l[1] * 1 + a[4] + -s[1] * 5 / 2 + s[0] * 3 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(a[4] + -a[3] * 1),
        Interval::interval_upper(-l[1] * 1 + a[4] + -s[3] * 4 / 3 + s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(a[4] + -a[2] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[4] + -s[3] * 1),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 2 + s[1]),
        Interval::interval_lower(s[4] + a[4] + -a[2] * 1 + -s[3] * 3 + s[1] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -a[3] * 1 + a[1] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(-s[4] * 1 / 2 + -a[0] * 1 + s[1] * 3 / 2 + l[0] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-s[4] * 1 / 2 + a[4] + -a[2] * 1 + s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !((-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= s[4] + a[4] + -a[2] * 1 + -s[2] * 4 + s[0] * 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(RealNumRep::new(0, 1))]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] * 1 / 4 + -s[2] * 1 + s[0] * 3 / 4 <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(s[4] * 1 / 3 + -s[3] * 1 + s[1] * 2 / 3 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(-l[1] * 1 + a[4] + -s[3] * 4 / 3 + s[1] * 1 / 3),
        Interval::interval_upper(-l[1] * 1 + a[3] + -s[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 + a[4] + -a[2] * 1),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[2] * 1 + s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[1] * 3 + a[1] * 3 + -s[3] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(-l[1] * 1 + a[4] + -s[2] * 4 + s[0] * 3),
            Interval::interval_lower(a[4] + -a[2] * 1 + a[1] + -s[2] * 3 + s[0] * 2 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + s[2]),
        Interval::interval_lower(s[4] * 1 / 3 + -a[0] * 1 / 3 + l[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[1] * 1 + a[4] + -s[2] * 5 / 3 + s[0] * 2 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[1] * 1 + a[4] + a[0] + -s[2] * 2 + -l[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[1] * 3 + a[4] + a[1] * 2 + -s[2] * 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(-l[1] * 3 / 2 + a[4] + a[1] * 1 / 2 + -s[3] * 3 / 2),
        Interval::interval_upper(-l[1] * 1 + a[3] + -s[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + a[1] + -s[1] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -a[3] * 1 + a[1] + a[0] + -s[1] * 2 + -l[1] * 1 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -a[3] * 1 + a[1] + -s[1] * 3 / 2 + s[0] * 1 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-l[1] * 2 + a[1] * 2 + s[4] + a[4] + -a[2] * 1 + -s[3] * 3),
        Interval::interval_lower(s[4] + a[4] + -a[2] * 1 + -s[3] * 2 + s[0]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(s[4] * 1 / 3 + -s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(a[4] + -a[3] * 1),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -a[1] * 1),
        Interval::interval_upper(RealNumRep::new(-20, 1) + -l[1] * 1 + a[4] + -s[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -a[1] * 1),
        Interval::interval_upper(RealNumRep::new(-20, 1) + -l[1] * 1 + a[4] + -s[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[4] + a[4] + -a[2] * 1 + -s[2] * 4 + s[0] * 3),
            Interval::interval_lower(s[4] + -s[2] * 2 + s[0]),
            Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[2] * 3 + s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (!(-l[1] * 3 + a[1] * 3 + -s[3] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1)))
    );
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= s[4] * 2 + -a[1] * 3 + s[0] + l[1] * 3)));
    assert!(
        (l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= s[4] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1]))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[1] * 1 + a[4] * 2 / 3 + a[1] * 1 / 3 + -s[3] * 1),
            Interval::interval_upper(-l[1] * 1 + a[3] + -s[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 3 + a[4] + -a[3] * 1 + a[1] + -s[1] * 2 / 3 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -s[4] * 2 + a[4] + -a[2] * 1 + a[1] * 3 + -s[1] * 1 + -l[1] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                RealNumRep::new(-10, 1) + a[4] + -a[2] * 1 + a[1] + -s[1] * 1 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (!(RealNumRep::new(0, 1) <= s[4] * 2 + -a[1] * 2 + -s[3] * 1 + s[0] + l[1] * 2))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(l[1] * 1 / 2 + -a[1] * 1 / 2 + s[4] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 / 2 + a[4] + -a[2] * 1 + s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                RealNumRep::new(-15, 1) + a[4] + -a[2] * 1 + a[1] + -s[0] * 1 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-10, 1) + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(RealNumRep::new(10, 1) + -s[4] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            RealNumRep::new(5, 1) + -s[4] * 1 + a[4] + -a[3] * 1 + a[1] + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -a[0] * 2 / 3 + -l[1] * 1 + l[0] * 2 / 3),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -a[0] * 1 / 3 + -l[1] * 1 + l[0] * 1 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(5, 1)),
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(RealNumRep::new(5, 1)),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(5, 1)),
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(-s[4] * 1 / 2 + a[4] + -a[2] * 1 + s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[4] + -s[2] * 4 + s[0] * 3),
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[2] * 2 + s[0] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[2] * 1 + a[1] + -s[2] * 3 + s[0] * 2 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -a[2] * 1 + a[1] + -s[2] * 4 / 3 + s[0] * 1 / 3 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -s[4] * 3 + a[4] + -a[2] * 1 + a[1] * 4 + -s[0] * 1 + -l[1] * 4,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 2 + s[0]),
        Interval::interval_lower(a[1] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1),
        Interval::interval_lower(
            a[4] + -a[2] * 1 + a[1] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[1] * 1,
        ),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 1 / 2 + -a[2] * 1 / 2 + a[1] + -s[2] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[4] + -a[3] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 2 + s[0]),
            Interval::interval_lower(
                a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2,
            ),
            Interval::interval_lower(
                a[4] + -a[2] * 1 + a[1] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[4] + -a[3] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 2 + s[0]),
            Interval::interval_lower(s[4] * 1 / 2 + a[1] + -s[3] * 3 / 2 + -l[1] * 1),
            Interval::interval_lower(
                a[4] + -a[2] * 1 + a[1] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + s[2]),
        Interval::interval_lower(s[4] * 1 / 3 + -s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(
            -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -s[1] * 1 / 3 + -l[1] * 1,
        ),
        Interval::interval_lower(-s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2 + -l[1] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1),
            Interval::interval_lower(s[4] + -a[1] * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[1] * 1 + a[4] * 1 / 3 + a[1] * 2 / 3 + -s[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[1] * 1 + a[4] + a[0] * 3 + -s[1] * 4 + -l[0] * 3),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                RealNumRep::new(-5, 1) + a[4] + -a[2] * 1 + a[1] + -s[2] * 1 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[2] * 1 + a[1] + -s[3] * 2 + s[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
        Interval::interval_lower(a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2),
        Interval::interval_lower(a[4] + -a[2] * 1 + a[1] + -s[3] * 2 + s[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
        Interval::interval_lower(s[4] * 1 / 2 + a[1] + -s[3] * 3 / 2 + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[2] * 1 + a[1] + -s[3] * 2 + s[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
        Interval::interval_lower(a[4] + -a[2] * 1 + a[1] + -s[3] * 2 + s[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
        Interval::interval_lower(a[4] + -a[2] * 1 + a[1] + -s[3] * 2 + s[1] + -l[1] * 1),
        Interval::interval_lower(s[4] + -s[3] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[4] + -s[3] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(-s[4] * 1 / 2 + a[4] + -a[2] * 1 + s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[4] + -s[3] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 1 / 2 + a[4] + -a[3] * 1 + a[1] + -s[2] * 1 / 2 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(s[4] * 1 / 2 + -s[2] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -a[2] * 1 + a[1] + -s[2] * 3 / 2 + s[1] * 1 / 2 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[4] + -s[3] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 + a[4] + -a[2] * 1),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[2] * 1 + s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 2 + a[1] * 2 + s[4] + a[4] + -a[2] * 1 + -s[3] * 3),
        Interval::interval_lower(s[4] + -s[3] * 1),
        Interval::interval_lower(-l[1] * 1 + a[1] + s[4] + a[4] + -a[3] * 1 + -s[3] * 2),
        Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2),
        Interval::interval_lower(s[4] + a[4] + -a[2] * 1 + -s[3] * 2 + s[0]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                -s[4] * 3 / 4 + a[4] + -a[2] * 1 + a[1] + -s[0] * 1 / 4 + -l[1] * 1,
            ),
            Interval::interval_upper(a[4] + -a[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 2 + a[4] + -a[3] * 1 + a[1] * 3 + -s[0] * 1 + -l[1] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(s[4] * 1 / 3 + -a[0] * 1 / 3 + l[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 / 2 + a[4] + -a[2] * 1 + s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 2 + s[0]),
        Interval::interval_lower(s[4] * 1 / 2 + a[1] + -s[3] * 3 / 2 + -l[1] * 1),
        Interval::interval_upper(-l[1] * 1 + a[2] + -s[3] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 2 + s[0]),
        Interval::interval_lower(a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2),
        Interval::interval_lower(
            a[4] + -a[2] * 1 + a[1] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[1] * 1,
        ),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 2 + s[0]),
        Interval::interval_lower(s[4] * 1 / 2 + a[1] + -s[3] * 3 / 2 + -l[1] * 1),
        Interval::interval_lower(
            a[4] + -a[2] * 1 + a[1] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[1] * 1,
        ),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 2 + s[0]),
        Interval::interval_lower(
            a[4] + -a[2] * 1 + a[1] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[1] * 1,
        ),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 + a[4] + -a[3] * 1 + a[1] * 2 + -s[1] * 1 + -l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(s[4] + -s[3] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -a[0] * 2 / 3 + -l[1] * 1 + l[0] * 2 / 3),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -a[0] * 1 / 3 + -l[1] * 1 + l[0] * 1 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2 + -l[1] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 3 / 4 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 / 4 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[4] + -a[2] * 1 + a[1] + -s[1] * 2 + s[0] + -l[1] * 1),
            Interval::interval_upper(a[4] + -a[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] + -a[2] * 1 + a[1] + a[0] * 2 + -s[1] * 3 + -l[1] * 1 + -l[0] * 2,
            ),
            Interval::interval_upper(a[4] + -a[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(s[4] * 1 / 4 + -s[0] * 1 / 4),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(s[4] * 1 / 3 + -s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(RealNumRep::new(10, 1) + -s[4] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            RealNumRep::new(5, 1) + -s[4] * 1 + a[4] + -a[3] * 1 + a[1] + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2 + -l[1] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -s[1] * 2 / 3 + -l[1] * 1),
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 3 / 4 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 / 4 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -a[0] * 2 / 3 + -l[1] * 1 + l[0] * 2 / 3),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 3 / 4 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 / 4 + -l[1] * 1,
        ),
        Interval::interval_lower(RealNumRep::new(10, 1) + -s[4] * 1 + a[1] + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 2 + s[0]),
        Interval::interval_lower(
            a[4] + -a[2] * 1 + a[1] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[1] * 1,
        ),
        Interval::interval_lower(s[4] + -s[3] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 2 + s[0]),
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(
            a[4] + -a[2] * 1 + a[1] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[1] * 1,
        ),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(s[4] * 1 / 2 + -s[2] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 / 2 + a[4] + -a[2] * 1 + s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[1] * 1 + a[4] + -s[1] * 5 / 2 + s[0] * 3 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(RealNumRep::new(5, 1)),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
        Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[2] * 1 + a[1] + -s[3] * 2 + s[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[4] + -s[3] * 2 + s[0]),
        Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
        Interval::interval_lower(
            a[4] + -a[2] * 1 + a[1] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[1] * 1,
        ),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(s[4] * 1 / 3 + -a[0] * 1 / 3 + l[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2 + -l[1] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 3 / 4 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 / 4 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -s[1] * 2 / 3 + -l[1] * 1),
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(
            -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -s[1] * 1 / 3 + -l[1] * 1,
        ),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -s[4] * 2 / 3 + a[4] + -a[2] * 1 + a[1] + -s[1] * 1 / 3 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[1] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1),
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2),
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -s[1] * 2 / 3 + -l[1] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2 + -l[1] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 3 / 4 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 / 4 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -s[1] * 2 / 3 + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -s[1] * 1 / 3 + -l[1] * 1,
        ),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -s[4] * 1 / 2 + a[4] + -a[2] * 1 + a[1] + -s[2] * 1 / 2 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[1] * 3 / 2 + a[4] + a[1] * 1 / 2 + -s[3] * 3 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -a[2] * 1 + a[1] + a[0] * 2 + -s[1] * 3 + -l[1] * 1 + -l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -a[0] * 2 / 3 + -l[1] * 1 + l[0] * 2 / 3),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -a[0] * 1 / 3 + -l[1] * 1 + l[0] * 1 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 1 / 2 + a[4] + -a[3] * 1 + a[1] + -s[2] * 1 / 2 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(!(RealNumRep::new(-5, 1) <= -a[3] * 1 + a[2])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
            Interval::interval_lower(RealNumRep::new(10, 1) + -s[4] * 1 + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[1] * 1 + a[4] + -s[2] * 2 + s[1]),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(a[4] + -a[2] * 1 + a[1] + -s[1] * 2 + s[0] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1),
            Interval::interval_lower(s[4] + -a[1] * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(a[1] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[1] * 1 + a[4] + -s[3] * 4 / 3 + s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(s[4] + -s[3] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(s[4] + -s[3] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(!(RealNumRep::new(-5, 1) <= -a[3] * 1 + a[2])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                -l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 + a[4] + -a[2] * 1,
            ),
            Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[2] * 1 + s[0] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] + -a[2] * 1 + a[1] + a[0] * 1 / 2 + -s[2] * 3 / 2 + -l[1] * 1 + -l[0] * 1 / 2,
            ),
            Interval::interval_upper(a[4] + -a[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(RealNumRep::new(5, 1)),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            RealNumRep::new(5, 1) + -s[4] * 1 + a[4] + -a[3] * 1 + a[1] + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(RealNumRep::new(5, 1)),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_upper(-l[1] * 1 + a[3] + -s[3] * 1),
        Interval::interval_lower(s[4] * 1 / 3 + -s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(s[4] * 1 / 3 + -s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(s[4] * 1 / 4 + -s[0] * 1 / 4),
        Interval::interval_upper(-l[1] * 1 + a[3] + -s[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= s[4] * 1 / 2 + -a[4] * 1 + a[3] + -s[1] * 1 / 2) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
            Interval::interval_lower(s[4] * 1 / 4 + -s[0] * 1 / 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(s[4] * 1 / 3 + -a[0] * 1 / 3 + l[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(s[4] * 1 / 4 + -s[0] * 1 / 4),
        Interval::interval_lower(-s[4] * 1 / 2 + a[4] + -a[2] * 1 + s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(RealNumRep::new(10, 1) + -s[4] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            RealNumRep::new(5, 1) + -s[4] * 1 + a[4] + -a[3] * 1 + a[1] + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1),
            Interval::interval_lower(s[4] + -a[1] * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 <= RealNumRep::new(-5, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(a[4] + -a[3] * 1),
            Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[2] * 1 + s[0] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(s[4] + -s[3] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(s[4] * 1 / 3 + -a[0] * 1 / 3 + l[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(l[1] + -a[1] * 1 + s[4] + a[4] + -a[3] * 3 + a[2] * 2),
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 + a[4] + -a[2] * 1),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[2] * 1 + s[0] * 1 / 3),
        Interval::interval_lower(s[4] * 1 / 3 + -s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[2] * 1 + s[0] * 1 / 3),
        Interval::interval_upper(l[1] * 1 / 2 + -a[1] * 1 / 2 + s[4] * 1 / 2),
        Interval::interval_lower(s[4] * 1 / 4 + -s[0] * 1 / 4),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 + a[4] + -a[2] * 1),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[2] * 1 + s[0] * 1 / 3),
        Interval::interval_lower(s[4] * 1 / 2 + -s[2] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(s[4] * 1 / 4 + -s[0] * 1 / 4),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(s[4] * 1 / 2 + -s[2] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(s[4] + -s[3] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(s[4] * 1 / 4 + -s[0] * 1 / 4),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 + a[4] + -a[2] * 1),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[2] * 1 + s[0] * 1 / 3),
        Interval::interval_lower(s[4] * 1 / 3 + -s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(s[4] + -s[3] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 + a[4] + -a[2] * 1),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[2] * 1 + s[0] * 1 / 3),
        Interval::interval_lower(s[4] * 1 / 3 + -a[0] * 1 / 3 + l[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -a[3] * 1),
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 + a[4] + -a[2] * 1),
        Interval::interval_lower(-s[4] * 1 / 3 + a[4] + -a[2] * 1 + s[0] * 1 / 3),
        Interval::interval_lower(l[1] * 1 / 2 + -a[1] * 1 / 2 + s[4] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -a[2] * 1 + a[1] + a[0] * 1 / 2 + -s[2] * 3 / 2 + -l[1] * 1 + -l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -s[4] * 1 + a[4] + -a[2] * 1 + a[1] * 2 + -s[2] * 1 + -l[1] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(!(l[1] + -a[2] * 1 + s[4] >= RealNumRep::new(0, 1)));
    assert!(-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1));
    assert!(l[1] + -a[1] * 1 + s[1] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(-l[1] * 1 + -s[4] * 1 + a[4])]);
    ret = ret.intersection(&tmp);
    assert!(-s[4] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1));
    assert!(-s[4] * 1 + s[2] <= RealNumRep::new(-5, 1));
    assert!(-s[4] * 2 + s[2] * 3 + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-s[4] * 3 + s[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_s_4_t_5_l_2(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 2);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3])]);
    ret = ret.intersection(&tmp);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])));
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[3]),
        Interval::interval_lower(RealNumRep::new(10, 1) + s[1]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(-s[3] * 1 + -a[0] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1));
    assert!(-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!((l[1] == l[0]) || (!(RealNumRep::new(-5, 1) <= s[3] + -a[1] * 2 + s[0] + l[1] * 2)));
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[3]),
        Interval::interval_lower(-a[0] * 2 + s[1] * 3 + l[0] * 2),
        Interval::interval_lower(a[3] + -a[2] * 1 + a[1] + -a[0] * 1 + s[1] + -l[1] * 1 + l[0]),
    ]);
    ret = ret.intersection(&tmp);
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-10, 1)));
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-a[0] * 2 + s[1] * 3 + l[0] * 2),
        Interval::interval_lower(s[3] + a[3] + -a[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= s[3] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1]))
    );
    assert!(
        (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (-l[1] * 1 + -s[3] * 1 + a[1] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[3]),
        Interval::interval_lower(-a[0] * 2 + s[1] * 3 + l[0] * 2),
        Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + -a[2] * 1 + -a[0] * 1 + s[1] * 2 + l[0],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[3]),
        Interval::interval_lower(
            a[3] + -a[2] * 1 + a[1] + -a[0] * 1 / 2 + s[2] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2,
        ),
        Interval::interval_lower(-a[0] * 1 / 2 + s[2] * 3 / 2 + l[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[3] + a[4] + -a[2] * 1 + a[1] + -s[1] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -a[2] * 1),
            Interval::interval_lower(s[3] * 2 + -a[1] * 2 + s[1] + l[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3]),
            Interval::interval_upper(a[2] + -a[1] * 1 + s[2]),
            Interval::interval_lower(RealNumRep::new(5, 1) + l[1] + -a[1] * 1 + s[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-a[0] * 1 / 2 + s[2] * 3 / 2 + l[0] * 1 / 2),
        Interval::interval_lower(s[3] + a[3] + -a[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[3]),
        Interval::interval_lower(RealNumRep::new(5, 1) + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -a[3] * 1 + a[1] + s[2] * 2 + -s[0] * 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + -a[2] * 1 + a[1] + s[2] * 2 + -s[0] * 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(l[1] * 2 + s[3] * 3 + -a[1] * 2),
        Interval::interval_upper(s[3] * 2 + -s[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(l[1] + -a[1] * 1 + s[2] * 2),
        Interval::interval_lower(s[3] + a[3] + -a[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[3] * 2 + a[3] + -a[2] * 1 + a[1] + -s[1] * 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(-l[1] * 1 + s[3] * 1 / 2 + a[3] + -s[0] * 1 / 2),
        Interval::interval_upper(s[3] + a[3] + -a[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[3]),
        Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + -a[2] * 1 + s[2]),
        Interval::interval_lower(-a[0] * 1 / 2 + s[2] * 3 / 2 + l[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[1] * 1 + a[3] + s[2] + -s[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
    );
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(s[2] * 4 + -s[0] * 3)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[3]),
        Interval::interval_lower(RealNumRep::new(15, 1) + s[0]),
        Interval::interval_lower(RealNumRep::new(10, 1) + -l[1] * 1 + a[1]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -a[2] * 1 + a[1] + s[2] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[3] * 2 + a[4] + -a[3] * 1 + a[1] + -s[1] * 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[3]),
        Interval::interval_lower(
            a[3] + -a[2] * 1 + a[1] + s[2] * 1 / 3 + -s[0] * 1 / 3 + -l[1] * 1,
        ),
        Interval::interval_lower(s[2] * 4 / 3 + -s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + -a[2] * 1 + s[2]),
            Interval::interval_lower(RealNumRep::new(5, 1) + l[1] + -a[1] * 1 + s[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[2] * 4 / 3 + -s[0] * 1 / 3),
        Interval::interval_lower(s[3] + a[3] + -a[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[3]),
        Interval::interval_lower(s[2] * 4 / 3 + -s[0] * 1 / 3),
        Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + -a[2] * 1 + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + -a[2] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-20, 1) + a[1] * 4 + -s[0] * 3 + -l[1] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-10, 1) + a[4] + -a[3] * 1 + a[1] * 3 + -s[0] * 2 + -l[1] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[3] + a[3] + -a[2] * 1),
        Interval::interval_lower(s[2] * 3 / 2 + -s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[3]),
        Interval::interval_lower(s[2] * 3 / 2 + -s[1] * 1 / 2),
        Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + -a[2] * 1 + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[3]),
        Interval::interval_lower(s[1] * 2 + -s[0] * 1),
        Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + -a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[3]),
        Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + -a[2] * 1 + s[2]),
        Interval::interval_lower(l[1] + -a[1] * 1 + s[2] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[3]),
        Interval::interval_lower(
            a[3] + -a[2] * 1 + a[1] + s[2] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1,
        ),
        Interval::interval_lower(s[2] * 3 / 2 + -s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[3]),
        Interval::interval_lower(s[1] * 2 + -s[0] * 1),
        Interval::interval_lower(
            a[3] + -a[2] * 1 + a[1] + s[1] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[1] * 2 + -s[0] * 1),
        Interval::interval_lower(s[3] + a[3] + -a[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -a[2] * 1),
            Interval::interval_lower(s[3] + -a[1] * 1 + s[2] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -a[2] * 1),
            Interval::interval_lower(s[3] * 3 + -a[1] * 3 + s[0] + l[1] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[3] * 1 / 2 + a[4] + -a[2] * 1 + a[1] + -s[0] * 1 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-10, 1) + a[3] + -a[2] * 1 + a[1] * 3 + -s[0] * 2 + -l[1] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[3] + a[3] + -a[2] * 1 + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[3] + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + -l[1] * 2 + a[3] + a[1] + -s[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(!(l[1] + -a[2] * 1 + s[3] >= RealNumRep::new(0, 1)));
    let tmp = IntervalList::new(vec![Interval::interval_upper(-l[1] * 1 + a[4])]);
    ret = ret.intersection(&tmp);
    assert!(-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1));
    assert!(l[1] + -a[1] * 1 + s[1] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        -l[1] * 1 + s[3] + a[3] + -s[1] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[3] * 3 + -s[1] * 2)]);
    ret = ret.intersection(&tmp);
    ret
}

pub fn compute_sim_s_4_t_5_l_2(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
    C: RealNumRep,
    B: RealNumRep,
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 2);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3])]);
    ret = ret.intersection(&tmp);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])));
    assert!(-l[1] * 1 + a[1] + -s[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(-l[1] * 1 + -s[3] * 1 + a[1] + C + -B * 1 <= RealNumRep::new(0, 1));
    assert!(-l[1] * 1 + a[1] + -a[0] * 1 + -C * 1 + -B * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(-l[1] * 1 + a[1] + -C * 1 + -s[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(-l[1] * 1 + a[1] + -C * 2 + -s[0] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!((l[1] == l[0]) || (l[1] + -a[1] * 1 + s[1] + B <= RealNumRep::new(0, 1)));
    assert!((l[1] == l[0]) || (l[1] + -a[1] * 1 + -C * 1 + s[2] + B <= RealNumRep::new(0, 1)));
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= s[3] + -C * 1 + -a[1] * 1 + l[1])));
    assert!((l[1] == l[0]) || (l[1] + -a[1] * 1 + C + s[0] + B <= RealNumRep::new(0, 1)));
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -B * 1 + C * 3 + a[1] + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[1] == l[0]) || (B + s[3] + -C * 2 + -a[1] * 1 + l[1] <= RealNumRep::new(0, 1)));
    if !(RealNumRep::new(0, 1) <= C + -a[3] * 1 + a[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -B * 1 + C * 2 + a[1] + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(a[2] + -a[1] * 1 + -C * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3]),
            Interval::interval_lower(-B * 1 + C * 2 + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (RealNumRep::new(0, 1) <= s[3] + -C * 1 + -a[1] * 1 + l[1])
            || (-s[3] * 1 + C * 2 + s[0] <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            C * 2 + a[4] + -a[3] * 1 + a[1] + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (RealNumRep::new(0, 1) <= l[1] + -a[1] * 1 + C + s[0])
            || (C + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[1] + -a[1] * 1 + C + s[0]))
    );
    assert!(s[3] + -C * 4 + -s[0] * 1 <= RealNumRep::new(0, 1));
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            C * 2 + a[3] + -a[2] * 1 + a[1] + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            C + a[4] + -a[2] * 1 + a[1] + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -a[1] * 1 + -C * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-B * 1 + C * 2 + a[1] + -l[1] * 1),
            Interval::interval_lower(C + a[3] + -a[2] * 1 + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_upper(-l[1] * 1 + a[4])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 2 + a[4] + -a[2] * 1 + a[0] + -l[0] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(-l[1] * 1 + a[3] + C)]);
    ret = ret.intersection(&tmp);
    assert!(!(RealNumRep::new(0, 1) <= -B * 1 + s[3] + -C * 2 + -a[0] * 1 + l[0]));
    assert!(!(RealNumRep::new(0, 1) <= -B * 1 + s[3] + -C * 3 + -s[0] * 1));
    assert!(s[3] + -a[0] * 1 + -C * 3 + l[0] <= RealNumRep::new(0, 1));
    assert!(l[1] + s[3] + -a[1] * 1 + -C * 2 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + s[3] + C + a[4] + -a[3] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 3 + a[4] + -a[3] * 1 + a[0] + -l[0] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 4 + a[4] + -a[3] * 1 + s[0],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(B + s[3] + a[4] + -a[2] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 2 + a[4] + -a[3] * 1 + s[2],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 3 + a[4] + -a[3] * 1 + s[1],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        -l[1] * 1 + a[4] + -a[3] * 1 + a[1] + B + C * 2,
    )]);
    ret = ret.intersection(&tmp);
    if !(B + -C * 1 + a[3] + -a[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(-B * 1 + s[3] + C)]);
        ret = ret.intersection(&tmp);
    }
    if !(B + -C * 1 + a[3] + -a[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3]),
            Interval::interval_lower(C * 3 + s[0]),
            Interval::interval_lower(-l[1] * 1 + a[1] + C * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[3]),
        Interval::interval_lower(C * 2 + s[1]),
        Interval::interval_lower(B + C + a[3] + -a[2] * 1 + s[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 + a[3]),
        Interval::interval_lower(C + s[2]),
        Interval::interval_lower(B + a[3] + -a[2] * 1 + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + s[3] + C + a[3] + -a[2] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 2 + a[3] + -a[2] * 1 + s[2],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C + a[4] + -a[2] * 1 + s[2],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 3 + a[4] + -a[2] * 1 + s[0],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        -l[1] * 1 + a[1] + B + C + a[4] + -a[2] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 2 + a[4] + -a[2] * 1 + s[1],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 3 + a[3] + -a[2] * 1 + s[1],
    )]);
    ret = ret.intersection(&tmp);
    if !((!(B + -C * 1 + a[3] + -a[2] * 1 <= RealNumRep::new(0, 1)))
        || (RealNumRep::new(0, 1) <= l[1] + -a[1] * 1 + C + s[0])
        || (a[2] + -a[1] * 1 + -C * 1 + -B * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            B + C * 2 + a[3] + -a[2] * 1 + s[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(B + -C * 1 + a[3] + -a[2] * 1 <= RealNumRep::new(0, 1)))
        || (!(a[2] + -a[1] * 1 + -C * 1 + -B * 1 <= RealNumRep::new(0, 1))))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3]),
            Interval::interval_lower(B + C * 2 + a[3] + -a[2] * 1 + s[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 4 + a[3] + -a[2] * 1 + s[0],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 3 + a[3] + -a[2] * 1 + a[0] + -l[0] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        -l[1] * 1 + a[1] + B + C * 2 + a[3] + -a[2] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-B * 1 + s[3] + C),
        Interval::interval_lower(s[3] + a[3] + -a[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !((a[2] + -a[1] * 1 + -C * 1 + -B * 1 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= l[1] + -a[1] * 1 + C + s[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[1] + C * 2),
            Interval::interval_lower(-l[1] * 1 + a[1] + B + C + a[3] + -a[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(B >= RealNumRep::new(5, 1));
    assert!(C >= RealNumRep::new(5, 1));
    assert!(l[0] >= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[3] + C * 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 3 + s[2])]);
    ret = ret.intersection(&tmp);
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + -C * 1 + s[1] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + -C * 2 + s[2] + l[0] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[0] + C * 4 + -l[0] * 1)]);
    ret = ret.intersection(&tmp);
    assert!(-C * 2 + s[2] + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-C * 3 + s[2] + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 5 + s[0])]);
    ret = ret.intersection(&tmp);
    assert!(l[1] + -a[1] * 1 + -C * 1 + s[2] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(-l[1] * 1 + a[1] + C * 3)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 4 + s[1])]);
    ret = ret.intersection(&tmp);
    assert!(l[1] + -a[1] * 1 + s[1] <= RealNumRep::new(0, 1));
    assert!(-C * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-s[3] * 1 + C + s[1] <= RealNumRep::new(0, 1));
    assert!(s[3] + -C * 2 + -s[2] * 1 <= RealNumRep::new(0, 1));
    assert!(!(-B * 1 + s[3] + -C * 2 + -s[1] * 1 >= RealNumRep::new(0, 1)));
    assert!(!(-B * 1 + s[3] + -C * 1 + -s[2] * 1 >= RealNumRep::new(0, 1)));
    assert!(s[3] + -C * 3 + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(!(l[1] + -a[1] * 1 + -B * 1 + s[3] + -C * 1 >= RealNumRep::new(0, 1)));
    assert!(!(l[1] + -a[2] * 1 + s[3] >= RealNumRep::new(0, 1)));
    ret
}

pub fn compute_c_t_5_l_3(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 3);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])));
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(-a[2] * 1 + l[2] + s[4])]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[2] * 1 / 3 + -s[0] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    if !((l[1] == l[0]) || (l[2] == l[1])) {
        let tmp = IntervalList::new(vec![Interval::interval_point(
            -l[2] * 1 + a[2] + -a[1] * 1 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(-5, 1)));
    let tmp = IntervalList::new(vec![Interval::interval_lower(-a[0] * 1 + s[1] + l[0])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[2] + -s[1] * 1 + -l[2] * 1),
        Interval::interval_upper(s[4] * 1 / 2 + -s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(-a[2] * 1 + l[2] + s[4]),
        Interval::interval_upper(a[2] + -s[1] * 1 + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(s[2] + -s[0] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[2] * 1 + l[2] + s[4] + -a[1] * 1 + s[1] + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(0, 1));
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + -a[2] * 1 + s[3] + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)));
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + -l[2] * 1 + -a[1] * 1 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(s[3] + -s[1] * 1)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        l[1] * 1 / 3 + -a[1] * 1 / 3 + s[4] * 1 / 3,
    )]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + l[2] + s[4] + -a[1] * 1 + s[0] + l[1]))
    );
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[0] * 1 / 3 + s[3] * 1 / 3 + l[0] * 1 / 3,
    )]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 2) + -a[1] * 1 / 2 + s[3] * 1 / 2 + l[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + -a[1] * 1 + s[2] + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[0] * 1 / 2 + s[2] * 1 / 2 + l[0] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[4] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 3 + -s[2] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -l[2] * 1 + -a[1] * 1 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[0] * 1 + -l[1] * 1),
            Interval::interval_upper(s[3] * 1 / 2 + -s[0] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(-5, 1)));
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-5, 2) + a[2] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 / 2,
            ),
            Interval::interval_upper(RealNumRep::new(-5, 1) + l[1] + -a[1] * 1 + a[2] + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[1] + -s[0] * 1 + -l[1] * 1),
        Interval::interval_lower(a[2] * 1 / 2 + -l[2] * 1 / 2 + -s[0] * 1 / 2),
        Interval::interval_upper(s[4] * 1 / 3 + -s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[2] + -s[1] * 1 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[1] + -s[0] * 1 + -l[1] * 1),
            Interval::interval_upper(l[1] + -a[1] * 1 + s[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 4 + -s[1] * 1 / 4)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[1] * 1 / 2 + s[3] * 1 / 2 + l[1] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3] * 1 / 3 + -s[1] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3] * 1 / 4 + -s[0] * 1 / 4)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(-a[1] * 1 + s[2] + l[1])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(a[2] * 1 / 2 + -l[2] * 1 / 2 + -s[0] * 1 / 2),
        Interval::interval_upper(-a[2] * 1 + l[2] + s[4]),
        Interval::interval_upper(a[2] + -l[2] * 1 + -a[1] * 1 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(a[1] + -s[0] * 1 + -l[1] * 1),
        Interval::interval_upper(-a[2] * 1 + l[2] + s[4]),
        Interval::interval_upper(s[4] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(RealNumRep::new(5, 1))]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[2] * 1 / 2 + -s[1] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    assert!(-a[2] * 1 + l[2] + s[2] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[1] * 1 / 2 + -s[0] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    assert!(!(l[2] + -a[3] * 1 + s[4] >= RealNumRep::new(0, 1)));
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[4] + -s[2] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 2 + -s[3] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        s[4] * 1 / 4 + -a[0] * 1 / 4 + l[0] * 1 / 4,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(-a[2] * 1 + l[2] + s[3])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3] * 1 / 2 + -s[2] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[2] * 1 / 2 + l[2] * 1 / 2 + s[4] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 5 + -s[0] * 1 / 5)]);
    ret = ret.intersection(&tmp);
    ret
}

pub fn compute_b_t_5_l_3(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 3);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])) || (l[1] == l[0]));
    let tmp = IntervalList::new(vec![Interval::interval_lower(-l[2] * 1 + a[2] + -s[3] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1)]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[1] + -s[1] * 1 + -l[1] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= -l[2] * 1 + l[1])));
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(-l[2] * 1 + a[2] + -s[2] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -l[2] * 2 + -s[4] * 1 + a[2] * 2 + -a[1] * 1 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            l[2] + -a[2] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + -s[3] * 3 + s[1] * 2 <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[2] + -l[2] * 1 + -s[4] * 1 <= RealNumRep::new(-5, 1))
            || (-s[4] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (a[2] + -l[2] * 1 + -s[4] * 1 <= RealNumRep::new(-5, 1))
            || (-s[4] * 1 / 3 + s[0] * 1 / 3 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1))
            || (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(-a[2] * 1 + l[2] + s[2] <= RealNumRep::new(0, 1));
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[2] * 1 + l[2] + s[3] + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (s[3] + -s[2] * 3 + s[0] * 2 <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + -s[2] * 4 + s[0] * 3 <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[2] + -a[2] * 1 + a[1] * 2 + -a[0] * 1 + -l[1] * 2 + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[2] + -s[1] * 1 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 3 + a[2] + -s[1] * 2 / 3 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (l[2] + -a[2] * 1 + a[1] + -l[1] * 1 <= RealNumRep::new(-5, 1)));
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        RealNumRep::new(10, 1) + -s[4] * 1 + a[1] + -l[1] * 1,
    )]);
    ret = ret.intersection(&tmp);
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1,
    )]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[2] * 2 + a[2] * 2 + -a[1] * 1 + -s[3] * 1 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[4] + a[1] + -s[2] * 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] * 3 + -l[2] * 3 + -s[4] * 2 + -s[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -s[4] * 1 / 3 + a[1] + -s[1] * 2 / 3 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[2] + -a[2] * 1 + a[1] * 2 + -s[1] * 1 + -l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(a[2] * 3 + -l[2] * 3 + -s[4] * 2 + -s[1] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -l[2] * 1 + -s[4] * 1 + a[2] + a[1] + -s[1] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -a[0] * 2 / 3 + -l[1] * 1 + l[0] * 2 / 3),
        Interval::interval_lower(
            -l[2] * 1 + -s[4] * 1 + a[2] + a[1] + -a[0] * 1 + -l[1] * 1 + l[0],
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (!(a[2] * 2 + -l[2] * 2 + -s[4] * 1 + -a[1] * 1 + l[1] <= RealNumRep::new(0, 1)))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[2] * 3 + -s[4] * 1 + a[2] * 3 + -a[1] * 2 + l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[4] * 1 / 2 + a[1] + -s[3] * 3 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[4] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[2] * 2 + -a[2] * 2 + a[1] * 3 + -s[0] * 1 + -l[1] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-a[0] * 1 + -s[3] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (RealNumRep::new(0, 1) <= -a[1] * 1 + s[3] * 1 / 2 + s[0] * 1 / 2 + l[1])
    );
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[2] * 1 + l[2] + s[4] + -s[2] * 2 + s[0] * 2 <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        RealNumRep::new(5, 1) + -s[4] * 1 + a[2] + -l[2] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2 + -l[1] * 1),
        Interval::interval_lower(-l[2] * 2 + -s[4] * 2 + a[2] * 2 + a[1] + -s[0] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 2 + a[1] * 3 / 2 + -s[0] * 1 + -l[1] * 3 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -s[4] * 2 / 3 + a[2] + -s[1] * 1 / 3 + -l[2] * 1,
    )]);
    ret = ret.intersection(&tmp);
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + -s[2] * 2 + s[0] + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] + -s[2] * 3 + s[0] * 2)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -s[4] * 3 / 4 + a[2] + -s[0] * 1 / 4 + -l[2] * 1,
    )]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + l[2] + s[4] + -a[1] * 1 + s[0] + l[1]))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -l[2] * 1 + a[1] + -s[3] * 1 + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -s[1] * 3 / 2 + s[0] * 1 / 2 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[3] * 1 / 2 + s[0] * 1 / 2 + l[1]))
            || (-l[1] * 1 + a[1] + -s[3] * 1 <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -s[4] * 2 / 3 + a[2] + -a[0] * 1 / 3 + -l[2] * 1 + l[0] * 1 / 3,
    )]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + a[0] + -s[1] * 2 + -l[2] * 1 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 + a[2] * 2 + -s[1] * 1 + -l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[4] + a[1] + -s[3] * 2 + -l[0] * 1),
            Interval::interval_lower(s[4] + -s[3] * 3 / 2 + s[0] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        l[1] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 / 2 + a[2] + -l[2] * 1,
    )]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-s[4] * 1 + a[2] * 2 + -a[1] * 1 + -l[2] * 2 + l[0]),
            Interval::interval_upper(-s[4] * 2 + a[2] * 3 + -s[0] * 1 + -l[2] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                l[1] * 1 / 2 + -a[1] * 1 / 2 + a[2] + -s[3] * 1 / 2 + -l[2] * 1,
            ),
            Interval::interval_upper(a[2] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + l[1] + -a[1] * 1 + a[2] + -l[2] * 1),
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[2] + -s[0] * 1 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -s[4] * 1 / 2 + a[2] + -s[2] * 1 / 2 + -l[2] * 1,
    )]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                l[1] * 2 / 3 + -a[1] * 2 / 3 + -s[4] * 1 / 3 + a[2] + -l[2] * 1,
            ),
            Interval::interval_upper(-s[4] * 1 / 2 + a[2] + -s[0] * 1 / 2 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] + -s[3] * 2 + s[1])]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-s[4] * 1 / 2 + -a[0] * 1 + s[1] * 3 / 2 + l[0] <= RealNumRep::new(0, 1))
            || (-l[2] * 1 + -s[4] * 1 + a[2] + -a[0] * 1 + s[1] + l[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (-s[4] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1))
            || (-l[2] * 2 + -s[4] * 2 + a[2] * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (s[4] * 1 / 2 + -s[3] * 1 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
            || (-l[1] * 2 + a[1] * 2 + s[4] + -s[3] * 3 <= RealNumRep::new(0, 1))
    );
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[2] * 1 + l[2] + s[4] + -s[2] * 1 + s[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(RealNumRep::new(5, 1))]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(!(l[2] + -a[3] * 1 + s[4] >= RealNumRep::new(0, 1)));
    assert!(l[1] + -a[1] * 1 + s[1] <= RealNumRep::new(0, 1));
    assert!(-s[4] * 1 + s[2] <= RealNumRep::new(-5, 1));
    assert!(-s[4] * 3 + s[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(l[1] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 / 2 + s[2] <= RealNumRep::new(0, 1));
    assert!(-s[4] * 2 + s[2] * 3 + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-s[4] * 2 + -a[0] * 1 + s[2] * 3 + l[0] <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_q_4_t_5_l_3(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 3);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])) || (l[1] == l[0]));
    assert!((l[2] == l[1]) || (l[2] + -a[2] * 1 + s[2] <= RealNumRep::new(-5, 1)));
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_point(RealNumRep::new(0, 1)),
    ]);
    ret = ret.intersection(&tmp);
    assert!((!(RealNumRep::new(0, 1) <= -l[2] * 1 + l[1])) || (l[2] == l[1]));
    assert!(
        (l[1] == l[0])
            || (-l[2] * 1 + -s[4] * 1 + a[2] + -a[1] * 1 + s[2] + l[1] <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-10, 1) + -l[2] * 1 + a[4] + -s[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(l[1] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 / 2 + s[2] <= RealNumRep::new(0, 1));
    assert!((l[2] == l[1]) || (l[2] + -a[2] * 1 + a[1] + -l[1] * 1 <= RealNumRep::new(-5, 1)));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[2] * 1 + a[4] + -s[2] * 5 / 3 + s[0] * 2 / 3),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(-5, 1)));
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + -s[3] * 3 + s[1] * 2 <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (s[4] * 1 / 2 + -s[3] * 1 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
            || (-l[1] * 2 + a[1] * 2 + s[4] + -s[3] * 3 <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-a[0] * 1 + -s[3] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[1] + -s[1] * 1 + -l[1] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(a[4] + -s[3] * 3 + s[1] * 2 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 3 + s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 2 + s[0]),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 2 + s[0]),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= -l[2] * 1 + l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(-l[1] * 1 + -s[4] * 1 + a[4] + -a[3] * 1 + a[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-10, 1)));
    assert!(
        (-s[4] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (-l[2] * 1 + -s[4] * 1 + a[2] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-5, 1) + -l[2] * 1 + a[4] + -s[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (l[2] * 3 + -a[2] * 3 + a[1] * 3 + s[2] + -s[0] * 1 + -l[1] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (-s[4] * 1 + -a[1] * 1 + s[2] * 2 + l[1] <= RealNumRep::new(-5, 1)));
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[2] * 1 + -s[4] * 1 + a[2] <= RealNumRep::new(-5, 1))
            || (-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1]))
    );
    assert!(
        (RealNumRep::new(0, 1) <= s[4] * 1 / 3 + -a[1] * 1 + s[0] * 2 / 3 + l[1])
            || (-s[4] * 1 / 3 + s[0] * 1 / 3 <= RealNumRep::new(-5, 1))
            || (-l[2] * 1 + -s[4] * 1 + a[2] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] * 2 + -a[2] * 2 + a[1] * 2 + -a[0] * 1 + s[2] + -l[1] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (!(RealNumRep::new(0, 1) <= -l[2] * 1 + l[1]))
            || (a[2] + -a[1] * 1 + -s[3] * 1 + s[1] <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[1] + a[0] + -s[1] * 2 + -l[1] * 1 + -l[0] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[2] * 1 + a[4] + -s[1] * 5 / 2 + s[0] * 3 / 2),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[1] * 1 + s[0]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (-s[4] * 1 / 2 + -a[0] * 1 + s[1] * 3 / 2 + l[0] <= RealNumRep::new(0, 1))
            || (-l[2] * 1 + -s[4] * 1 + a[2] + -a[0] * 1 + s[1] + l[0] <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -s[4] * 1 / 2 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 / 2 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[2] * 2 + -s[4] * 2 + a[2] * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1))
            || (-s[4] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + -a[0] * 1 + s[1] * 2 + l[2] + l[0] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(RealNumRep::new(5, 1)),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[2] + -s[2] * 1 + -l[2] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + -a[2] * 1 + l[2] + -s[2] * 2 + s[0] * 2 <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] * 1 / 4 + -s[2] * 1 + s[0] * 3 / 4 <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[2] * 2 + a[4] + a[2] + -s[3] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(5, 1)),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 3 / 2 + a[4] + s[1] * 1 / 2 + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (!(l[2] == l[1]))
            || (-s[4] * 1 / 2 + a[2] + -a[1] * 1 + s[1] * 1 / 2 <= RealNumRep::new(0, 1))
    );
    if !((l[1] == l[0]) || (!(l[2] == l[1]))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(-s[4] * 1 + a[2] * 2 + -a[1] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (!(l[1] == l[0]))
            || (-a[2] * 1 + a[1] + s[1] * 1 / 2 + -s[0] * 1 / 2 + l[2] + -l[0] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] * 4 + -a[2] * 4 + a[1] * 4 + s[3] + -s[0] * 1 + -l[1] * 4
                <= RealNumRep::new(0, 1))
    );
    if !(-s[4] * 1 + a[4] + -a[3] * 1 + s[2] <= RealNumRep::new(-5, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(RealNumRep::new(0, 1)),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(RealNumRep::new(5, 1)),
        Interval::interval_lower(RealNumRep::new(5, 1) + -s[4] * 1 + a[4] + -a[3] * 1 + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(RealNumRep::new(5, 1)),
        Interval::interval_lower(
            RealNumRep::new(5, 2) + -s[4] * 1 / 2 + a[4] + -a[3] * 1 + a[1] * 1 / 2 + -l[1] * 1 / 2,
        ),
        Interval::interval_lower(
            RealNumRep::new(5, 1) + -s[4] * 1 + a[2] + -l[2] * 1 + a[4] + -a[3] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (l[2] * 2 + -a[2] * 2 + a[1] + s[3] + -l[1] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] * 3 + -a[2] * 3 + a[1] * 3 + -a[0] * 1 + s[3] + -l[1] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (!(l[1] == l[0]))
            || (-a[2] * 1 + a[1] + -a[0] * 1 + s[1] + l[2] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] * 2 + -a[2] * 2 + a[1] * 2 + s[2] + -s[1] * 1 + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[2] * 1 + a[4] + a[0] * 1 / 3 + -s[3] * 4 / 3 + -l[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 3 / 2 + a[4] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(RealNumRep::new(5, 1) + -s[4] * 1 + a[2] + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(RealNumRep::new(10, 1) + -s[4] * 1 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            RealNumRep::new(5, 1) + -s[4] * 1 + a[4] + -a[3] * 1 + a[1] + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[4] + -a[3] * 1 + -s[2] * 1 + s[0]),
            Interval::interval_lower(-a[2] * 1 + a[4] + -s[2] * 2 + s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                RealNumRep::new(20, 1) + -l[2] * 1 + a[4] + -a[1] * 4 + s[0] * 3 + l[1] * 4,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + -a[3] * 1 + -a[1] * 1 + s[0] + l[1],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[2] * 1 + a[4] + a[0] * 3 + -s[1] * 4 + -l[0] * 3),
        Interval::interval_upper(a[4] + -a[2] * 1 + a[0] * 2 + -s[1] * 2 + -l[0] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-15, 1) + -l[2] * 1 + a[4] + -s[1] * 1),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -a[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (l[2] * 2 + -a[2] * 2 + a[1] * 2 + s[1] + -s[0] * 1 + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(l[1] == l[0]))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 + a[4] + -a[3] * 1 + a[2] * 2 + -a[1] * 1 + -l[2] * 2 + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[2] * 1 + a[4] + -s[3] * 3 / 2 + s[2] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[2] * 1 + -l[1] * 1 / 2 + a[4] + a[1] * 1 / 2 + -s[3] * 3 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 / 2 + a[2] + -s[2] * 1 / 2 + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 1 / 2 + a[2] + -a[1] * 1 / 2 + l[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (l[2] * 3 + -a[2] * 3 + a[1] * 3 + s[3] + -s[1] * 1 + -l[1] * 3
                <= RealNumRep::new(0, 1))
    );
    if !((l[2] == l[1])
        || (l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))
        || (!(l[1] == l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -a[3] * 1 + -a[2] * 2 + a[1] * 3 + -s[1] * 1 + l[2] * 2 + -l[0] * 3,
            ),
            Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -s[1] * 2 / 3 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))
        || (!(l[1] == l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -a[3] * 1 + -a[2] * 2 + a[1] * 3 + -a[0] * 1 + l[2] * 2 + -l[0] * 2,
            ),
            Interval::interval_lower(
                -s[4] * 2 / 3 + -a[0] * 1 / 3 + l[0] * 1 / 3 + a[2] + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[2] * 1 + l[2] + s[3] + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(5, 1)),
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 3 / 2 + a[4] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(
            RealNumRep::new(5, 1) + -l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 + a[4] + -a[3] * 1,
        ),
        Interval::interval_lower(
            RealNumRep::new(5, 1) + -s[4] * 1 / 3 + a[4] + -a[3] * 1 + s[0] * 1 / 3,
        ),
        Interval::interval_lower(
            RealNumRep::new(5, 1) + -s[4] * 1 + a[2] + -l[2] * 1 + a[4] + -a[3] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(5, 1)),
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 3 / 2 + a[4] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(
            RealNumRep::new(5, 2) + -s[4] * 1 / 2 + a[4] + -a[3] * 1 + a[1] * 1 / 2 + -l[1] * 1 / 2,
        ),
        Interval::interval_lower(
            RealNumRep::new(5, 1) + -s[4] * 1 + a[2] + -l[2] * 1 + a[4] + -a[3] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[4] * 1 / 2 + a[1] + -s[3] * 3 / 2 + -l[1] * 1),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(-a[2] * 1 + a[4] + -s[2] * 2 + s[0] * 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[2] * 2 + s[0] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-a[2] * 1 + a[4] + -s[2] * 2 + s[0] * 2),
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[2] * 2 + s[0] + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !((a[2] + -l[2] * 1 + -s[2] * 2 + s[0] <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= s[4] * 1 / 3 + -a[1] * 1 + s[0] * 2 / 3 + l[1]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[2] * 2 + s[0] + -l[1] * 1),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[2] * 4 + s[0] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-15, 1) + -l[2] * 1 + l[1] + a[4] + -a[1] * 1),
        Interval::interval_upper(RealNumRep::new(-20, 1) + -l[2] * 1 + a[4] + -s[0] * 1),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -a[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (-l[2] * 3 + -s[4] * 1 + a[2] * 3 + -a[1] * 3 + s[0] + l[1] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] + -a[2] * 1 + a[1] + -a[0] * 1 + s[1] + -l[1] * 1 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[2] * 2 + -s[4] * 1 + a[2] * 2 + -a[1] * 2 + s[1] + l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[2] * 1 + a[2] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[2] * 1 + a[2] + -a[1] * 1 + -s[3] * 1 + s[1] + l[1] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] * 2 + -a[2] * 2 + a[1] * 2 + s[3] + -s[2] * 1 + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + -a[2] * 1 + a[1] * 2 + -s[1] * 1 + -l[1] * 2 + l[2],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (!(RealNumRep::new(0, 1)
                <= -l[1] * 1 / 2 + a[1] * 1 / 2 + s[4] * 1 / 2 + -a[2] * 1 + l[2]))
    );
    assert!(
        (l[1] == l[0])
            || (-l[2] * 2 + a[2] * 2 + -a[1] * 2 + -s[3] * 1 + s[0] + l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[2] * 1 + a[2] + -a[1] * 2 + s[0] + l[1] * 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= s[4] + -a[1] * 1 + -s[3] * 2 + s[1] * 2 + l[1]))
    );
    assert!(
        (l[1] == l[0])
            || (!(RealNumRep::new(0, 1) <= l[2] + s[4] + -a[2] * 1 + -a[1] * 1 + s[0] + l[1]))
    );
    assert!(
        (l[1] == l[0])
            || (-a[2] * 1 + l[2] + -a[1] * 1 + s[3] + s[0] + l[1] <= RealNumRep::new(-5, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(a[4] + -a[3] * 1 + a[2] + -s[3] * 1 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 3 / 2 + a[4] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 / 2 + a[2] + -s[2] * 1 / 2 + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(RealNumRep::new(5, 1) + -s[4] * 1 + a[2] + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                RealNumRep::new(-10, 1) + -l[2] * 1 + a[4] + a[1] * 2 + -s[2] * 3 + -l[1] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[2] * 1 + a[4] + -s[3] * 4 / 3 + s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[4] + -a[3] * 1 + -s[3] * 1 + s[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= -l[2] * 1 + l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[2] + -s[3] * 2 + s[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -s[4] * 1 / 2 + a[4] + -a[3] * 1 + a[1] * 3 / 2 + -s[1] * 1 + -l[1] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -s[4] * 1 + a[2] + -l[2] * 1 + a[4] + -a[3] * 1 + a[1] * 2 + -s[1] * 2 + -l[1] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(5, 1)),
        Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(
            RealNumRep::new(5, 2) + -s[4] * 1 / 2 + a[4] + -a[3] * 1 + a[1] * 1 / 2 + -l[1] * 1 / 2,
        ),
        Interval::interval_lower(
            RealNumRep::new(5, 1) + -s[4] * 1 + a[2] + -l[2] * 1 + a[4] + -a[3] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[2] * 1 + a[4] + -s[3] * 5 / 4 + s[0] * 1 / 4),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -l[2] * 2 / 3 + a[4] * 2 / 3 + a[1] * 1 / 3 + -s[3] * 1 + -l[1] * 1 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -a[0] * 1 / 2 + l[0] * 1 / 2 + a[1] + -s[3] * 1 / 2 + -l[1] * 1,
            ),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 2 + s[0]),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= -l[2] * 1 + l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 2 + s[0]),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(l[2] + a[4] + -a[2] * 2 + a[1] * 2 + -s[2] * 1 + -l[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))
        || (a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[2] * 2 + a[1] * 3 + -s[0] * 1 + -l[1] * 3 + l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                -s[4] * 1 / 3 + a[4] + -a[3] * 1 + a[1] + -s[1] * 2 / 3 + -l[1] * 1,
            ),
            Interval::interval_upper(a[4] + -a[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -l[2] * 1 / 2 + -a[3] * 1 / 2 + a[4] + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-10, 1) + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_upper(l[1] + -a[1] * 1 + -a[4] * 1 + a[3] + a[2] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(
            -s[4] * 3 + a[2] * 3 + -l[2] * 3 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(!(RealNumRep::new(0, 1) <= -l[2] * 1 + l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[2] + -s[1] * 1 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(5, 1)),
        Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(
            RealNumRep::new(5, 1) + -s[4] * 1 / 2 + a[4] + -a[3] * 1 + s[1] * 1 / 2,
        ),
        Interval::interval_lower(
            RealNumRep::new(5, 1) + -s[4] * 1 + a[2] + -l[2] * 1 + a[4] + -a[3] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -s[4] * 1 + a[4] + -a[3] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(RealNumRep::new(-5, 1) + -l[2] * 2 + a[4] + a[2] + -s[3] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[2] == l[1]) || (l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                a[4] + -a[3] * 1 + -a[2] * 3 + a[1] * 4 + -s[0] * 1 + -l[1] * 4 + l[2] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 4 + -s[4] * 3 + a[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
            Interval::interval_lower(
                -s[4] * 3 / 4 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 / 4 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                RealNumRep::new(-5, 2)
                    + -l[2] * 1
                    + a[4]
                    + a[1] * 1 / 2
                    + -s[3] * 3 / 2
                    + -l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[2] + -l[2] * 1 + a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -s[1] * 1 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[2] * 1 + a[4] + -s[2] * 2 + s[1]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= s[4] + -a[1] * 1 + -s[3] * 1 + s[0] + l[1]))
    );
    assert!(
        (l[1] == l[0])
            || (!(RealNumRep::new(-5, 1) <= s[4] * 1 / 2 + -a[1] * 3 / 2 + s[0] + l[1] * 3 / 2))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(5, 1)),
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 3 / 2 + a[4] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -l[1] * 1 + a[1] + a[4] + -a[3] * 1 + a[2] + -s[2] * 2 + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -s[4] * 1 + a[4] + -a[3] * 1 + a[2] * 2 + -s[2] * 1 + -l[2] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[2] + a[0] * 1 / 2 + -s[2] * 3 / 2 + -l[2] * 1 + -l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 1 + a[4] * 1 / 2 + a[2] * 1 / 2 + -s[3] * 1),
            Interval::interval_upper(-l[2] * 1 + a[3] + -s[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (RealNumRep::new(0, 1) <= -a[1] * 1 + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1])
            || (l[2] + -a[2] * 1 + s[3] * 2 / 3 + s[0] * 1 / 3 <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(
            -s[4] * 1 / 2 + a[4] + -a[3] * 1 + a[1] + -s[2] * 1 / 2 + -l[1] * 1,
        ),
        Interval::interval_lower(
            -s[4] * 1 + a[2] + -l[2] * 1 + a[4] + -a[3] * 1 + a[1] + -s[2] * 1 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(
            -s[4] * 2
                + a[2] * 2
                + -l[2] * 2
                + a[4]
                + -a[3] * 1
                + a[1]
                + -a[0] * 1
                + -l[1] * 1
                + l[0],
        ),
        Interval::interval_lower(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!((l[2] == l[1]) || (l[2] + -a[2] * 1 + s[1] <= RealNumRep::new(-10, 1)));
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[4] * 1 / 2 + a[1] + -s[3] * 3 / 2 + -l[1] * 1),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 2 + s[0]),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
            Interval::interval_lower(l[2] + a[4] + -a[2] * 2 + a[1] * 2 + -s[3] * 1 + -l[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                s[4] + -a[2] * 1 + l[2] + a[4] + -a[3] * 1 + -s[2] * 2 + s[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                s[4] + -a[2] * 1 + l[2] + a[4] + -a[3] * 1 + -s[2] * 2 + s[0] * 2,
            ),
            Interval::interval_lower(-a[2] * 1 + l[2] + s[4] + -s[2] * 1 + s[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(l[1] == l[0]))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                a[4] + -a[3] * 1 + -a[2] * 2 + a[1] * 3 + -a[0] * 1 + l[2] * 2 + -l[0] * 2,
            ),
            Interval::interval_lower(
                l[2] * 3 + a[4] + -a[2] * 4 + a[1] * 4 + -a[0] * 1 + -l[1] * 4 + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[2] * 2 + a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(l[2] == l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 3 / 2 + a[4] + -l[2] * 1,
            ),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(-l[1] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 / 2 + a[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 2 / 3 + -a[0] * 1 / 3 + l[0] * 1 / 3 + a[2] + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 3 / 2 + a[4] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 2 / 3 + -a[0] * 1 / 3 + l[0] * 1 / 3 + a[2] + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(!(l[2] == l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 3 / 2 + a[4] + -l[2] * 1,
            ),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(-s[4] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(a[4] + -a[3] * 1 + a[1] + -s[2] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(s[4] + -s[3] * 2 + s[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-s[4] * 1 / 2 + a[4] + -a[3] * 1 + s[1] * 1 / 2 <= RealNumRep::new(0, 1))
        || (-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -a[0] * 1 / 2 + l[0] * 1 / 2 + a[1] + -s[3] * 1 / 2 + -l[1] * 1,
            ),
            Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (!(RealNumRep::new(0, 1)
                <= s[4] * 1 / 2 + -a[1] * 1 / 2 + -s[2] * 1 + s[0] + l[1] * 1 / 2))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[2] * 1 + -l[1] * 2 + a[4] + a[1] * 2 + -s[2] * 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[2] * 1 + a[4] + a[0] + -s[2] * 2 + -l[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[2] * 4 + s[0] * 3),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[4] + -a[3] * 1 + -s[2] * 1 + s[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                a[4] + -a[3] * 1 + -a[2] * 2 + a[1] * 3 + -s[1] * 1 + -l[1] * 3 + l[2] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + -a[2] * 2 + a[1] * 3 + -s[0] * 1 + -l[1] * 3 + l[2] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 + a[4] + -a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[2] * 2 + a[1] * 3 + -s[0] * 1 + -l[1] * 3 + l[2] * 2),
            Interval::interval_lower(
                l[2] * 4 + a[4] + -a[2] * 5 + a[1] * 5 + -s[0] * 1 + -l[1] * 5,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(a[4] + -a[2] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[2] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 2 + -a[1] * 1 + -s[3] * 1 + l[1] + -l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                l[2] * 3 + a[4] + -a[2] * 4 + a[1] * 4 + -s[0] * 1 + -l[1] * 4,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                l[2] * 2 + a[4] + -a[2] * 3 + a[1] * 3 + -s[1] * 1 + -l[1] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 4 + -s[4] * 3 + a[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                -s[4] * 3 / 4 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 / 4 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 4 + -s[4] * 3 + a[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(
                -s[4] * 3 / 4 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 / 4 + -l[1] * 1,
            ),
            Interval::interval_lower(-s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(
            -s[4] * 1 / 2 + a[4] + -a[3] * 1 + a[1] + -s[2] * 1 / 2 + -l[1] * 1,
        ),
        Interval::interval_lower(
            -s[4] * 1 + a[2] + -l[2] * 1 + a[4] + -a[3] * 1 + a[1] + -s[2] * 1 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[2] == l[1]) || (l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
            Interval::interval_lower(
                a[4] + -a[3] * 1 + -a[2] * 1 + a[1] * 2 + -s[2] * 1 + -l[1] * 2 + l[2],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -l[2] * 1 / 3 + a[4] * 1 / 3 + a[1] * 2 / 3 + -s[2] * 1 + -l[1] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[2] + a[0] * 2 + -s[1] * 3 + -l[2] * 1 + -l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(a[4] + -a[3] * 1 + a[2] + -s[1] * 2 + s[0] + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= -l[2] * 1 + l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(-l[1] * 2 + a[1] * 2 + a[4] + -s[3] * 3 + -l[2] * 1),
            Interval::interval_lower(
                -l[1] * 1 + a[1] + a[4] + -a[3] * 1 + a[2] + -s[3] * 2 + -l[2] * 1,
            ),
            Interval::interval_lower(
                a[4] + -a[3] * 1 + a[2] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[2] * 1,
            ),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 2 + s[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(-l[1] * 2 + a[1] * 2 + s[4] + a[4] + -a[3] * 1 + -s[3] * 3),
            Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 2 + s[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + a[1] + -s[1] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(
            -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -a[0] * 1 / 3 + -l[1] * 1 + l[0] * 1 / 3,
        ),
        Interval::interval_lower(
            -s[4] * 2
                + a[2] * 2
                + -l[2] * 2
                + a[4]
                + -a[3] * 1
                + a[1]
                + -a[0] * 1
                + -l[1] * 1
                + l[0],
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1])
    );
    assert!(
        (-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (!(-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-5, 1)))
    );
    assert!(
        (-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (!(-a[1] * 1 + s[3] * 1 / 2 + s[0] * 1 / 2 + l[1] <= RealNumRep::new(0, 1)))
            || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-a[1] * 1 + s[3] * 1 / 2 + s[0] * 1 / 2 + l[1] <= RealNumRep::new(0, 1))
            || (-l[1] * 1 + a[1] + -s[3] * 1 <= RealNumRep::new(-5, 1))
    );
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[4] + a[1] + -s[3] * 2 + -l[1] * 1),
            Interval::interval_lower(-l[1] * 2 + a[1] * 2 + s[4] + a[4] + -a[3] * 1 + -s[3] * 3),
            Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[3] * 2 + s[0]),
            Interval::interval_lower(s[4] + -s[3] * 3 / 2 + s[0] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + a[1] + s[4] + -a[2] * 1 + -s[3] * 1 + l[2]))
            || (!(RealNumRep::new(0, 1) <= s[4] * 2 + -a[2] * 2 + -s[3] * 1 + s[0] + l[2] * 2))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
    );
    if !((!(l[2] == l[1])) || (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[2] * 4 + s[0] * 3),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[2] + -s[2] * 3 + s[0] * 2 + -l[2] * 1),
            Interval::interval_lower(a[2] + -s[2] * 2 + s[0] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                -l[2] * 1 + a[2] + -a[1] * 1 / 2 + l[1] * 1 / 2 + -s[3] * 1 / 2,
            ),
            Interval::interval_upper(a[2] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[1] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                a[4] + -a[3] * 1 + -a[2] * 2 + a[1] * 3 + -a[0] * 1 + -l[1] * 3 + l[2] * 2 + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                l[2] * 3 + a[4] + -a[2] * 4 + a[1] * 4 + -a[0] * 1 + -l[1] * 4 + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                l[2] * 3 + a[4] + -a[2] * 4 + a[1] * 4 + -s[1] * 1 + -l[1] * 4,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(
            -s[4] * 2
                + a[2] * 2
                + -l[2] * 2
                + a[4]
                + -a[3] * 1
                + a[1]
                + -a[0] * 1
                + -l[1] * 1
                + l[0],
        ),
        Interval::interval_lower(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[2] == l[1]) || (!(l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
            Interval::interval_lower(
                l[2] * 2 + a[4] + -a[2] * 3 + a[1] * 3 + -s[2] * 1 + -l[1] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -a[0] * 1 / 2 + l[0] * 1 / 2 + a[1] + -s[3] * 1 / 2 + -l[1] * 1,
            ),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= -l[2] * 1 + l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[2] * 2 + s[0] + -l[1] * 1),
        Interval::interval_lower(-l[2] * 1 + a[4] + -s[2] * 4 + s[0] * 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(
            -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -a[0] * 1 / 3 + -l[1] * 1 + l[0] * 1 / 3,
        ),
        Interval::interval_lower(-s[4] * 1 / 3 + -a[0] * 2 / 3 + l[0] * 2 / 3 + a[1] + -l[1] * 1),
        Interval::interval_upper(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(
            -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -s[1] * 1 / 3 + -l[1] * 1,
        ),
        Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -s[1] * 2 / 3 + -l[1] * 1),
        Interval::interval_upper(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (l[2] + -a[2] * 1 + s[3] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(
            -s[4] * 3 + a[2] * 3 + -l[2] * 3 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 + -l[1] * 1,
        ),
        Interval::interval_lower(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2 + -l[1] * 1),
        Interval::interval_lower(a[2] * 2 + -l[2] * 2 + -s[4] * 2 + a[1] + -s[0] * 1 + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 3 + a[2] * 3 + -l[2] * 3 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 + -l[1] * 1,
        ),
        Interval::interval_lower(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(s[4] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 / 3 + -a[0] * 2 / 3 + l[0] * 2 / 3 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            a[2] + -l[2] * 1 + -s[4] * 1 + -a[0] * 1 + l[0] + a[1] + -l[1] * 1,
        ),
        Interval::interval_lower(
            -s[4] * 2
                + a[2] * 2
                + -l[2] * 2
                + a[4]
                + -a[3] * 1
                + a[1]
                + -a[0] * 1
                + -l[1] * 1
                + l[0],
        ),
        Interval::interval_lower(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[2] == l[1])
        || (!(l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1)))
        || (l[2] * 2 + a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[2] * 1 + a[1] * 2 + -a[0] * 1 + -l[1] * 2 + l[2] + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1)))
        || (!(l[2] * 2 + a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 <= RealNumRep::new(0, 1))))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[2] * 3 + a[4] + -a[2] * 4 + a[1] * 4 + -a[0] * 1 + -l[1] * 4 + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(
                -a[0] * 1 / 2 + l[0] * 1 / 2 + a[1] + -s[3] * 1 / 2 + -l[1] * 1,
            ),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(a[1] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(
            -s[4] * 2 + a[2] * 2 + -l[2] * 2 + a[4] + -a[3] * 1 + a[1] + -s[1] * 1 + -l[1] * 1,
        ),
        Interval::interval_lower(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(
            -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -a[0] * 1 / 3 + -l[1] * 1 + l[0] * 1 / 3,
        ),
        Interval::interval_upper(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[2] * 4 + -s[4] * 3 + a[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(
                -s[4] * 3 / 4 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 / 4 + -l[1] * 1,
            ),
            Interval::interval_lower(-s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[4] * 1 + a[4] + -a[3] * 1 + s[2] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -s[1] * 2 / 3 + -l[1] * 1),
            Interval::interval_lower(a[2] + -l[2] * 1 + -s[4] * 1 + a[1] + -s[1] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1)))
        || (!(l[2] * 2 + a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 <= RealNumRep::new(0, 1))))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[2] * 3 + a[4] + -a[2] * 4 + a[1] * 4 + -s[1] * 1 + -l[1] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1)))
        || (l[2] * 2 + a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[2] * 1 + a[1] * 2 + -s[1] * 1 + -l[1] * 2 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(
            -s[4] * 2 + a[2] * 2 + -l[2] * 2 + a[4] + -a[3] * 1 + a[1] + -s[1] * 1 + -l[1] * 1,
        ),
        Interval::interval_lower(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(
            -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -a[0] * 1 / 3 + -l[1] * 1 + l[0] * 1 / 3,
        ),
        Interval::interval_upper(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_upper(l[1] + -a[1] * 1 + -a[4] * 1 + a[3] + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(
            -s[4] * 3 + a[2] * 3 + -l[2] * 3 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[2] * 4 + s[0] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[2] * 4 + s[0] * 3),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[2] + -s[2] * 3 + s[0] * 2 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1)
            <= -l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 + a[4] + -a[3] * 1))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + -a[2] * 2 + a[1] * 3 + -s[1] * 1 + -l[1] * 3 + l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -s[1] * 3 / 2 + s[0] * 1 / 2 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[0] + -l[0] * 1 + a[2] + -s[1] * 2 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
        Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[2] + -s[3] * 2 + s[1] + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -l[2] * 1 + a[1] + -s[3] * 1 + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 2 + s[0]),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 4 + -s[4] * 3 + a[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
            Interval::interval_lower(
                -s[4] * 3 / 4 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 / 4 + -l[1] * 1,
            ),
            Interval::interval_lower(-s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -a[3] * 1 + -a[2] * 2 + a[1] * 3 + -a[0] * 1 + -l[1] * 3 + l[2] * 2 + l[0],
            ),
            Interval::interval_lower(-a[2] * 1 + a[1] * 2 + -a[0] * 1 + -l[1] * 2 + l[2] + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-l[1] * 1 + a[1] + -a[2] * 2 + s[3] + l[2] * 2 <= RealNumRep::new(-10, 1))
            || (-a[2] * 1 + s[3] * 2 / 3 + s[0] * 1 / 3 + l[2] <= RealNumRep::new(-5, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[4] + a[1] + -s[2] * 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 2 + s[0]),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + -s[4] * 1 + a[2] <= RealNumRep::new(-5, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
            Interval::interval_lower(RealNumRep::new(10, 1) + -s[4] * 1 + a[1] + -l[1] * 1),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + -s[4] * 1 + a[4] + -a[3] * 1 + a[1] + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
            Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -a[3] * 1 + -a[2] * 2 + a[1] * 3 + -s[1] * 1 + -l[1] * 3 + l[2] * 2,
            ),
            Interval::interval_lower(-a[2] * 1 + a[1] * 2 + -s[1] * 1 + -l[1] * 2 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(-s[4] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
            Interval::interval_lower(-s[4] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (l[2] + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))
        || (!(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(0, 1))))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + -a[2] * 3 + a[1] * 4 + -s[0] * 1 + -l[1] * 4 + l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((-s[4] * 1 / 2 + a[4] + -a[3] * 1 + s[1] * 1 / 2 <= RealNumRep::new(0, 1))
        || (-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
            Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
            Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                -l[2] * 1 + -s[4] * 1 / 3 + a[2] + -a[1] * 2 / 3 + l[1] * 2 / 3,
            ),
            Interval::interval_upper(-s[4] * 1 / 2 + a[2] + -s[0] * 1 / 2 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-l[1] * 1 + a[1] + -a[2] * 1 + l[2] <= RealNumRep::new(-10, 1))
            || (l[2] + -a[2] * 1 + s[0] <= RealNumRep::new(-15, 1))
    );
    if !(-s[4] * 1 + a[4] + -a[3] * 1 + s[2] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(
                -s[4] * 2 / 3 + -a[0] * 1 / 3 + l[0] * 1 / 3 + a[2] + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(-l[1] * 2 + a[1] * 2 + a[4] + -s[3] * 3 + -l[2] * 1),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 2 + s[0]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + -l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -s[3] * 1,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[4] + -a[3] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + -l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2],
            ),
            Interval::interval_lower(
                RealNumRep::new(15, 2)
                    + a[4]
                    + -a[3] * 1
                    + -a[2] * 1 / 2
                    + s[0] * 1 / 2
                    + l[2] * 1 / 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] * 2 + -l[1] * 2 + a[4] + a[1] * 2 + -a[2] * 3,
            ),
            Interval::interval_lower(RealNumRep::new(10, 1) + l[2] + a[4] + -a[2] * 2 + s[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[2] + -s[1] * 1 / 3 + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (!(-s[4] * 1 + a[2] + -l[2] * 1 + s[2] + -s[0] * 1 <= RealNumRep::new(0, 1)))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + -a[3] * 1 + -a[1] * 1 + s[0] + l[1],
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + -a[2] * 1 + -a[1] * 2 + s[0] * 2 + l[1] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(
            -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -s[1] * 1 / 3 + -l[1] * 1,
        ),
        Interval::interval_upper(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !((-s[4] * 1 / 2 + a[4] + -a[3] * 1 + s[1] * 1 / 2 <= RealNumRep::new(0, 1))
        || (-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
            Interval::interval_lower(s[4] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(s[4] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(l[2] == l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 2 + a[1] * 2 + a[4] + -s[3] * 3 + -l[2] * 1),
            Interval::interval_lower(
                -l[1] * 1 + a[1] + a[4] + -a[3] * 1 + a[2] + -s[3] * 2 + -l[2] * 1,
            ),
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(
                a[4] + -a[3] * 1 + a[2] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[2] * 1,
            ),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 2 + s[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(
            -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -s[1] * 1 / 3 + -l[1] * 1,
        ),
        Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -s[1] * 2 / 3 + -l[1] * 1),
        Interval::interval_upper(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(-s[4] * 1 + a[4] + -a[3] * 1 + s[2] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(-s[4] * 2 / 3 + a[2] + -s[1] * 1 / 3 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + -a[3] * 1 + -a[1] * 1 + s[0] + l[1],
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + -a[2] * 1 + -a[1] * 2 + s[0] * 2 + l[1] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(
            -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -a[0] * 1 / 3 + -l[1] * 1 + l[0] * 1 / 3,
        ),
        Interval::interval_lower(-s[4] * 1 / 3 + -a[0] * 2 / 3 + l[0] * 2 / 3 + a[1] + -l[1] * 1),
        Interval::interval_upper(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 3 / 4 + a[2] + -s[0] * 1 / 4 + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(-s[4] * 3 / 4 + a[2] + -s[0] * 1 / 4 + -l[2] * 1),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(
            -s[4] * 1 / 2 + a[4] + -a[3] * 1 + a[1] + -s[2] * 1 / 2 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[2] * 2 + -l[2] * 2 + a[4] + -a[3] * 1 + a[1] + -s[3] * 2 + -s[0] * 1 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 2 + s[0]),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(s[4] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 2 + a[1] * 3 / 2 + -s[0] * 1 + -l[1] * 3 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(s[4] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -a[0] * 1 / 2 + l[0] * 1 / 2 + a[1] + -s[3] * 1 / 2 + -l[1] * 1,
            ),
            Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(
            -s[4] * 2
                + a[2] * 2
                + -l[2] * 2
                + a[4]
                + -a[3] * 1
                + a[1]
                + -a[0] * 1
                + -l[1] * 1
                + l[0],
        ),
        Interval::interval_lower(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 1 + a[2] + -l[2] * 1 + a[4] + -a[3] * 1 + a[1] + -s[2] * 1 + -l[1] * 1,
        ),
        Interval::interval_lower(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(RealNumRep::new(5, 1) + -s[4] * 1 + a[2] + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 2 + s[0]),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(
                -a[0] * 1 / 2 + l[0] * 1 / 2 + a[1] + -s[3] * 1 / 2 + -l[1] * 1,
            ),
            Interval::interval_lower(
                -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -a[0] * 1 / 3 + -l[1] * 1 + l[0] * 1 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(l[1] == l[0])) || (-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2] + -l[0] * 2),
            Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(s[4] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 2 / 3 + -a[0] * 1 / 3 + l[0] * 1 / 3 + a[2] + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (!(RealNumRep::new(-5, 1) <= -l[1] * 1 + a[1] + s[4] + -a[2] * 2 + l[2] * 2))
            || (!(RealNumRep::new(-5, 1) <= s[4] * 2 + -a[2] * 3 + s[0] + l[2] * 3))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[2] + -s[2] * 4 / 3 + s[0] * 1 / 3 + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -s[4] * 1 / 2 + a[4] + -a[3] * 1 + a[2] + -s[2] * 1 / 2 + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -s[4] * 3 + a[4] + -a[3] * 1 + a[2] * 4 + -s[0] * 1 + -l[2] * 4,
            ),
            Interval::interval_upper(
                l[1] + -a[1] * 1 + -s[4] * 2 + a[4] + -a[3] * 1 + a[2] * 3 + -l[2] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] * 2 + a[4] + -a[2] * 3 + s[1] * 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + -a[3] * 1 + -a[2] * 1 + s[1] + l[2],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + a[2] + -s[2] * 1 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -s[1] * 2 / 3 + -l[1] * 1),
        Interval::interval_lower(a[2] + -l[2] * 1 + -s[4] * 1 + a[1] + -s[1] * 1 + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 2 + a[2] * 2 + -l[2] * 2 + a[4] + -a[3] * 1 + a[1] + -s[1] * 1 + -l[1] * 1,
        ),
        Interval::interval_lower(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 3 / 2 + a[4] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 3 / 2 + a[4] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 2 / 3 + a[2] + -s[1] * 1 / 3 + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 2 + a[1] * 2 + a[4] + -s[3] * 3 + -l[2] * 1),
        Interval::interval_lower(
            -l[1] * 1 + a[1] + a[4] + -a[3] * 1 + a[2] + -s[3] * 2 + -l[2] * 1,
        ),
        Interval::interval_lower(
            a[4] + -a[3] * 1 + a[2] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[2] * 1,
        ),
        Interval::interval_lower(-l[2] * 1 + a[4] + -s[3] * 2 + s[0]),
        Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 / 3 + -a[0] * 2 / 3 + l[0] * 2 / 3 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            a[2] + -l[2] * 1 + -s[4] * 1 + -a[0] * 1 + l[0] + a[1] + -l[1] * 1,
        ),
        Interval::interval_lower(
            -s[4] * 2
                + a[2] * 2
                + -l[2] * 2
                + a[4]
                + -a[3] * 1
                + a[1]
                + -a[0] * 1
                + -l[1] * 1
                + l[0],
        ),
        Interval::interval_lower(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[1] + -s[1] * 3 / 2 + s[0] * 1 / 2 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(
            -s[4] * 1 + a[2] + -l[2] * 1 + a[4] + -a[3] * 1 + a[1] + -s[2] * 1 + -l[1] * 1,
        ),
        Interval::interval_lower(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -s[1] * 2 / 3 + -l[1] * 1),
        Interval::interval_lower(a[2] + -l[2] * 1 + -s[4] * 1 + a[1] + -s[1] * 1 + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 2 + a[2] * 2 + -l[2] * 2 + a[4] + -a[3] * 1 + a[1] + -s[1] * 1 + -l[1] * 1,
        ),
        Interval::interval_lower(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                -s[4] * 2 + a[4] + -a[3] * 1 + a[2] * 3 + -s[1] * 1 + -l[2] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= -l[2] * 1 + l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 3 / 2 + a[4] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 3 / 4 + a[2] + -s[0] * 1 / 4 + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[4] + -s[2] * 3 + s[0] * 2),
            Interval::interval_lower(s[4] + a[4] + -a[3] * 1 + -s[2] * 4 + s[0] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 3 + a[2] + -s[1] * 2 / 3 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -l[2] * 1 + l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 + a[2] * 2 + -s[1] * 1 + -l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-s[4] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2),
            Interval::interval_upper(-s[4] * 2 + a[2] * 3 + -s[0] * 1 + -l[2] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + -l[2] * 1 + a[2] + -a[1] * 1 + l[1]),
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[2] + -s[0] * 1 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + -s[4] * 1 + a[2] <= RealNumRep::new(-5, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(RealNumRep::new(10, 1) + -s[4] * 1 + a[1] + -l[1] * 1),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + -s[4] * 1 + a[4] + -a[3] * 1 + a[1] + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
            Interval::interval_lower(RealNumRep::new(5, 1) + -s[4] * 1 + a[2] + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[2] + -s[2] * 3 / 2 + s[1] * 1 / 2 + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= s[4] + -a[2] * 1 + -s[3] * 1 + s[1] + l[2]))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(
                -s[4] * 2 / 3 + -a[0] * 1 / 3 + l[0] * 1 / 3 + a[2] + -l[2] * 1,
            ),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 3 / 2 + a[4] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 1 / 2 + a[2] + -a[1] * 1 / 2 + l[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
            Interval::interval_lower(
                -l[2] * 1 + -s[4] * 1 / 2 + a[2] + -a[1] * 1 / 2 + l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(a[1] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (!(RealNumRep::new(-5, 1) <= s[4] + -a[2] * 2 + s[1] + l[2] * 2)));
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(s[4] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 3 / 2 + a[4] + s[1] * 1 / 2),
        Interval::interval_lower(-s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2 + -l[1] * 1),
        Interval::interval_lower(a[2] * 2 + -l[2] * 2 + -s[4] * 2 + a[1] + -s[0] * 1 + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 3 + a[2] * 3 + -l[2] * 3 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 + -l[1] * 1,
        ),
        Interval::interval_lower(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(
            -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -a[0] * 1 / 3 + -l[1] * 1 + l[0] * 1 / 3,
        ),
        Interval::interval_lower(-s[4] * 1 / 3 + -a[0] * 2 / 3 + l[0] * 2 / 3 + a[1] + -l[1] * 1),
        Interval::interval_upper(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(!(RealNumRep::new(0, 1) <= -l[1] * 1 + a[1] + -a[3] * 1 + a[2] + -a[0] * 1 + l[0])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
            Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(
                -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[1] + -a[0] * 1 / 3 + -l[1] * 1 + l[0] * 1 / 3,
            ),
            Interval::interval_lower(
                -s[4] * 1 / 3 + -a[0] * 2 / 3 + l[0] * 2 / 3 + a[1] + -l[1] * 1,
            ),
            Interval::interval_lower(
                a[2] + -l[2] * 1 + -s[4] * 1 + -a[0] * 1 + l[0] + a[1] + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 1 / 2 + a[4] + -a[3] * 1 + a[1] + -s[2] * 1 / 2 + -l[1] * 1,
        ),
        Interval::interval_upper(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(
                -a[0] * 1 / 2 + l[0] * 1 / 2 + a[1] + -s[3] * 1 / 2 + -l[1] * 1,
            ),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + a[2] + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
            Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[4] * 2 + a[2] + -l[2] * 2 + a[4]),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 / 3 + -a[0] * 2 / 3 + l[0] * 2 / 3 + a[1] + -l[1] * 1),
        Interval::interval_lower(
            a[2] + -l[2] * 1 + -s[4] * 1 + -a[0] * 1 + l[0] + a[1] + -l[1] * 1,
        ),
        Interval::interval_lower(
            -s[4] * 2
                + a[2] * 2
                + -l[2] * 2
                + a[4]
                + -a[3] * 1
                + a[1]
                + -a[0] * 1
                + -l[1] * 1
                + l[0],
        ),
        Interval::interval_lower(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[4] + -s[2] * 4 + s[0] * 3),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[2] + -s[2] * 3 + s[0] * 2 + -l[2] * 1),
            Interval::interval_lower(a[2] + -s[2] * 2 + s[0] + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                l[1] * 1 / 3 + -a[1] * 1 / 3 + -s[4] * 2 / 3 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1,
            ),
            Interval::interval_upper(
                -s[4] * 3 / 4 + a[4] + -a[3] * 1 + a[2] + -s[0] * 1 / 4 + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1]))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-10, 1) + l[1] + -a[1] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-10, 1) + a[4] + -a[3] * 1 + a[2] + -s[1] * 1 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-10, 1) + l[1] + -a[1] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1,
            ),
            Interval::interval_upper(
                RealNumRep::new(-15, 1) + a[4] + -a[3] * 1 + a[2] + -s[0] * 1 + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(-s[4] * 1 / 2 + a[2] + -s[2] * 1 / 2 + -l[2] * 1),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(-s[4] * 2 / 3 + a[2] + -s[1] * 1 / 3 + -l[2] * 1),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 3 / 4 + a[2] + -s[0] * 1 / 4 + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(!(l[2] == l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(-l[1] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 / 2 + a[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(l[2] == l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(-s[4] * 2 / 3 + a[2] + -s[1] * 1 / 3 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[4] * 1 + a[4] + -a[3] * 1 + s[2] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
            Interval::interval_lower(
                -l[2] * 1 + -s[4] * 1 / 2 + a[2] + -a[1] * 1 / 2 + l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[2] * 1 + -s[4] * 1 / 2 + a[2] + -a[1] * 1 / 2 + l[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 2 + a[4] + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 2 / 3 + a[2] + -s[1] * 1 / 3 + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + -s[4] * 4 / 3 + a[4] + s[0] * 1 / 3),
        Interval::interval_lower(-s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2 + -l[1] * 1),
        Interval::interval_lower(a[2] * 2 + -l[2] * 2 + -s[4] * 2 + a[1] + -s[0] * 1 + -l[1] * 1),
        Interval::interval_lower(
            -s[4] * 3 + a[2] * 3 + -l[2] * 3 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 + -l[1] * 1,
        ),
        Interval::interval_lower(-l[1] * 1 + a[1] + a[4] + -a[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(!(l[2] + -a[3] * 1 + s[4] >= RealNumRep::new(0, 1)));
    assert!(-s[4] * 1 + s[2] <= RealNumRep::new(-5, 1));
    assert!(l[2] + -a[2] * 1 + s[2] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(-l[2] * 1 + -s[4] * 1 + a[4])]);
    ret = ret.intersection(&tmp);
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(l[1] + -a[1] * 1 + s[1] <= RealNumRep::new(0, 1));
    assert!(-s[4] * 2 + s[2] * 3 + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-s[4] * 2 + -a[0] * 1 + s[2] * 3 + l[0] <= RealNumRep::new(0, 1));
    assert!(-s[4] * 3 + s[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_s_4_t_5_l_3(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 3);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3])]);
    ret = ret.intersection(&tmp);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])) || (l[1] == l[0]));
    assert!((l[2] == l[1]) || (l[2] + -a[2] * 1 + s[2] <= RealNumRep::new(-5, 1)));
    assert!((l[2] == l[1]) || (l[2] + -a[2] * 1 + a[1] + -l[1] * 1 <= RealNumRep::new(-5, 1)));
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 2 + s[0] + l[1] * 2 + -l[2] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-s[3] * 1 + a[2] * 2 + -a[1] * 2 + s[0] + l[1] * 2 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= -l[2] * 1 + l[1])));
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[1] == l[0])
            || (-s[3] * 1 + a[2] + -a[1] * 1 + s[1] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(0, 1));
    assert!(
        (-l[2] * 1 + -s[3] * 1 + a[2] <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + a[3]),
        Interval::interval_lower(RealNumRep::new(5, 1) + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (-l[2] * 1 + -s[3] * 1 + a[2] <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + -a[0] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3]),
            Interval::interval_lower(a[2] * 3 + -a[1] * 3 + s[0] + l[1] * 3 + -l[2] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (l[2] * 2 + -a[2] * 2 + a[1] * 2 + -a[0] * 1 + s[2] + -l[1] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] * 2 + -a[2] * 2 + a[1] * 2 + s[2] + -s[1] * 1 + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + a[3]),
        Interval::interval_lower(-l[2] * 2 + a[2] * 2 + -s[1] * 1),
        Interval::interval_lower(RealNumRep::new(10, 1) + s[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + a[3]),
        Interval::interval_lower(RealNumRep::new(10, 1) + s[1]),
        Interval::interval_lower(RealNumRep::new(5, 1) + a[2] + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (-l[2] * 1 + -s[3] * 1 + a[2] <= RealNumRep::new(0, 1))
            || (-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[3] + a[2] * 2 + -a[1] * 2 + l[1] * 2 + -l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[2] * 1 + -s[3] * 1 + a[2] <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + a[1] + -l[1] * 1 <= RealNumRep::new(-5, 1))
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-10, 1)));
    if !((-l[2] * 1 + -s[3] * 1 + a[2] <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= s[3] * 1 / 2 + -a[1] * 1 + s[0] * 1 / 2 + l[1]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[2] * 1 + s[3] * 1 / 2 + a[3] + -s[0] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[2] * 2 + a[3] + a[2] + -a[1] * 1 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (l[2] * 3 + -a[2] * 3 + a[1] * 3 + s[2] + -s[0] * 1 + -l[1] * 3
                <= RealNumRep::new(0, 1))
    );
    if !(a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(s[2] * 4 + -s[0] * 3)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + a[1] + -a[0] * 1 + s[1] + -l[1] * 1 + l[2] + l[0]
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + -l[2] * 1 + a[3] + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[2] * 1 + a[3] + s[2] + -s[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (l[2] * 2 + s[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3]),
            Interval::interval_lower(RealNumRep::new(5, 1) + -a[1] * 1 + s[2] * 2 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1] <= RealNumRep::new(-5, 1))
    );
    if !(-l[2] * 1 + -s[3] * 1 + a[2] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[2] * 1 + s[3] + a[3] + -s[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (l[2] + s[3] + -a[2] * 1 + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-a[2] * 1 + l[2] + s[3] + -a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + a[3]),
        Interval::interval_lower(s[2] * 3 / 2 + -s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + a[3]),
        Interval::interval_lower(-a[0] * 1 / 2 + s[2] * 3 / 2 + l[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3]),
            Interval::interval_lower(a[2] * 2 + -a[1] * 2 + s[1] + l[1] * 2 + -l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + a[3]),
        Interval::interval_lower(-a[0] * 2 + s[1] * 3 + l[0] * 2),
        Interval::interval_lower(a[2] + -l[2] * 1 + -a[0] * 1 + s[1] + l[0]),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[2] * 1 + -s[3] * 1 + a[2] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(s[3] * 3 + -s[1] * 2)]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + -s[3] * 1 + a[2] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(s[3] * 2 + -s[0] * 1),
            Interval::interval_upper(s[3] * 3 + -a[1] * 2 + l[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (l[2] * 2 + s[3] + -a[2] * 2 + a[1] * 2 + -s[2] * 1 + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[2] * 1 + a[2] + s[2] * 2 + -s[0] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 3 + -a[1] * 3 + s[2] + l[1] * 3 + -l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[1] + -s[0] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 5 + -a[1] * 5 + s[0] + l[1] * 5 + -l[2] * 5,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 4 + -a[1] * 4 + a[0] + l[1] * 4 + -l[2] * 4 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + a[3]),
        Interval::interval_lower(s[2] * 4 / 3 + -s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3]),
            Interval::interval_lower(a[2] + -a[1] * 1 + s[2] + l[1] + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + a[3]),
        Interval::interval_lower(RealNumRep::new(15, 1) + s[0]),
        Interval::interval_lower(RealNumRep::new(10, 1) + -l[1] * 1 + a[1]),
        Interval::interval_lower(RealNumRep::new(5, 1) + a[2] + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (-l[1] * 1 + a[1] + s[3] + -a[2] * 2 + l[2] * 2 <= RealNumRep::new(-10, 1))
            || (s[3] * 2 / 3 + -a[2] * 1 + s[0] * 1 / 3 + l[2] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] * 3 + s[3] + -a[2] * 3 + a[1] * 3 + -a[0] * 1 + -l[1] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] * 3 + s[3] + -a[2] * 3 + a[1] * 3 + -s[1] * 1 + -l[1] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] * 4 + s[3] + -a[2] * 4 + a[1] * 4 + -s[0] * 1 + -l[1] * 4
                <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 4 + -a[1] * 4 + s[1] + l[1] * 4 + -l[2] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (l[2] + -a[2] * 1 + -a[0] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + a[3]),
        Interval::interval_lower(l[1] + -a[1] * 1 + s[2] * 2),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (s[3] * 1 / 3 + -a[1] * 1 + s[0] * 2 / 3 + l[1] <= RealNumRep::new(-5, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -a[3] * 1 + a[1] + s[2] * 2 + -s[0] * 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-l[1] * 1 + a[1] + -a[2] * 1 + l[2] <= RealNumRep::new(-10, 1))
            || (-a[2] * 1 + s[0] + l[2] <= RealNumRep::new(-15, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -l[2] * 1 + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + a[3]),
        Interval::interval_lower(s[1] * 2 + -s[0] * 1),
        Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 1 / 2 + -s[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-20, 1) + a[1] * 4 + -s[0] * 3 + -l[1] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (l[2] + -a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-10, 1) + a[4] + -a[3] * 1 + a[1] * 3 + -s[0] * 2 + -l[1] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (-l[2] * 1 + -s[3] * 1 + a[2] <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[3] * 2 + a[4] + -a[3] * 1 + a[1] + -s[1] * 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-10, 1) + a[2] + -l[2] * 1 + a[1] * 2 + -s[0] * 2 + -l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[3] + a[4] + -a[3] * 1 + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (l[2] + -a[2] * 1 + s[1] <= RealNumRep::new(-10, 1)));
    if !((l[2] == l[1]) || (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -a[3] * 1 + a[2] + s[2] + -s[0] * 1 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + a[2] * 2 + -s[1] * 1 + -l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[2] * 1 + -s[3] * 1 + a[2] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 1 + a[3] + a[1] + -s[0] * 1 + -l[1] * 1),
            Interval::interval_upper(-l[2] * 1 + s[3] + a[3] + -a[1] * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[1] + -s[0] * 1 + -l[1] * 1),
            Interval::interval_upper(
                RealNumRep::new(-5, 2) + -l[2] * 3 / 2 + a[3] + a[2] * 1 / 2 + -s[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-15, 1) + l[1] * 2 + -a[1] * 2 + a[2] * 3 + -l[2] * 3,
            ),
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[2] * 2 + -s[0] * 1 + -l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-5, 1) + l[1] + -a[1] * 1 + a[4] + -a[3] * 1 + a[2] * 2 + -l[2] * 2,
            ),
            Interval::interval_upper(
                RealNumRep::new(-5, 2)
                    + a[4]
                    + -a[3] * 1
                    + a[2] * 3 / 2
                    + -s[0] * 1 / 2
                    + -l[2] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[3] + a[4] + -a[3] * 1 + a[2] + -s[1] * 1 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (s[3] * 1 / 2 + -a[2] * 1 + s[1] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(l[1] + -a[1] * 1 + s[3] + a[4] + -a[3] * 1 + a[2] + -l[2] * 1),
            Interval::interval_upper(
                s[3] * 1 / 2 + a[4] + -a[3] * 1 + a[2] + -s[0] * 1 / 2 + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + -l[2] * 2 + a[3] + a[2] + -s[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-15, 1) + -l[2] * 3 + a[2] * 3 + -s[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-5, 1) + -l[2] * 2 + a[3] + a[2] + -a[1] * 1 + l[1],
            ),
            Interval::interval_upper(-l[2] * 1 + a[3] + a[1] + -s[0] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(!(l[2] + s[3] + -a[3] * 1 >= RealNumRep::new(0, 1)));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(-l[2] * 1 + a[4])]);
    ret = ret.intersection(&tmp);
    assert!(l[2] + -a[2] * 1 + s[2] <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_sim_s_4_t_5_l_3(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
    C: RealNumRep,
    B: RealNumRep,
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 3);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3])]);
    ret = ret.intersection(&tmp);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])) || (l[1] == l[0]));
    assert!(a[1] + -s[2] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[1] + -a[0] * 1 + -C * 1 + -l[1] * 1 + -B * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(a[1] + -C * 2 + -s[0] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[1] + -C * 1 + -s[1] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] + B <= RealNumRep::new(0, 1)));
    assert!((l[1] == l[0]) || (-a[1] * 1 + C + s[0] + l[1] + B <= RealNumRep::new(0, 1)));
    assert!(
        (l[1] == l[0])
            || (l[2] == l[1])
            || (l[2] + -a[2] * 1 + a[1] + C + -l[1] * 1 == RealNumRep::new(0, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= l[2] + -a[2] * 1 + a[1] + C + -l[1] * 1 + -B * 1)
            || (-s[3] * 1 + a[1] + C + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (!(RealNumRep::new(0, 1) <= l[2] + -a[2] * 1 + a[1] + C + -l[1] * 1 + -B * 1))
            || (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
    );
    if !(!(RealNumRep::new(0, 1) <= l[2] + -a[2] * 1 + a[1] + C + -l[1] * 1 + -B * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3]),
            Interval::interval_lower(a[2] + -l[2] * 1 + C),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[1] == l[0]) || (-a[1] * 1 + -C * 1 + s[2] + l[1] + B <= RealNumRep::new(0, 1)));
    if !(RealNumRep::new(0, 1) <= l[2] + -a[2] * 1 + a[1] + C + -l[1] * 1 + -B * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3]),
            Interval::interval_lower(-B * 1 + C * 2 + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -B * 1 + C * 3 + a[1] + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[1] == l[0]) || (B + s[3] + -C * 2 + -a[1] * 1 + l[1] <= RealNumRep::new(0, 1)));
    assert!((!(l[2] == l[1])) || (l[1] == l[0]) || (RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C));
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + C + s[1] <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            C * 2 + a[4] + -a[3] * 1 + a[1] + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_upper(-l[2] * 1 + a[4])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + a[3]),
        Interval::interval_lower(a[2] + -l[2] * 1 + C),
        Interval::interval_lower(C * 2 + s[1]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(-B * 1 + -s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1));
    assert!((l[2] == l[1]) || (B + C + -a[2] * 1 + s[1] + l[2] <= RealNumRep::new(0, 1)));
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + a[3]),
        Interval::interval_lower(-B * 1 + C + a[2] + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (a[2] + -a[1] * 1 + -C * 1 + -B * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    );
    assert!((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)));
    assert!(
        (-l[1] * 1 + a[1] + B + C + -a[2] * 1 + l[2] == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= -B * 1 + -C * 1 + a[2] + -a[1] * 1 + l[1] + -l[2] * 1))
    );
    assert!((l[2] == l[1]) || (B + -a[2] * 1 + s[2] + l[2] <= RealNumRep::new(0, 1)));
    assert!(
        (l[2] == l[1])
            || (l[2] + -a[2] * 1 + a[1] + C + -l[1] * 1 == RealNumRep::new(0, 1))
            || (!(-l[2] * 1 + a[2] + -a[1] * 1 + -C * 1 + l[1] <= RealNumRep::new(0, 1)))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -B * 1 + C * 2 + a[2] + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (B + s[3] + -C * 1 + -a[2] * 1 + l[2] <= RealNumRep::new(0, 1)));
    assert!(-B * 1 + -C * 3 + a[2] + -s[0] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1));
    assert!(-B * 1 + -C * 1 + a[2] + -s[2] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1));
    assert!(-B * 1 + -C * 2 + a[2] + -a[0] * 1 + -l[2] * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(-B * 1 + -C * 2 + a[2] + -s[1] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1));
    assert!(
        (l[2] == l[1])
            || (B + C * 2 + -a[2] * 1 + s[0] + l[2] <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= C + -a[1] * 1 + s[0] + l[1])
    );
    assert!(
        (l[2] == l[1])
            || (RealNumRep::new(0, 1) <= -B * 1 + -C * 1 + a[2] + -a[1] * 1 + l[1] + -l[2] * 1)
            || (!(RealNumRep::new(0, 1) <= C + -a[1] * 1 + s[0] + l[1]))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            C + a[4] + -a[3] * 1 + a[2] + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[2] * 1 + a[2] + -a[1] * 1 + -C * 1 + l[1] <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + a[1] + -l[1] * 1 + C <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + C * 2 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(-a[0] * 1 + -C * 1 + s[1] + l[0] <= RealNumRep::new(0, 1));
    assert!(-C * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (C + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(s[3] + -C * 3 + -a[0] * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(-C * 2 + s[2] + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(s[3] + -C * 3 + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + -C * 2 + s[2] + l[0] <= RealNumRep::new(0, 1));
    assert!(-C * 3 + s[2] + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 5 + s[0])]);
    ret = ret.intersection(&tmp);
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (!(-l[2] * 1 + a[2] + -a[1] * 1 + -C * 1 + l[1] <= RealNumRep::new(0, 1)))
            || (-s[3] * 1 + C * 2 + s[0] <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + a[3]),
        Interval::interval_lower(C + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[2] * 1 + a[3]),
        Interval::interval_lower(a[2] + -l[2] * 1 + C),
        Interval::interval_lower(a[1] + -l[1] * 1 + C * 2),
        Interval::interval_lower(C * 3 + s[0]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + s[3] + C + a[4] + -a[3] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        -l[1] * 1 + a[1] + B + C * 2 + a[4] + -a[3] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 2 + a[4] + -a[3] * 1 + s[2],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        a[2] + -l[2] * 1 + B + C + a[4] + -a[3] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 4 + a[4] + -a[3] * 1 + s[0],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 3 + a[4] + -a[3] * 1 + a[0] + -l[0] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        B + C * 3 + a[4] + -a[3] * 1 + s[1],
    )]);
    ret = ret.intersection(&tmp);
    assert!(B >= RealNumRep::new(5, 1));
    assert!(C >= RealNumRep::new(5, 1));
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(!(l[2] + s[3] + -a[3] * 1 >= RealNumRep::new(0, 1)));
    let tmp = IntervalList::new(vec![Interval::interval_upper(-l[2] * 1 + a[3] + C)]);
    ret = ret.intersection(&tmp);
    assert!(-a[2] * 1 + l[2] + -C * 1 + s[3] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[2] + -l[2] * 1 + C * 2)]);
    ret = ret.intersection(&tmp);
    assert!(-a[2] * 1 + l[2] + s[2] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(s[3] + C * 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 3 + s[2])]);
    ret = ret.intersection(&tmp);
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + l[1] + -C * 1 + s[2] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 4 + s[1])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 4 + a[0] + -l[0] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[1] + -l[1] * 1 + C * 3)]);
    ret = ret.intersection(&tmp);
    assert!(s[3] + -C * 4 + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(s[3] + -a[1] * 1 + l[1] + -C * 2 <= RealNumRep::new(0, 1));
    assert!(s[3] + -C * 2 + -s[2] * 1 <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_c_t_5_l_4(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 4);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])));
    if !((l[1] == l[0]) || (l[2] == l[1])) {
        let tmp = IntervalList::new(vec![Interval::interval_point(
            a[2] + -a[1] * 1 + l[1] + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[2] + -a[1] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(l[3] + -a[3] * 1 + s[3] <= RealNumRep::new(0, 1));
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 2) + -a[1] * 1 / 2 + s[3] * 1 / 2 + l[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (!(l[2] == l[1]))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + -a[2] * 1 + l[1] + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(-l[3] * 1 / 2 + a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2),
            Interval::interval_upper(-l[3] * 1 / 2 + a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(-l[3] * 1 / 2 + a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2),
            Interval::interval_upper(-l[3] * 1 / 2 + a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2),
            Interval::interval_upper(-a[2] * 1 + l[2] + a[3] + -a[1] * 1 + s[2] + l[1] + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(-a[0] * 1 + s[1] + l[0])]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[2] * 1 + l[2] + a[3] + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + s[4] + -a[3] * 1 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(-5, 1)));
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 1 + a[2] + -a[1] * 1 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(-5, 1)));
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(s[3] + -s[1] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(s[4] + -s[2] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)));
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -l[3] * 1 / 2 + a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (a[2] + -l[2] * 1 + -a[3] * 1 + a[1] + -a[0] * 1 + -l[1] * 1 + l[3] + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 1 / 2 + a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + -a[2] * 1 + l[2] + a[3] + -l[3] * 1),
            Interval::interval_upper(-l[3] * 1 / 2 + a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (a[2] + -l[2] * 1 + -a[3] * 1 + a[1] + -s[1] * 1 + -l[1] * 1 + l[3]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 1 / 2 + a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-a[2] * 1 + l[2] + a[3] + -a[1] * 1 + s[0] + l[1] + -l[3] * 1
                <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + -l[2] * 1 + -a[3] * 1 + a[1] + -s[0] * 1 + -l[1] * 1 + l[3],
            ),
            Interval::interval_upper(-l[3] * 1 / 2 + a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[2] * 1 + l[2] + s[4]),
            Interval::interval_upper(-l[3] * 1 / 2 + a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[2] * 1 + l[2] + a[3] + -a[1] * 1 + s[1] + l[1] + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(-a[2] * 1 + l[2] + s[3])]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + -a[1] * 1 + s[2] + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[2] * 1 + l[2] + s[4]),
            Interval::interval_upper(s[4] * 1 / 2 + -s[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3] * 1 / 2 + -s[2] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 3) + s[4] * 1 / 3 + -a[1] * 1 / 3 + l[1] * 1 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 4 + -s[1] * 1 / 4)]);
    ret = ret.intersection(&tmp);
    assert!((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)));
    if !(a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(s[2] + -s[0] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[1] * 1 + s[3] + l[1]),
            Interval::interval_upper(s[3] * 1 / 2 + -s[0] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 1 + a[3] + -a[2] * 1 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[2] + -s[1] * 1 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[2] + -a[1] * 1 + l[1] + -l[2] * 1),
            Interval::interval_upper(
                RealNumRep::new(-5, 2) + a[2] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + -a[2] * 1 + s[3] + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 2) + s[4] * 1 / 2 + -a[2] * 1 / 2 + l[2] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + -s[2] * 1 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[1] * 1 / 2 + s[3] * 1 / 2 + l[1] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3] * 1 / 3 + -s[1] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    assert!((l[3] == l[2]) || (-a[3] * 1 + s[3] + l[3] <= RealNumRep::new(-5, 1)));
    let tmp = IntervalList::new(vec![Interval::interval_lower(-a[1] * 1 + s[2] + l[1])]);
    ret = ret.intersection(&tmp);
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + -a[2] * 1 + l[2] + a[3] + -l[3] * 1),
            Interval::interval_upper(
                RealNumRep::new(-5, 2) + -l[3] * 1 / 2 + a[3] * 1 / 2 + -s[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[2] * 1 / 3 + -s[0] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    if !(-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(s[4] * 1 / 3 + -s[0] * 1 / 3),
            Interval::interval_upper(-a[2] * 1 + l[2] + s[4]),
            Interval::interval_upper(l[1] * 1 / 2 + -a[1] * 1 / 2 + s[4] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + -a[2] * 1 + l[2] + a[3] + -l[3] * 1),
            Interval::interval_upper(
                RealNumRep::new(-5, 3) + a[3] * 1 / 3 + -s[0] * 1 / 3 + -l[3] * 1 / 3,
            ),
            Interval::interval_upper(
                RealNumRep::new(-5, 2)
                    + l[1] * 1 / 2
                    + -a[1] * 1 / 2
                    + a[3] * 1 / 2
                    + -l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        s[4] * 1 / 4 + -a[0] * 1 / 4 + l[0] * 1 / 4,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[0] * 1 / 3 + s[3] * 1 / 3 + l[0] * 1 / 3,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3] * 1 / 4 + -s[0] * 1 / 4)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 5 + -s[0] * 1 / 5)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        l[1] * 1 / 3 + -a[1] * 1 / 3 + s[4] * 1 / 3,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(RealNumRep::new(5, 1))]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(!(-a[4] * 1 + l[3] + s[4] >= RealNumRep::new(0, 1)));
    let tmp = IntervalList::new(vec![Interval::interval_lower(l[3] + -a[3] * 1 + s[4])]);
    ret = ret.intersection(&tmp);
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + l[1] + s[1] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[2] * 1 / 2 + l[2] * 1 / 2 + s[4] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 3 + -s[2] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 2 + -s[3] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[1] * 1 / 2 + -s[0] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    assert!(-a[2] * 1 + l[2] + s[2] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[2] * 1 / 2 + -s[1] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[0] * 1 / 2 + s[2] * 1 / 2 + l[0] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    ret
}

pub fn compute_b_t_5_l_4(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 4);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])) || (l[1] == l[0]));
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[2] + -s[2] * 1 + -l[2] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (-a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[2] == l[1])
            || (RealNumRep::new(0, 1) <= -a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 1)
            || (!(l[3] == l[2]))
    );
    assert!(
        (l[1] == l[0])
            || (l[2] == l[1])
            || (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2
                == RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[1] + -s[1] * 1 + -l[1] * 1)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1)]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(l[3] + -a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2),
            Interval::interval_lower(-s[4] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[2] * 1 + a[1] * 2 + -s[1] * 1 + -l[1] * 2 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[2] * 1 + a[1] * 2 + -a[0] * 1 + -l[1] * 2 + l[2] + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[2] * 2 + a[1] * 3 + -s[0] * 1 + -l[1] * 3 + l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 2 + -a[1] * 1 + -s[3] * 1 + l[1] + -l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[2] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1,
    )]);
    ret = ret.intersection(&tmp);
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[3] + -s[3] * 1 + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[3] == l[2]) || (-a[3] * 1 + a[2] + -l[2] * 1 + l[3] <= RealNumRep::new(-5, 1)));
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 2 + a[2] * 3 + -s[1] * 1 + -l[2] * 3 + l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(-s[4] * 1 + a[3] + -l[3] * 1)]);
    ret = ret.intersection(&tmp);
    assert!((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)));
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + -s[3] * 3 + s[1] * 2 <= RealNumRep::new(0, 1))
    );
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[4] * 1 / 2 + a[1] + -s[3] * 3 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -s[3] * 2 + s[1] + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2 + -l[2] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)));
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[1] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 / 2 + a[2] + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[3] * 1 + a[3] + a[1] + -s[3] * 2 + -l[1] * 1),
            Interval::interval_lower(a[3] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (RealNumRep::new(0, 1)
                <= l[3] + -a[3] * 1 + a[2] * 2 + -a[1] * 1 + -l[2] * 2 + l[1])
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + -a[2] * 1 + l[2] + a[3] + -l[3] * 1),
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[3] + -s[1] * 1 + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -l[3] * 1 + a[3] + -a[2] * 1 + l[2] + -s[2] * 1 + s[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] + s[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -s[4] * 2 + a[2] * 2 + -l[2] * 2 + a[1] + -s[0] * 1 + -l[1] * 1,
            ),
            Interval::interval_lower(
                -a[2] * 2 / 3 + a[1] + -s[0] * 1 / 3 + -l[1] * 1 + l[2] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[4] + a[1] + -s[2] * 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -s[4] * 1 / 3 + a[1] + -a[0] * 2 / 3 + -l[1] * 1 + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                -s[4] * 1 + a[2] + -l[2] * 1 + a[1] + -a[0] * 1 + -l[1] * 1 + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -s[1] * 2 / 3 + -l[1] * 1),
            Interval::interval_lower(-s[4] * 1 + a[2] + -l[2] * 1 + a[1] + -s[1] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -s[4] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2 + -l[3] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                -s[4] * 1 + a[3] * 3 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 3 / 2,
            ),
            Interval::interval_upper(
                -s[4] * 1 / 2 + -a[2] * 1 / 2 + l[2] * 1 / 2 + a[3] + -l[3] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 2 + a[3] + -s[2] * 1 / 2 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -s[2] * 3 + s[0] * 2 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (l[3] == l[2])) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 1 / 2 + a[1] * 1 / 2 + -s[2] * 1 + -l[1] * 1 / 2 + -l[3] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[3] * 1 / 2 + a[1] * 3 / 2 + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (l[3] + -a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 1 / 2 + a[1] * 3 / 2 + -a[0] * 1 + -l[1] * 3 / 2 + l[3] * 1 / 2 + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + a[1] + -s[3] * 1 + -l[2] * 1 + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -s[4] * 2 / 3 + a[2] + -a[0] * 1 / 3 + -l[2] * 1 + l[0] * 1 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 + -l[3] * 1 + a[3] + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + l[3] + -a[3] * 1 + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (s[4] * 1 / 4 + -s[2] * 1 + s[0] * 3 / 4 <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[2] + -s[1] * 1 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 2 + a[2] * 3 + -a[0] * 1 + -l[2] * 3 + l[3] * 2 + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 3 + a[2] * 4 + -s[0] * 1 + -l[2] * 4 + l[3] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        RealNumRep::new(5, 1) + -s[4] * 1 + a[2] + -l[2] * 1,
    )]);
    ret = ret.intersection(&tmp);
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + -s[2] * 1 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[4] + l[3] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[3] == l[2]) || (-a[3] * 1 + a[1] + -l[1] * 1 + l[3] <= RealNumRep::new(-10, 1)));
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(s[4] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2),
            Interval::interval_lower(-s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -s[1] * 3 / 2 + s[0] * 1 / 2 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + -s[4] * 1 + a[1] + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + -a[2] * 1 + l[2] + -s[2] * 2 + s[0] * 2 <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (-a[2] * 1 + l[2] + s[3] + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 + a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 2 + a[2] * 1 / 2 + -l[2] * 1 / 2 + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (l[3] + -a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 1 / 2 + a[1] * 3 / 2 + -s[1] * 1 + -l[1] * 3 / 2 + l[3] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[3] * 1 + a[2] * 2 + -s[1] * 1 + -l[2] * 2 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[3] + -a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[3] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + l[3]),
            Interval::interval_upper(
                -l[3] * 2 + a[3] * 2 + -a[2] * 2 + -a[1] * 1 + l[2] * 2 + s[0] + l[1],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (l[3] == l[2])
            || (RealNumRep::new(0, 1)
                <= -l[3] * 1 + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2)
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 1 + a[2] * 2 + -s[2] * 1 + -l[2] * 2 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[3] + -a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2),
            Interval::interval_point(l[1] + -a[1] * 1 + -a[3] * 1 + a[2] * 2 + -l[2] * 2 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] * 1 / 2 + -s[3] * 1 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
            || (-l[1] * 2 + a[1] * 2 + s[4] + -s[3] * 3 <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[2] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[2] * 1),
            Interval::interval_upper(
                l[1] * 1 / 2 + -a[1] * 1 / 2 + a[2] + -s[3] * 1 / 2 + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 1 + s[2] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[0] * 1 + -s[3] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-s[4] * 2 / 3 + a[3] + -s[1] * 1 / 3 + -l[3] * 1),
            Interval::interval_upper(
                -s[4] * 1 / 2 + -a[2] * 1 / 2 + l[2] * 1 / 2 + a[3] + -l[3] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -s[4] * 1 / 2 + a[2] + -s[2] * 1 / 2 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + a[0] + -s[1] * 2 + -l[2] * 1 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 3 + a[2] + -s[1] * 2 / 3 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + l[3] + -a[3] * 1 + -s[3] * 1 + s[1] <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + a[0] * 1 / 2 + -s[2] * 3 / 2 + -l[3] * 1 + -l[0] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[3] + a[0] * 2 + -s[1] * 3 + -l[3] * 1 + -l[0] * 2),
            Interval::interval_upper(
                -a[2] * 1 + l[2] + a[3] + a[0] + -s[1] * 1 + -l[3] * 1 + -l[0] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + -s[2] * 3 / 2 + s[1] * 1 / 2 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[1] * 1 + a[1] + a[3] + -s[2] * 2 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + -s[2] * 4 / 3 + s[0] * 1 / 3 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[3] + -s[1] * 2 + s[0] + -l[3] * 1),
            Interval::interval_upper(
                -a[2] * 1 + l[2] + a[3] + -s[1] * 1 / 2 + s[0] * 1 / 2 + -l[3] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 3 + s[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 2 + -a[0] * 1 + s[2] * 3 + l[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 1 + a[2] + -l[2] * 1 + -a[0] * 1 + s[1] + l[0] <= RealNumRep::new(0, 1))
            || (-s[4] * 1 / 2 + -a[0] * 1 + s[1] * 3 / 2 + l[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 2 + a[2] * 2 + -l[2] * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1))
            || (-s[4] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + l[3] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + l[3] + -a[3] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(l[3] + -a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2),
            Interval::interval_upper(-a[3] * 2 + a[2] * 3 + -s[0] * 1 + -l[2] * 3 + l[3] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -s[4] * 3 / 4 + a[2] + -s[0] * 1 / 4 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[2] + -s[0] * 1 + -l[2] * 1),
            Interval::interval_upper(a[2] + -a[1] * 2 + s[0] + l[1] * 2 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + l[1] + -a[1] * 1 + a[2] + -l[2] * 1),
            Interval::interval_lower(a[2] + -a[1] * 2 + s[0] + l[1] * 2 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                -s[4] * 1 + -l[3] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + -l[2] * 1,
            ),
            Interval::interval_upper(
                -l[3] * 2 + -s[4] * 2 + a[3] * 2 + a[2] + -s[0] * 1 + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + -s[2] * 2 + s[0] + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -s[4] * 2 / 3 + a[2] + -s[1] * 1 / 3 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 1 + -s[4] * 1 + a[3] + a[2] + -s[1] * 1 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(-5, 1))
            || (-s[4] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (-s[4] * 1 / 3 + s[0] * 1 / 3 <= RealNumRep::new(-5, 1))
            || (-s[4] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-l[1] * 1 + a[1] + -s[3] * 1 <= RealNumRep::new(-5, 1))
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-10, 1) + l[1] + -a[1] * 1 + a[3] + -l[3] * 1),
            Interval::interval_upper(RealNumRep::new(-5, 1) + -a[2] * 1 + l[2] + a[3] + -l[3] * 1),
            Interval::interval_upper(RealNumRep::new(-15, 1) + a[3] + -s[0] * 1 + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-s[4] * 3 / 4 + a[3] + -s[0] * 1 / 4 + -l[3] * 1),
            Interval::interval_upper(
                -s[4] * 1 / 2 + -a[2] * 1 / 2 + l[2] * 1 / 2 + a[3] + -l[3] * 1,
            ),
            Interval::interval_upper(
                l[1] * 1 / 3 + -a[1] * 1 / 3 + -s[4] * 2 / 3 + a[3] + -l[3] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 2 + s[2] * 3 + -s[1] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (l[1] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 / 2 + s[2] <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-s[4] * 1 / 2 + a[2] + -s[0] * 1 / 2 + -l[2] * 1),
            Interval::interval_upper(
                l[1] * 2 / 3 + -a[1] * 2 / 3 + -s[4] * 1 / 3 + a[2] + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(RealNumRep::new(5, 1))]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(!(-a[4] * 1 + l[3] + s[4] >= RealNumRep::new(0, 1)));
    assert!(l[3] + -a[3] * 1 + s[3] <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(0, 1));
    assert!(-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_q_4_t_5_l_4(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 4);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])) || (l[1] == l[0]));
    assert!((l[2] == l[1]) || (-a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[1] == l[0])
            || (l[2] == l[1])
            || (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2
                == RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(0, 1)),
        Interval::interval_point(RealNumRep::new(0, 1)),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -a[2] * 4 + a[1] * 4 + -a[0] * 1 + -l[1] * 4 + l[2] * 4 + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -a[2] * 2 + a[1] * 2 + -s[3] * 1 + -l[1] * 2 + l[2] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1)
                    + a[4]
                    + -l[3] * 1
                    + -a[2] * 3
                    + a[1] * 2
                    + -l[1] * 2
                    + l[2] * 3,
            ),
            Interval::interval_lower(RealNumRep::new(5, 1)),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 1 + -s[3] * 1 + s[1] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(-5, 1)));
    assert!((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)));
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + s[2] + -s[0] * 1 + -l[1] * 3 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (RealNumRep::new(0, 1) <= -a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 1)
            || (!(l[3] == l[2]))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[1] + -s[0] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[1] + -s[1] * 1 + -l[1] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[2] + -s[2] * 1 + -l[2] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
            Interval::interval_point(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
            Interval::interval_lower(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -a[2] * 3 + a[1] * 3 + -s[2] * 1 + -l[1] * 3 + l[2] * 3,
            ),
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2],
            ),
            Interval::interval_lower(-s[4] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + a[1] + -a[0] * 1 + s[1] + -l[1] * 1 + l[2] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + s[3] + -s[1] * 1 + -l[1] * 3 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -l[3] * 1 + -a[2] * 1 + a[1] + -s[3] * 1 + -l[1] * 1 + l[2],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 2 + -a[1] * 1 + -s[3] * 1 + l[1] + -l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[2] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -a[2] * 2 + a[1] * 2 + -s[3] * 1 + -l[1] * 2 + l[2] * 2,
            ),
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (-l[3] * 1 + a[3] + -a[2] * 2 + a[1] * 2 + -s[1] * 1 + -l[1] * 2 + l[2] * 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -l[3] * 1 + -a[2] * 3 + a[1] * 3 + -s[1] * 1 + -l[1] * 3 + l[2] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -l[3] * 1 + -a[2] * 4 + a[1] * 4 + -s[0] * 1 + -l[1] * 4 + l[2] * 4,
            ),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -a[2] * 5 + a[1] * 5 + -s[0] * 1 + -l[1] * 5 + l[2] * 5,
            ),
            Interval::interval_lower(-a[2] * 2 + a[1] * 3 + -s[0] * 1 + -l[1] * 3 + l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[0] * 1 + l[0] + -a[2] * 1 + a[1] * 2 + -l[1] * 2 + l[2]),
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -a[2] * 4 + a[1] * 4 + -a[0] * 1 + -l[1] * 4 + l[2] * 4 + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(-l[3] * 1 + a[3] + -a[2] * 2 + a[1] * 2 + -s[1] * 1 + -l[1] * 2 + l[2] * 2
            <= RealNumRep::new(0, 1))))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -a[2] * 4 + a[1] * 4 + -s[1] * 1 + -l[1] * 4 + l[2] * 4,
            ),
            Interval::interval_lower(-a[2] * 1 + a[1] * 2 + -s[1] * 1 + -l[1] * 2 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[2] + -s[1] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -l[3] * 1 + -a[2] * 2 + a[1] * 2 + -s[2] * 1 + -l[1] * 2 + l[2] * 2,
            ),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (a[4] + -l[3] * 1 + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3
            <= RealNumRep::new(0, 1))
        || (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -s[4] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[0] * 1 + l[0] + -a[2] * 1 + a[1] * 2 + -l[1] * 2 + l[2]),
            Interval::interval_lower(-a[3] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] + s[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[2] * 2 + a[1] * 3 + -s[0] * 1 + -l[1] * 3 + l[2] * 2),
            Interval::interval_lower(-a[3] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + -a[0] * 1 + s[2] + -l[1] * 2 + l[2] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    if !(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
            Interval::interval_lower(-a[3] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[2] * 1 + a[1] * 2 + -s[1] * 1 + -l[1] * 2 + l[2]),
            Interval::interval_lower(-a[3] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[2] * 2 + -a[1] * 2 + -s[3] * 1 + s[0] + l[1] * 2 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 2 + s[0] + l[1] * 2 + -l[2] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= -l[3] * 1 + l[2])));
    assert!((l[3] == l[2]) || (l[3] + -a[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(-5, 1)));
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[4] + l[3] + -a[3] * 2 + a[2] + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -l[3] * 1 + -s[3] * 3 / 2 + s[2] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (l[3] == l[2])
            || (RealNumRep::new(0, 1)
                <= -l[3] * 1 + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2)
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] + s[3] + -l[1] * 1 + l[2] * 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
    );
    assert!(-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(0, 1));
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[4] + l[3] + -a[3] * 2 + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
            Interval::interval_lower(a[4] + l[3] + -a[3] * 2 + a[2] * 2 + -s[3] * 1 + -l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + l[3] * 1 / 2 + -a[3] * 3 / 2 + a[1] * 3 / 2 + -s[1] * 1 + -l[1] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
            Interval::interval_lower(
                RealNumRep::new(5, 1)
                    + a[4]
                    + l[3] * 1 / 2
                    + -a[3] * 3 / 2
                    + a[1] * 1 / 2
                    + -l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[3] == l[2]) || (l[3] + -a[3] * 1 + s[3] <= RealNumRep::new(-5, 1)));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -l[3] * 1 + a[0] * 1 / 3 + -s[3] * 4 / 3 + -l[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -l[3] * 1 + -s[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(-a[3] * 1 + a[4] + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-10, 1)));
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1))
    );
    if !(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2],
            ),
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 3 / 2 + -l[1] * 1 / 2 + a[1] * 1 / 2,
            ),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(a[4] + -a[3] * 1 + a[2] + -s[3] * 1 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + l[3] * 3 + -a[3] * 4 + a[2] * 4 + -s[0] * 1 + -l[2] * 4,
            ),
            Interval::interval_upper(
                a[4] + l[3] * 2 + -a[3] * 3 + a[2] * 3 + -a[1] * 1 + l[1] + -l[2] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(a[4] + l[3] + -a[3] * 2 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1)))
        || (RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -s[4] * 1 + -a[3] * 1 + a[2] + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(a[4] + l[3] + -a[3] * 2 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1)))
        || (RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + l[3] * 3 + -a[3] * 4 + a[2] * 4 + -a[0] * 1 + -l[2] * 4 + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(a[4] + l[3] + -a[3] * 2 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1)))
        || (RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + l[3] * 3 + -a[3] * 4 + a[2] * 4 + -s[1] * 1 + -l[2] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(a[4] + l[3] + -a[3] * 2 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1)))
        || (RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + l[3] * 2 + -a[3] * 3 + a[2] * 3 + -s[2] * 1 + -l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(a[4] + l[3] + -a[3] * 2 + a[2] * 2 + -s[2] * 1 + -l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(a[4] + l[3] + -a[3] * 2 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1)))
        || (RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(
                a[4] + l[3] * 2 + l[1] + -a[1] * 1 + -a[3] * 3 + a[2] * 3 + -l[2] * 3,
            ),
            Interval::interval_lower(
                a[4] + l[3] * 2 + -a[3] * 3 + a[2] * 3 + -a[1] * 1 + l[1] + -l[2] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + s[2] <= RealNumRep::new(0, 1))
    );
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[1] + l[2] <= RealNumRep::new(-10, 1)));
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] * 1 / 2 + -l[3] * 1 / 2 + a[2] * 1 / 2 + -s[3] * 1 + -l[2] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[3] + -s[3] * 1 + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-l[3] * 1 + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
        Interval::interval_lower(-s[4] * 1 + a[3] + -l[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
        Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + a[2] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 1 + a[3] + -l[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + a[2] + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 3 / 2 + -l[1] * 1 / 2 + a[1] * 1 / 2,
            ),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + a[2] + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + -l[1] * 1 / 2 + a[1] * 1 / 2),
        Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
        Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + a[2] + -l[2] * 1),
        Interval::interval_lower(-s[4] * 1 + a[3] + -l[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (a[1] + -s[3] * 1 + -l[1] * 1 <= RealNumRep::new(-5, 1))
            || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1]))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(a[4] + -l[3] * 1 + -s[2] * 4 + s[0] * 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(a[4] + -l[3] * 1 + -a[2] * 1 + l[2] + -s[2] * 2 + s[0] * 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                RealNumRep::new(-5, 1) + a[4] + -l[3] * 1 + a[2] + -s[3] * 2 + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[4] + l[3] + -a[3] * 2 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(-s[4] * 1 + a[3] + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
            Interval::interval_lower(-s[4] * 2 / 3 + -l[2] * 1 + a[2] + -s[1] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (a[4] + l[3] + -a[3] * 2 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 1 + a[2] * 2 + -s[2] * 1 + -l[2] * 2 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                RealNumRep::new(-5, 2)
                    + a[4]
                    + -l[3] * 1
                    + a[1] * 1 / 2
                    + -s[3] * 3 / 2
                    + -l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
        Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 3 + s[1] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
        Interval::interval_lower(a[4] + -l[3] * 1 + -l[1] * 2 + a[1] * 2 + -s[3] * 3),
        Interval::interval_lower(a[4] + -a[3] * 1 + -a[1] * 1 + s[0] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(a[4] + -l[3] * 1 + -l[1] * 2 + a[1] * 2 + -s[2] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -l[3] * 1 + -a[3] * 1 + a[1] + -s[2] * 1 + -l[1] * 1 + l[2],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -a[3] * 1 + a[0] * 1 / 2 + -s[2] * 1 / 2 + -l[0] * 1 / 2),
        Interval::interval_upper(a[4] + -l[3] * 1 + a[0] + -s[2] * 2 + -l[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + -a[1] * 1 + s[2] + l[1] + -l[2] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + -a[1] * 1 + l[1] + s[2] * 2 <= RealNumRep::new(-5, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 2 + a[3] + -s[2] * 1 / 2 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -l[3] * 1 + a[2] + -l[2] * 1 + -s[3] * 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[3] * 1 / 2 + a[1] * 3 / 2 + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -a[3] * 1 + -s[2] * 1 / 2 + s[1] * 1 / 2),
        Interval::interval_upper(a[4] + -l[3] * 1 + -s[2] * 2 + s[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -l[3] * 1 + -l[1] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 3 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
            Interval::interval_lower(
                -s[4] * 2 / 3 + -l[2] * 1 + a[2] + -a[0] * 1 / 3 + l[0] * 1 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 2 + -a[0] * 1 + s[2] * 3 + l[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 1 + s[2] * 3 / 2 + -s[1] * 1 / 2 <= RealNumRep::new(0, 1))
    );
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(-s[4] * 1 / 2 + -l[2] * 1 + a[2] + -s[2] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 3 / 2 + -l[1] * 1 / 2 + a[1] * 1 / 2,
            ),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(-s[4] * 2 / 3 + -l[2] * 1 + a[2] + -s[1] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 3 / 2 + -l[1] * 1 / 2 + a[1] * 1 / 2,
            ),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(
                -s[4] * 2 / 3 + -l[2] * 1 + a[2] + -a[0] * 1 / 3 + l[0] * 1 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + l[3] * 2 + -a[3] * 3 + a[2] * 3 + -s[1] * 1 + -l[2] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                RealNumRep::new(15, 2) + a[4] + l[3] * 1 / 2 + -a[3] * 3 / 2 + s[1] * 1 / 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + l[3] + a[2] + -l[2] * 1 + -a[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[2] * 4 + s[0] * 3),
            Interval::interval_lower(a[3] + -s[2] * 3 + s[0] * 2 + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[4] + -l[3] * 1 + -a[2] * 3 + s[1] * 2 + l[2] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[2] * 1 + s[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + -s[2] * 1 + s[0]),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + a[2] + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[3] + -s[2] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -l[3] * 1 + -s[3] * 4 / 3 + s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 + s[1]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[4] + -a[3] * 1 + -a[1] * 1 + s[0] + l[1],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1] <= RealNumRep::new(-5, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 4 + a[1] * 4 + s[3] + -s[0] * 1 + -l[1] * 4 + l[2] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + -a[0] * 1 + s[3] + -l[1] * 3 + l[2] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + l[3] + a[2] + -l[2] * 1 + -a[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[2] * 4 + s[0] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(a[4] + -l[3] * 1 + -a[2] * 1 + l[2] + -s[2] * 2 + s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 2 + s[0]),
            Interval::interval_upper(a[4] + -l[3] * 1 + -a[1] * 4 + s[0] * 3 + l[1] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[3] * 1 / 2 + s[0] * 1 / 2 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(a[4] + -l[3] * 1 + -l[1] * 2 + a[1] * 2 + -s[3] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= -a[1] * 1 + s[3] * 1 / 2 + s[0] * 1 / 2 + l[1]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(a[4] + -l[3] * 1 + -a[1] * 4 + s[0] * 3 + l[1] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -l[3] * 1 / 2 + -a[3] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + -a[3] * 2 + a[1] * 2 + -a[0] * 2 + s[2] * 2 + -l[1] * 2 + l[0] * 2
                <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2])
        || (l[3] + -a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[1] * 1 + -l[2] * 1 + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + l[3] + -a[3] * 2 + a[1] * 2 + -a[0] * 1 + -l[1] * 2 + l[0],
            ),
            Interval::interval_lower(
                l[0] + -a[3] * 1 / 2 + a[1] * 3 / 2 + -a[0] * 1 + -l[1] * 3 / 2 + l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (l[3] + -a[3] * 1 + a[2] + a[1] + -l[1] * 1 + -s[1] * 1 + -l[2] * 1
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + l[3] + -a[3] * 2 + a[1] * 2 + -s[1] * 1 + -l[1] * 2),
            Interval::interval_lower(
                -a[3] * 1 / 2 + a[1] * 3 / 2 + -s[1] * 1 + -l[1] * 3 / 2 + l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -a[3] * 1 + -s[1] * 1 / 2 + s[0] * 1 / 2),
        Interval::interval_upper(a[4] + -l[3] * 1 + -s[1] * 5 / 2 + s[0] * 3 / 2),
        Interval::interval_upper(a[4] + -l[3] * 1 + -a[2] * 3 + s[1] * 2 + l[2] * 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
        Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 2 + s[0]),
        Interval::interval_lower(a[4] + -l[3] * 1 + -l[1] * 2 + a[1] * 2 + -s[3] * 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -a[3] * 1),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -l[3] * 1 + -s[1] * 1),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -l[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (-l[3] * 1 + a[3] + -a[2] * 2 + s[1] + l[2] * 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-l[3] * 2 + -s[4] * 1 + a[3] * 2 + -a[2] * 2 + s[1] + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 1 + a[2] * 2 + -a[1] * 2 + s[1] + l[1] * 2 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 1 + a[2] + -a[1] * 1 + s[2] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 3 + s[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 1 + s[2] <= RealNumRep::new(-5, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                RealNumRep::new(20, 1) + a[4] + -l[3] * 1 + -a[1] * 4 + s[0] * 3 + l[1] * 4,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + a[1] + -s[2] * 1 + -l[1] * 1,
            ),
            Interval::interval_upper(
                RealNumRep::new(-10, 1) + a[4] + -l[3] * 1 + a[1] * 2 + -s[2] * 3 + -l[1] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] * 1 / 3 + -l[3] * 1 / 3 + a[1] * 2 / 3 + -s[2] * 1 + -l[1] * 2 / 3,
            ),
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[2] * 2 + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] * 1 / 2 + -a[3] * 1 / 2 + a[1] * 1 / 2 + -s[2] * 1 / 2 + -l[1] * 1 / 2,
            ),
            Interval::interval_upper(-l[1] * 1 + a[3] + a[1] + -s[2] * 2 + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                a[4] + l[3] * 4 + -a[3] * 5 + a[2] * 5 + -s[0] * 1 + -l[2] * 5,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
            Interval::interval_lower(
                a[3] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2 + -l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 + s[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
            Interval::interval_lower(-a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 1 + a[2] * 3 + -a[1] * 3 + s[0] + l[1] * 3 + -l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + -a[0] * 1 + s[1] + -l[2] * 1 + l[0]
                <= RealNumRep::new(0, 1))
    );
    if !((l[1] == l[0]) || (l[3] == l[2])) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 1 / 2 + a[1] * 1 / 2 + -s[2] * 1 + -l[1] * 1 / 2 + -l[3] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + -s[2] * 4 / 3 + s[0] * 1 / 3 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (l[3] * 3 / 2 + -a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2
                <= RealNumRep::new(0, 1))
    );
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 3 / 2 + -l[1] * 1 / 2 + a[1] * 1 / 2,
            ),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(
                a[3] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2 + -l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (!(l[1] == l[0]))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                a[4] + -l[3] * 1 / 2 + -s[4] * 1 + -a[3] * 1 / 2 + a[1] * 1 / 2 + -l[0] * 1 / 2,
            ),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] * 2 / 3 + -l[3] * 2 / 3 + a[1] * 1 / 3 + -s[3] * 1 + -l[1] * 1 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] * 3 + -a[3] * 3 + a[2] * 3 + -a[0] * 1 + s[3] + -l[2] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 3 + -a[3] * 3 + a[2] * 3 + s[2] + -s[0] * 1 + -l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 4 + -a[3] * 4 + a[2] * 4 + s[3] + -s[0] * 1 + -l[2] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + -a[3] * 2 + a[2] * 2 + -a[0] * 1 + s[2] + -l[2] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + -a[3] * 2 + a[2] * 2 + s[1] + -s[0] * 1 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-l[3] * 1 + a[3] + -a[2] * 1 + -s[3] * 1 + s[1] + l[2] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + -a[3] * 2 + a[2] * 2 + s[2] + -s[1] * 1 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-s[4] * 1 + a[3] + -a[1] * 1 + s[1] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]))
    );
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 + -s[4] * 1 + a[3] + -a[1] * 1 + s[1] + l[1] <= RealNumRep::new(0, 1))
    );
    if !(RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + a[2] + -l[2] * 1),
            Interval::interval_lower(-s[4] * 1 + a[3] + -l[3] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 / 2 + -s[4] * 1 + -a[3] * 1 / 2 + a[1] * 1 / 2 + -l[1] * 1 / 2,
            ),
            Interval::interval_lower(-s[4] * 1 + a[3] + -l[3] * 1),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 2 + s[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                RealNumRep::new(10, 1)
                    + a[4]
                    + -l[3] * 1
                    + -a[2] * 1
                    + l[2]
                    + -a[1] * 2
                    + s[0] * 2
                    + l[1] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + -s[2] * 3 / 2 + s[1] * 1 / 2 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-a[2] * 1 + l[2] + a[3] + -a[1] * 1 + s[0] + l[1] + -l[3] * 1
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + l[3] + a[2] + -l[2] * 1 + -a[3] * 2 + a[1] * 2 + -s[1] * 2 + -l[1] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -a[3] * 1 + a[0] + -s[1] * 1 + -l[0] * 1),
        Interval::interval_upper(a[4] + -l[3] * 1 + a[0] * 3 + -s[1] * 4 + -l[0] * 3),
        Interval::interval_upper(
            a[4] + -l[3] * 1 + -a[2] * 1 + l[2] + a[0] * 2 + -s[1] * 2 + -l[0] * 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + -a[3] * 2 + a[2] * 2 + -a[1] * 1 + s[3] + l[1] + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 1 / 2 + -a[0] * 1 + s[1] * 3 / 2 + l[0] <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= -s[4] * 2 + a[2] * 3 + -a[0] * 1 + -l[2] * 3 + l[0]))
    );
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-a[2] * 1 + -a[0] * 1 + l[2] + s[1] * 2 + l[0] <= RealNumRep::new(0, 1))
            || (-s[4] * 1 + a[2] + -l[2] * 1 + -a[0] * 1 + s[1] + l[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[0] * 1 + -s[3] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + l[3] + -a[3] * 1 + -s[3] * 1 + s[1] <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(
            a[4] + -l[3] * 1 + -a[3] * 1 + a[1] + -s[2] * 1 + -l[1] * 1 + l[2],
        ),
        Interval::interval_upper(a[4] + -l[3] * 1 + -l[1] * 2 + a[1] * 2 + -s[2] * 3),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 3 / 2 + -l[1] * 1 / 2 + a[1] * 1 / 2,
            ),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(
                l[1] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 / 2 + -l[2] * 1 + a[2],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[2] * 1 + s[3] + l[2] + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 2 + s[0]),
            Interval::interval_lower(s[4] * 1 / 2 + a[1] + -s[3] * 3 / 2 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + -s[2] * 4 + s[0] * 3 <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                l[1] * 1 / 3 + -a[1] * 1 / 3 + -s[4] * 2 / 3 + a[3] + -l[3] * 1,
            ),
            Interval::interval_upper(
                -s[4] * 1 / 2 + -a[2] * 1 / 2 + l[2] * 1 / 2 + a[3] + -l[3] * 1,
            ),
            Interval::interval_upper(-s[4] * 3 / 4 + a[3] + -s[0] * 1 / 4 + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -a[3] * 1),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -l[3] * 1 + -s[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
            Interval::interval_lower(a[1] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
            Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(a[3] + -s[3] * 2 + s[1] + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + -s[3] * 3 + s[1] * 2 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (!(l[1] == l[0]))
            || (l[3] + -a[3] * 1 + a[1] + s[3] + -s[2] * 1 + -l[0] * 1 <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                a[4] + l[3] * 1 / 2 + -a[3] * 3 / 2 + a[1] * 3 / 2 + -s[2] * 1 + -l[1] * 3 / 2,
            ),
            Interval::interval_lower(
                a[4] + l[3] + a[2] + -l[2] * 1 + -a[3] * 2 + a[1] * 2 + -s[2] * 2 + -l[1] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + a[2] + -l[2] * 1),
            Interval::interval_lower(
                -s[4] * 1 / 3 + a[1] + -a[0] * 2 / 3 + -l[1] * 1 + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                -s[4] * 1 + a[2] + -l[2] * 1 + a[1] + -a[0] * 1 + -l[1] * 1 + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + a[2] + -l[2] * 1),
            Interval::interval_lower(-s[4] * 1 + a[2] + -l[2] * 1 + a[1] + -s[1] * 1 + -l[1] * 1),
            Interval::interval_lower(s[4] + l[2] * 2 + -a[2] * 2 + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2],
            ),
            Interval::interval_lower(-s[4] * 1 + a[3] + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
            Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -s[1] * 2 / 3 + -l[1] * 1),
            Interval::interval_lower(-s[4] * 1 + a[2] + -l[2] * 1 + a[1] + -s[1] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
            Interval::interval_lower(
                -s[4] * 1 / 3 + a[1] + -a[0] * 2 / 3 + -l[1] * 1 + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                -s[4] * 1 + a[2] + -l[2] * 1 + a[1] + -a[0] * 1 + -l[1] * 1 + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 3 + s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
            Interval::interval_lower(
                l[1] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 / 2 + -l[2] * 1 + a[2],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + l[3] + -a[3] * 1 + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[2] * 1 + s[0]),
            Interval::interval_lower(-l[2] * 1 + a[2] + -s[2] * 2 + s[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[2] * 4 + s[0] * 3),
            Interval::interval_lower(-l[2] * 1 + a[2] + -s[2] * 2 + s[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
            Interval::interval_lower(-s[4] * 1 / 2 + -l[2] * 1 + a[2] + -s[2] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
            Interval::interval_lower(RealNumRep::new(5, 1) + -s[4] * 1 + -l[2] * 1 + a[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 3 / 2 + -l[1] * 1 / 2 + a[1] * 1 / 2,
            ),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(RealNumRep::new(5, 1) + -s[4] * 1 + -l[2] * 1 + a[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (-s[4] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(-5, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + -l[3] * 1 + -a[2] * 2 + s[0] + l[2] * 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(15, 1)
                    + a[4]
                    + -l[3] * 1
                    + -l[1] * 2
                    + a[1] * 2
                    + -a[2] * 3
                    + l[2] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (!(l[1] == l[0]))
            || (l[3] + -a[3] * 1 + a[1] + s[2] + -s[1] * 1 + -l[0] * 1 <= RealNumRep::new(0, 1))
    );
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + a[2] + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + -a[3] * 2 + a[1] * 2 + s[2] * 2 + -s[1] * 2 + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[1] * 1 + a[1] + a[3] + -s[2] * 2 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + -s[3] * 2 + s[0] <= RealNumRep::new(0, 1))
            || (-l[1] * 2 + a[1] * 2 + s[4] + -s[3] * 3 <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                -s[4] * 1 / 2 + -a[2] * 1 / 2 + l[2] * 1 / 2 + a[3] + -l[3] * 1,
            ),
            Interval::interval_upper(
                -s[4] * 1 + a[3] * 3 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-a[2] * 2 + l[2] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(a[4] + -a[3] * 1 + -s[1] * 1 / 2 + s[0] * 1 / 2),
            Interval::interval_upper(a[4] + -l[3] * 1 + -a[2] * 1 + l[2] + -s[1] * 1 + s[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2),
            Interval::interval_lower(
                a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2),
            Interval::interval_lower(s[4] + l[3] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
            Interval::interval_lower(
                l[1] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 / 2 + -l[2] * 1 + a[2],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2),
            Interval::interval_lower(a[1] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-s[4] * 2 / 3 + a[3] + -s[1] * 1 / 3 + -l[3] * 1),
            Interval::interval_upper(
                -s[4] * 1 / 2 + -a[2] * 1 / 2 + l[2] * 1 / 2 + a[3] + -l[3] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -a[3] * 1 + -s[2] * 1 / 3 + s[0] * 1 / 3),
        Interval::interval_upper(a[4] + -l[3] * 1 + -s[2] * 5 / 3 + s[0] * 2 / 3),
    ]);
    ret = ret.intersection(&tmp);
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
            Interval::interval_lower(
                a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[2] * 1 + a[2] + a[0] + -s[1] * 2 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[2] * 1 + a[2] + -s[3] * 1 / 2 + -s[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + a[2] + -l[2] * 1),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(
                a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 2 + s[0]),
            Interval::interval_lower(a[1] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 2 + s[0]),
            Interval::interval_lower(
                a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -a[2] * 1 + l[2] + -s[2] * 2 + s[0] * 2),
            Interval::interval_lower(-a[2] * 1 + l[2] + a[3] + -s[2] * 1 + s[0] + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 + -l[3] * 1 + a[3] + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
            Interval::interval_lower(
                -s[4] * 2 / 3 + -l[2] * 1 + a[2] + -a[0] * 1 / 3 + l[0] * 1 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + -a[2] * 1 + l[2] + -s[2] * 2 + s[0] * 2 <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[3] * 1 + a[2] * 2 + -s[1] * 1 + -l[2] * 2 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
            Interval::interval_lower(
                a[4] + l[3] * 1 / 2 + -a[3] * 3 / 2 + a[1] * 3 / 2 + -s[2] * 1 + -l[1] * 3 / 2,
            ),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(s[4] * 1 / 2 + a[1] + -s[3] * 3 / 2 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(
                a[3] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2 + -l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + -a[0] * 1 + s[1] * 2 + l[2] + l[0] <= RealNumRep::new(-5, 1))
    );
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 2 + s[0]),
            Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1])
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (a[4] + l[3] + -a[3] * 2 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[1] + -a[1] * 1 + -a[3] * 1 + a[2] * 2 + -l[2] * 2 + l[3]),
            Interval::interval_lower(-a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 2 + s[0]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -l[3] * 1 + -s[3] * 5 / 4 + s[0] * 1 / 4),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
            Interval::interval_lower(-s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2 + -l[1] * 1),
            Interval::interval_lower(
                -s[4] * 2 + a[2] * 2 + -l[2] * 2 + a[1] + -s[0] * 1 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
            Interval::interval_lower(-s[4] * 3 / 4 + -l[2] * 1 + a[2] + -s[0] * 1 / 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[2] * 1 + a[2] + -s[1] * 3 / 2 + s[0] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 + s[1]),
            Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 + s[1]),
            Interval::interval_lower(s[4] + l[3] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + a[0] * 1 / 2 + -s[2] * 3 / 2 + -l[3] * 1 + -l[0] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
            Interval::interval_lower(
                a[4] + l[3] + a[2] + -l[2] * 1 + -a[3] * 2 + a[1] * 2 + -s[2] * 2 + -l[1] * 2,
            ),
            Interval::interval_lower(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (l[3] * 2
            + -a[3] * 2
            + a[2] * 2
            + a[1] * 2
            + -l[2] * 2
            + -s[2] * 1
            + -s[0] * 1
            + -l[1] * 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
            Interval::interval_lower(
                a[4] + l[3] * 3 / 2 + -a[3] * 5 / 2 + a[1] * 5 / 2 + -s[0] * 1 + -l[1] * 5 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (l[3] == l[2])
            || (l[3] * 1 / 2 + -a[3] * 1 / 2 + -a[1] * 1 / 2 + s[2] + l[1] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -l[1] * 1 + -s[1] * 1 + -l[2] * 1
                <= RealNumRep::new(0, 1))
            || (l[3] * 3 / 2 + -a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2
                <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2])
        || (l[3] + -a[3] * 1 + a[2] + a[1] + -l[1] * 1 + -s[1] * 1 + -l[2] * 1
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                a[4] + l[3] * 3 / 2 + -a[3] * 5 / 2 + a[1] * 5 / 2 + -s[0] * 1 + -l[1] * 5 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] * 3 / 2 + -a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (l[3] * 2 + -a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (l[3] * 2 + -a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1
                <= RealNumRep::new(-5, 1))
    );
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
            Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[1] + s[3] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
    );
    if !((l[1] == l[0]) || (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[4] + a[1] + -s[2] * 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-a[2] * 2 + l[2] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1))
            || (-s[4] * 2 + a[2] * 2 + -l[2] * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[4] + -a[3] * 1 + -a[2] * 1 + s[1] + l[2],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + l[3] + -a[3] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
            || (s[4] + l[3] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (!(-a[2] * 2 + l[2] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1)))
            || (-s[4] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2]) || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                a[4] + l[3] * 3 / 2 + -a[3] * 5 / 2 + a[1] * 5 / 2 + -s[0] * 1 + -l[1] * 5 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[3] + a[0] * 2 + -s[1] * 3 + -l[3] * 1 + -l[0] * 2),
            Interval::interval_upper(
                -a[2] * 1 + l[2] + a[3] + a[0] + -s[1] * 1 + -l[3] * 1 + -l[0] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 + s[1]),
            Interval::interval_lower(
                a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(
                a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 / 2 + a[3] * 1 / 2 + -a[1] * 1 / 2 + -s[2] * 1 + s[0] + l[1] * 1 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (!(RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]))
            || (a[3] * 1 / 2 + -a[1] * 3 / 2 + s[0] + l[1] * 3 / 2 + -l[2] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[3] * 3 / 2 + -s[4] * 1 + a[3] * 3 / 2 + -a[1] * 3 / 2 + s[0] + l[1] * 3 / 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(a[4] + l[3] + -a[3] * 2 + a[1] * 2 + -s[0] * 1 + -l[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
            Interval::interval_lower(RealNumRep::new(10, 1) + -s[4] * 1 + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (-s[4] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
            Interval::interval_lower(RealNumRep::new(10, 1) + -s[4] * 1 + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -s[4] * 2 / 3 + -l[2] * 1 + a[2] + -a[0] * 1 / 3 + l[0] * 1 / 3,
            ),
            Interval::interval_lower(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-l[3] * 1 + -s[4] * 1 + a[3] + -a[2] * 1 + s[2] + l[2] <= RealNumRep::new(0, 1))
    );
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + a[2] + -l[2] * 1),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(-s[4] * 1 / 3 + a[1] + -s[1] * 2 / 3 + -l[1] * 1),
            Interval::interval_upper(s[4] + l[2] * 2 + -a[2] * 2 + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[3] * 2 / 3 + s[0] * 1 / 3 + l[2] <= RealNumRep::new(-5, 1))
            || (-a[2] * 2 + a[1] + s[3] + -l[1] * 1 + l[2] * 2 <= RealNumRep::new(-10, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + s[2] * 3 / 2 + -s[1] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_upper(a[4] + -a[3] * 1 + a[1] + -s[2] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(
                a[3] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2 + -l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                RealNumRep::new(20, 3) + a[4] + l[3] * 1 / 3 + -a[3] * 4 / 3 + s[0] * 1 / 3,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + l[3] + a[2] + -l[2] * 1 + -a[3] * 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(15, 2)
                    + a[4]
                    + l[3] * 1 / 2
                    + -l[1] * 1 / 2
                    + a[1] * 1 / 2
                    + -a[3] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[1] * 1 + -l[2] * 1 + l[0]
                <= RealNumRep::new(0, 1))
            || (l[3] + -a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[1] * 1 + -l[2] * 1 + l[0]
                <= RealNumRep::new(0, 1))
            || (l[3] + -a[3] * 1 + a[1] + -a[0] * 2 + s[1] * 2 + -l[1] * 1 + l[0] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 3 + s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] + -s[4] * 1 + -a[3] * 1 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1
                <= RealNumRep::new(0, 1))
            || (l[3] + -a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -s[4] * 1 + -a[3] * 1 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1
                <= RealNumRep::new(0, 1))
            || (l[3] * 2 + -a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 2
                + -a[3] * 2
                + a[2] * 2
                + a[1] * 2
                + -l[2] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                <= RealNumRep::new(0, 1))
            || (l[3] + -a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 2
                + -a[3] * 2
                + a[2] * 2
                + a[1] * 2
                + -l[2] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                <= RealNumRep::new(0, 1))
            || (l[3] * 2 + -a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-l[3] * 1 + a[3] + -a[1] * 1 + -s[3] * 2 + s[1] * 2 + l[1]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[3] * 2 + a[3] * 2 + -a[1] * 2 + -s[3] * 2 + s[0] * 2 + l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-a[2] * 1 + -a[1] * 1 + s[3] + l[2] + s[0] + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 1 / 3 + s[0] * 1 / 3 <= RealNumRep::new(-5, 1))
            || (-s[4] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(-5, 1))
            || (-s[4] * 1 / 2 + a[1] * 1 / 2 + -l[1] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(-s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2 + -l[1] * 1),
            Interval::interval_lower(
                -s[4] * 2 + a[2] * 2 + -l[2] * 2 + a[1] + -s[0] * 1 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + a[2] + -l[2] * 1),
            Interval::interval_lower(-s[4] * 1 / 2 + a[1] + -s[0] * 1 / 2 + -l[1] * 1),
            Interval::interval_lower(
                -s[4] * 2 + a[2] * 2 + -l[2] * 2 + a[1] + -s[0] * 1 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 + s[1]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2),
            Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 2 + s[0]),
            Interval::interval_lower(
                a[3] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2 + -l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 3 / 2 + -l[1] * 1 / 2 + a[1] * 1 / 2,
            ),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(-s[4] * 3 / 4 + -l[2] * 1 + a[2] + -s[0] * 1 / 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -a[3] * 1),
        Interval::interval_upper(RealNumRep::new(-20, 1) + a[4] + -l[3] * 1 + -s[0] * 1),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -l[3] * 1 + l[1] + -a[1] * 1),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -l[3] * 1 + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-s[4] * 1 + -a[1] * 1 + s[2] * 2 + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + -a[3] * 2 + a[2] * 2 + s[3] + -s[2] * 1 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    if !((a[4] + l[3] + -a[3] * 2 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[0] + -a[3] * 2 + a[2] * 3 + -a[0] * 1 + -l[2] * 3 + l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((a[4] + l[3] + -a[3] * 2 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 3 + a[2] * 4 + -s[0] * 1 + -l[2] * 4 + l[3] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 3 + -l[2] * 1 + a[2] + -s[1] * 2 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                a[4] + l[3] * 3 / 2 + -a[3] * 5 / 2 + a[1] * 5 / 2 + -s[0] * 1 + -l[1] * 5 / 2,
            ),
            Interval::interval_lower(
                -a[2] * 2 + l[2] * 2 + a[3] * 2 + -a[1] * 1 + s[0] + l[1] + -l[3] * 2,
            ),
            Interval::interval_upper(
                a[4] + -l[3] * 3
                    + -a[2] * 3
                    + l[2] * 3
                    + a[3] * 2
                    + -a[1] * 2
                    + s[0] * 2
                    + l[1] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
            Interval::interval_lower(
                a[3] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2 + -l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(a[4] + l[3] + -a[3] * 2 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1)))
        || (RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + l[3] * 4 + -a[3] * 5 + a[2] * 5 + -s[0] * 1 + -l[2] * 5,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-l[3] * 2 + -s[4] * 1 + a[3] * 2 + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2
                <= RealNumRep::new(0, 1))
            || (-l[3] * 3 + -s[4] * 1 + a[3] * 3 + -a[2] * 3 + s[0] + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 3 + -a[3] * 3 + a[2] * 3 + s[3] + -s[1] * 1 + -l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-l[3] * 1 + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2
                <= RealNumRep::new(-5, 1))
            || (-l[3] * 2 + a[3] * 2 + -a[2] * 3 + s[0] + l[2] * 3 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[0] + l[2] <= RealNumRep::new(-15, 1))
            || (-a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(-10, 1))
    );
    if !((l[2] == l[1]) || (RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1])) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-10, 1) + -l[2] * 1 + a[2] + -s[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 + s[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 / 2 + a[3] * 1 / 2 + -a[1] * 3 / 2 + s[0] + l[1] * 3 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
            || (-l[3] * 1 / 2 + -s[4] * 1 + a[3] * 1 / 2 + -a[1] * 1 / 2 + s[2] + l[1] * 1 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!((l[3] == l[2]) || (l[3] + -a[3] * 1 + a[1] + -l[1] * 1 <= RealNumRep::new(-10, 1)));
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[1] * 1 + -l[2] * 1 + l[0]
                <= RealNumRep::new(0, 1))
            || (l[3] * 3 / 2 + -a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + l[3] * 3 / 2 + -a[3] * 5 / 2 + a[1] * 5 / 2 + -s[0] * 1 + -l[1] * 5 / 2,
            ),
            Interval::interval_lower(-a[3] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + l[3]),
            Interval::interval_upper(
                -a[2] * 2 + l[2] * 2 + a[3] * 2 + -a[1] * 1 + s[0] + l[1] + -l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 + s[1]),
            Interval::interval_lower(s[4] * 1 / 2 + a[1] + -s[3] * 3 / 2 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (l[3] + -a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
    );
    if !(RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[3] * 2 + a[2] * 3 + -s[1] * 1 + -l[2] * 3 + l[3] * 2),
            Interval::new(None, None),
            Interval::interval_lower(
                a[4] + l[3] * 2 + -a[3] * 3 + a[2] * 3 + -a[1] * 1 + l[1] + -l[2] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= -s[4] * 2 + a[2] * 3 + -a[0] * 1 + -l[2] * 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
            Interval::interval_lower(
                -s[4] * 1 / 3 + a[1] + -a[0] * 2 / 3 + -l[1] * 1 + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
            Interval::interval_lower(
                a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (-s[4] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(RealNumRep::new(10, 1) + -s[4] * 1 + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
            Interval::interval_lower(-s[4] * 3 / 4 + -l[2] * 1 + a[2] + -s[0] * 1 / 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] * 3 / 2 + -a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (l[3] + -s[4] * 1 + -a[3] * 1 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[1] * 1 + -l[2] * 1 + l[0]
                <= RealNumRep::new(0, 1))
            || (l[3] * 3 + -a[3] * 3 + a[1] * 3 + -a[0] * 2 + s[3] * 2 + -l[1] * 3 + l[0] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[1] * 1 + -l[2] * 1 + l[0]
                <= RealNumRep::new(0, 1))
            || (l[3] * 2 + -a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + -a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2
                <= RealNumRep::new(0, 1))
            || (l[3] * 2 + -a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1
                <= RealNumRep::new(-5, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[3] + -s[1] * 2 + s[0] + -l[3] * 1),
            Interval::interval_upper(
                -a[2] * 1 + l[2] + a[3] + -s[1] * 1 / 2 + s[0] * 1 / 2 + -l[3] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2),
            Interval::interval_lower(
                a[3] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2 + -l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(a[1] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (l[3] + -s[4] * 1 + -a[3] * 1 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                a[4] + l[3] * 3 / 2 + -a[3] * 5 / 2 + a[1] * 5 / 2 + -s[0] * 1 + -l[1] * 5 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (l[3] + -a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[1] * 1 + -l[2] * 1 + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                a[4] + l[3] * 3 / 2 + -a[3] * 5 / 2 + a[1] * 5 / 2 + -s[0] * 1 + -l[1] * 5 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -l[1] * 1 + -s[1] * 1 + -l[2] * 1
                <= RealNumRep::new(0, 1))
            || (l[3] * 3 + -a[3] * 3 + a[1] * 3 + s[3] * 2 + -s[1] * 2 + -l[1] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -l[1] * 1 + -s[1] * 1 + -l[2] * 1
                <= RealNumRep::new(0, 1))
            || (l[3] * 2 + -a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2])
        || (l[3] * 2 + -a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1
            <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                a[4] + l[3] * 3 / 2 + -a[3] * 5 / 2 + a[1] * 5 / 2 + -s[0] * 1 + -l[1] * 5 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 3 + s[1] * 2),
            Interval::interval_lower(a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= -s[4] * 2 + a[2] * 3 + -a[0] * 1 + -l[2] * 3 + l[0]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 2 + a[2] + -l[2] * 1),
            Interval::interval_lower(
                -s[4] * 1 + a[2] + -l[2] * 1 + a[1] + -a[0] * 1 + -l[1] * 1 + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -l[2] * 1 + a[1] + -s[3] * 1 + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2),
            Interval::interval_lower(s[4] * 1 / 2 + a[1] + -s[3] * 3 / 2 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[3] * 1 + s[1]),
            Interval::interval_lower(
                a[3] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2 + -l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -l[1] * 2 + a[1] * 2 + -s[3] * 3),
            Interval::interval_lower(
                a[4] + -a[3] * 1 + -a[2] * 1 / 2 + l[2] * 1 / 2 + s[0] * 1 / 2,
            ),
            Interval::interval_lower(-l[1] * 1 + a[1] + a[3] + -s[3] * 2 + -l[3] * 1),
            Interval::interval_lower(a[3] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1]))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-10, 1) + l[1] + -a[1] * 1 + a[3] + -l[3] * 1),
            Interval::interval_upper(RealNumRep::new(-5, 1) + -a[2] * 1 + l[2] + a[3] + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[3] + -s[1] * 1 + -l[3] * 1),
            Interval::interval_upper(RealNumRep::new(-5, 1) + -a[2] * 1 + l[2] + a[3] + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2],
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[4]
                    + -a[3] * 1
                    + -a[2] * 1 / 2
                    + s[0] * 1 / 2
                    + l[2] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 / 2 + a[2] * 1 / 2 + -l[2] * 1 / 2 + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + -s[2] * 1 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1]))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + l[1] + -a[1] * 1 + -l[2] * 1 + a[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((a[4] + l[3] + -a[3] * 2 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 2 + a[2] * 3 + -s[1] * 1 + -l[2] * 3 + l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[3] * 2 + a[2] * 3 + -s[0] * 1 + -l[2] * 3 + l[3] * 2),
            Interval::interval_upper(-a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
            Interval::interval_lower(RealNumRep::new(5, 1) + -s[4] * 1 + -l[2] * 1 + a[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[4] * 1 + -l[3] * 1 + a[3] + -l[2] * 1 + a[2] + -s[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[3] * 1 / 2 + s[1] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
    );
    if !((a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
        || (a[4] + l[3] * 1 / 2 + -a[3] * 3 / 2 + a[1] * 1 / 2 + -l[0] * 1 / 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 2 + s[0]),
            Interval::interval_lower(-l[1] * 1 + a[1] + a[3] + -s[3] * 2 + -l[3] * 1),
            Interval::interval_lower(a[3] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 2 + s[0]),
            Interval::interval_lower(a[4] + -l[3] * 1 + -l[1] * 2 + a[1] * 2 + -s[3] * 3),
            Interval::interval_lower(-l[1] * 1 + a[1] + a[3] + -s[3] * 2 + -l[3] * 1),
            Interval::interval_lower(a[3] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-15, 1) + a[3] + -s[0] * 1 + -l[3] * 1),
            Interval::interval_upper(RealNumRep::new(-5, 1) + -a[2] * 1 + l[2] + a[3] + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2],
            ),
            Interval::interval_lower(-s[4] * 1 / 2 + -l[2] * 1 + a[2] + -s[2] * 1 / 2),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 1 / 2 + -l[2] * 1 + a[2] + -s[2] * 1 / 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                l[1] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 / 2 + -l[2] * 1 + a[2],
            ),
            Interval::interval_lower(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2],
            ),
            Interval::interval_lower(
                l[1] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 / 2 + -l[2] * 1 + a[2],
            ),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2],
            ),
            Interval::interval_lower(
                -s[4] * 2 / 3 + -l[2] * 1 + a[2] + -a[0] * 1 / 3 + l[0] * 1 / 3,
            ),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                -s[4] * 1 + -l[3] * 1 + a[3] + -l[2] * 1 + a[2] + -a[1] * 1 + l[1],
            ),
            Interval::interval_upper(
                -s[4] * 2 + -l[3] * 2 + a[3] * 2 + -l[2] * 1 + a[2] + -s[0] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1)),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + -l[3] * 1 + -a[2] * 2 + s[0] + l[2] * 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(15, 1)
                    + a[4]
                    + -l[3] * 1
                    + -l[1] * 2
                    + a[1] * 2
                    + -a[2] * 3
                    + l[2] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-l[3] * 2 + a[3] * 2 + -a[2] * 2 + -s[3] * 1 + s[0] + l[2] * 2
                <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1)
                <= -l[3] * 1 + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-l[3] * 1 + a[3] + -a[2] * 1 + a[1] + -s[3] * 1 + -l[1] * 1 + l[2]
                <= RealNumRep::new(0, 1))
            || (-l[3] * 2 + a[3] * 2 + -a[2] * 2 + -s[3] * 1 + s[0] + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 3 / 4 + -l[2] * 1 + a[2] + -s[0] * 1 / 4),
            Interval::interval_lower(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[3] * 1 + -s[4] * 1 + a[3] <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[4] * 2 / 3 + -l[2] * 1 + a[2] + -s[1] * 1 / 3),
            Interval::interval_lower(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2],
            ),
            Interval::interval_lower(RealNumRep::new(5, 1) + -s[4] * 1 + -l[2] * 1 + a[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-s[4] * 1 / 2 + -l[2] * 1 + a[2] + -s[0] * 1 / 2),
            Interval::interval_upper(
                l[1] * 2 / 3 + -a[1] * 2 / 3 + -s[4] * 1 / 3 + -l[2] * 1 + a[2],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (RealNumRep::new(0, 1) <= l[3] + -a[3] * 1 + a[2] + -l[2] * 1 + s[2] + -s[0] * 1))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[3] * 1 + -s[3] * 2 + s[0]),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1),
            Interval::interval_lower(
                a[3] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2 + -l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + s[2] * 4 / 3 + -s[0] * 1 / 3 <= RealNumRep::new(-5, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + -l[2] * 1 + a[2] + -s[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2],
            ),
            Interval::interval_lower(-s[4] * 3 / 4 + -l[2] * 1 + a[2] + -s[0] * 1 / 4),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + -a[0] * 1 + -l[2] * 1 + s[1] + l[0]
                <= RealNumRep::new(-5, 1))
            || (l[3] + -a[3] * 1 + -a[0] * 2 + s[1] * 3 + l[0] * 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + -a[0] * 1 / 2 + s[2] * 3 / 2 + l[0] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(-5, 1))
            || (l[3] + -a[3] * 1 + a[2] + -l[2] * 1 + s[1] * 1 / 2 + -s[0] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    if !((l[2] == l[1])
        || (RealNumRep::new(0, 1) <= -a[1] * 1 + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[2] * 1 + a[2] + -s[3] * 2 / 3 + -s[0] * 1 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[3] * 1 + -s[4] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2],
            ),
            Interval::interval_lower(-s[4] * 2 / 3 + -l[2] * 1 + a[2] + -s[1] * 1 / 3),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            l[1] * 1 / 2 + -a[1] * 1 / 2 + -l[2] * 1 + a[2] + -s[3] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(!(-a[4] * 1 + l[3] + s[4] >= RealNumRep::new(0, 1)));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[4] + -l[3] * 1 + -s[4] * 1)]);
    ret = ret.intersection(&tmp);
    assert!(l[3] + -a[3] * 1 + s[3] <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_s_4_t_5_l_4(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 4);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(!(a[3] + -l[3] * 1 <= s[3]));
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3])]);
    ret = ret.intersection(&tmp);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])));
    assert!((l[2] == l[1]) || (-a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(-5, 1)));
    assert!((!(RealNumRep::new(0, 1) <= -l[3] * 1 + l[2])) || (l[3] == l[2]));
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -l[3] * 1 + a[3] + -a[1] * 1 + s[1] + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[3] == l[2]) || (l[3] + s[3] + -a[3] * 1 <= RealNumRep::new(-5, 1)));
    assert!(
        (-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 <= RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(-5, 1)));
    assert!((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)));
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 + a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]
                <= RealNumRep::new(0, 1))
    );
    assert!((l[3] == l[2]) || (l[3] + -a[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(-5, 1)));
    assert!(-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(0, 1));
    assert!(
        (l[2] == l[1])
            || (-l[3] * 1 + a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]
                <= RealNumRep::new(0, 1))
            || (-l[3] * 1 + -s[3] * 1 + a[3] + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]
                <= RealNumRep::new(0, 1))
    );
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + s[3] + -a[3] * 2 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (s[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-l[3] * 1 + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (s[3] + -a[2] * 2 + a[1] * 2 + -s[2] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(s[2] * 4 + -s[0] * 3)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1))
    );
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[1] + l[1]))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -l[3] * 2 + a[3] * 2 + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 3 + a[3] * 3 + -a[2] * 3 + a[1] + -l[1] * 1 + l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(s[3] * 2 + -s[0] * 1),
            Interval::interval_upper(s[3] * 3 + -a[1] * 2 + l[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-s[3] * 1 + a[2] + -a[1] * 1 + s[1] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-10, 1) + -l[3] * 2 + a[3] * 2 + -a[2] * 1 + l[2],
            ),
            Interval::interval_upper(
                RealNumRep::new(-5, 1)
                    + -l[3] * 3 / 2
                    + a[3] * 3 / 2
                    + -a[1] * 1 / 2
                    + l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 3 + -a[1] * 3 + s[2] + l[1] * 3 + -l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (l[3] == l[2])
            || (RealNumRep::new(0, 1)
                <= -l[3] * 1 + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2)
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + -a[0] * 1 + s[2] + -l[1] * 2 + l[2] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[2] + -s[1] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[3] * 1 + a[3]),
        Interval::interval_lower(RealNumRep::new(5, 1) + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[3] == l[2]) || (-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 1 + s[3] + a[3] + -a[1] * 1 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[3] + a[2] * 2 + -a[1] * 2 + l[1] * 2 + -l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[3] * 1 + a[3]),
        Interval::interval_lower(s[2] * 3 / 2 + -s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (l[3] + s[3] + -a[3] * 1 + a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + s[1] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1
                <= RealNumRep::new(0, 1))
            || (!(l[2] == l[1]))
    );
    assert!(
        (l[3] == l[2])
            || (!(l[2] == l[1]))
            || (l[3] + -a[3] * 1 + a[2] + -a[0] * 1 + s[1] + -l[1] * 1 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + -a[1] * 1 + l[1] + s[2] + -l[2] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + s[2] + -s[0] * 1 + -l[1] * 3 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
    );
    if !(a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 1 + a[3] + s[2] + -s[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(5, 1) + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[3] * 1 + a[3]),
        Interval::interval_lower(RealNumRep::new(10, 1) + s[1]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1))
    );
    if !(-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 1 + s[3] + a[3] + -s[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -l[3] * 2 + a[3] * 2 + -a[2] * 2 + s[1] + l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (s[3] + -a[2] * 3 + a[1] * 3 + -a[0] * 1 + -l[1] * 3 + l[2] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-10, 1)));
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (s[3] * 1 / 3 + -a[1] * 1 + s[0] * 2 / 3 + l[1] <= RealNumRep::new(-5, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-20, 1) + a[1] * 4 + -s[0] * 3 + -l[1] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + a[1] + -l[1] * 1 <= RealNumRep::new(-5, 1))
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    if !((l[1] == l[0]) || (!(l[2] == l[1]))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] * 2 + -a[1] * 2 + s[1]),
            Interval::interval_lower(-l[3] * 1 + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[1] + l[2] <= RealNumRep::new(-10, 1)));
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 2 + s[3] + a[3] * 2 + -a[2] * 2 + l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (s[3] + -a[2] * 1 + l[2] + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[3] * 1 + a[3]),
        Interval::interval_lower(-a[0] * 1 / 2 + s[2] * 3 / 2 + l[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + -a[3] * 2 + a[1] * 2 + -a[0] * 2 + s[2] * 2 + -l[1] * 2 + l[0] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[0]
                <= RealNumRep::new(0, 1))
            || (l[3] * 3 + s[3] * 2 + -a[3] * 3 + a[1] * 3 + -a[0] * 2 + -l[1] * 3 + l[0] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[3] * 1 + a[3]),
            Interval::interval_lower(RealNumRep::new(5, 1) + -a[1] * 1 + s[2] * 2 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-l[3] * 1 + a[3] + -a[2] * 2 + s[1] + l[2] * 2 <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-a[0] * 2 + s[1] * 3 + l[0] * 2),
        Interval::interval_lower(a[2] + -a[0] * 1 + -l[2] * 1 + s[1] + l[0]),
        Interval::interval_lower(-l[3] * 1 + a[3]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 2 + s[0] + l[1] * 2 + -l[2] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + s[3] + -a[3] * 2 + a[2] * 2 + -s[2] * 1 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(RealNumRep::new(5, 1) + a[2] + -l[2] * 1),
        Interval::interval_lower(-l[3] * 1 + a[3]),
        Interval::interval_lower(RealNumRep::new(10, 1) + a[1] + -l[1] * 1),
        Interval::interval_lower(RealNumRep::new(15, 1) + s[0]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[3] * 1 + a[3]),
        Interval::interval_lower(s[2] * 4 / 3 + -s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= -l[3] * 1 + l[2]))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -a[2] * 1 + s[2])]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + a[1] + -a[0] * 1 + s[1] + -l[1] * 1 + l[2] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + -a[0] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 / 2 + a[3] * 1 / 2 + -a[1] * 1 / 2 + -s[2] * 1 + s[0] + l[1] * 1 / 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -l[3] * 2 + a[3] * 2 + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2,
            ),
            Interval::interval_lower(-l[3] * 3 + a[3] * 3 + -a[2] * 3 + s[0] + l[2] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-l[3] * 2 + -s[3] * 2 + a[3] * 2 + -a[1] * 2 + s[0] * 2 + l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -l[3] * 1 + a[3] + -a[2] * 1 + s[2] + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-s[3] * 1 + a[2] * 2 + -a[1] * 2 + s[0] + l[1] * 2 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 4 + -a[1] * 4 + a[0] + l[1] * 4 + -l[2] * 4 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(l[2] == l[1]))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] * 3 + -a[1] * 3 + s[0]),
            Interval::interval_lower(-l[3] * 1 + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -l[3] * 3 / 2 + a[3] * 3 / 2 + -a[1] * 3 / 2 + s[0] + l[1] * 3 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (l[3] == l[2])
            || (l[3] * 1 / 2 + -a[3] * 1 / 2 + -a[1] * 1 / 2 + s[2] + l[1] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[1] + l[1]))
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + -a[0] * 1 + s[1] * 2 + l[2] + l[0] <= RealNumRep::new(-5, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] * 3 + -a[1] * 3 + s[0] + l[1] * 3 + -l[2] * 3),
            Interval::interval_lower(-l[3] * 1 + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -l[2] * 1 + s[2] * 2 + -s[0] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(s[3] * 3 + -s[1] * 2)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-l[3] * 1 + -s[3] * 1 + a[3] + -a[2] * 1 + s[1] + l[2] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (s[3] + -a[2] * 3 + a[1] * 3 + -s[1] * 1 + -l[1] * 3 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (s[3] + -a[2] * 4 + a[1] * 4 + -s[0] * 1 + -l[1] * 4 + l[2] * 4
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -a[1] * 1 + s[2] + l[1] + -l[2] * 1),
            Interval::interval_lower(-l[3] * 1 + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] * 2 + -a[1] * 2 + s[1] + l[1] * 2 + -l[2] * 2),
            Interval::interval_lower(-l[3] * 1 + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[1] + -s[0] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(-10, 1))
            || (-a[2] * 1 + s[0] + l[2] <= RealNumRep::new(-15, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 4 + -a[1] * 4 + s[1] + l[1] * 4 + -l[2] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 5 + -a[1] * 5 + s[0] + l[1] * 5 + -l[2] * 5,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (s[3] * 1 / 2 + -a[2] * 1 + s[1] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= l[3] + -a[3] * 1 + a[2] + -l[2] * 1 + s[2] + -s[0] * 1)
    );
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 / 2 + a[3] * 1 / 2 + -a[1] * 3 / 2 + s[0] + l[1] * 3 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!((l[3] == l[2]) || (l[3] + -a[3] * 1 + s[2] <= RealNumRep::new(-10, 1)));
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-15, 1) + a[2] * 3 + -s[1] * 2 + -l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-l[3] * 1 + -s[3] * 2 + a[3] + -a[1] * 1 + s[1] * 2 + l[1]
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[3] * 1 + a[3]),
            Interval::interval_lower(
                -l[3] * 1 / 2 + a[3] * 1 / 2 + -a[1] * 1 / 2 + s[2] + l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-l[3] * 1 + a[3]),
        Interval::interval_lower(-a[1] * 1 + l[1] + s[2] * 2),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + -a[3] * 2 + a[2] * 2 + -a[0] * 1 + s[2] + -l[2] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 4 + a[3] * 4 + -a[2] * 4 + a[0] + l[2] * 4 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[0]
                <= RealNumRep::new(0, 1))
            || (l[3] + -a[3] * 1 + a[1] + -a[0] * 2 + s[1] * 2 + -l[1] * 1 + l[0] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[0]
                <= RealNumRep::new(0, 1))
            || (l[3] * 2 + s[3] + -a[3] * 2 + a[1] * 2 + -s[0] * 1 + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1
                <= RealNumRep::new(0, 1))
            || (l[3] * 3 + s[3] * 2 + -a[3] * 3 + a[1] * 3 + -s[1] * 2 + -l[1] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + -a[3] * 2 + a[1] * 2 + s[2] * 2 + -s[1] * 2 + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + -a[3] * 2 + a[2] * 2 + s[2] + -s[1] * 1 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 4 + s[3] + -a[3] * 4 + a[2] * 4 + -s[0] * 1 + -l[2] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (!(l[2] == l[1]))
            || (l[3] + -a[3] * 1 + a[2] + s[2] * 1 / 3 + -s[0] * 1 / 3 + -l[1] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 3 + -a[3] * 3 + a[2] * 3 + s[2] + -s[0] * 1 + -l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 3 + s[3] + -a[3] * 3 + a[2] * 3 + -s[1] * 1 + -l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (s[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1] <= RealNumRep::new(-5, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                -l[3] * 3 / 2 + a[3] * 3 / 2 + -a[1] * 3 / 2 + s[2] + l[1] * 3 / 2,
            ),
            Interval::interval_upper(
                -l[3] * 2 + a[3] * 2 + -a[2] * 1 + -a[1] * 2 + l[2] + s[2] * 2 + l[1] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-l[3] * 1 + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2
                <= RealNumRep::new(-5, 1))
            || (-l[3] * 2 + a[3] * 2 + -a[2] * 3 + s[0] + l[2] * 3 <= RealNumRep::new(-5, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + -l[3] * 2 + a[3] * 2 + -a[2] * 1 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 4 + a[3] * 4 + -a[2] * 4 + s[1] + l[2] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (l[3] + -a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 2 + a[3] * 2 + -a[1] * 2 + a[0] + l[1] * 2 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-10, 1) + -l[3] * 2 + a[3] * 2 + -s[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[0]
                <= RealNumRep::new(0, 1))
            || (l[3] * 3 / 2 + -a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 3 / 2 + -a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (l[3] * 2 + -a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + s[3] + -a[3] * 2 + a[1] * 2 + -s[0] * 1 + -l[1] * 2
                <= RealNumRep::new(0, 1))
            || (l[3] * 2 + -a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (l[3] * 3 / 2 + -a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2
                <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2])
        || (l[3] * 3 / 2 + -a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[3] + -a[3] * 1 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1
                <= RealNumRep::new(0, 1))
            || (l[3] * 3 / 2 + -a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 1 / 2 + -a[3] * 1 / 2 + a[1] * 1 / 2 + -l[1] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + s[3] + -a[3] * 2 + a[1] * 2 + -s[0] * 1 + -l[1] * 2
                <= RealNumRep::new(0, 1))
            || (l[3] * 2
                + -a[3] * 2
                + a[2] * 2
                + a[1] * 2
                + -l[2] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1
                <= RealNumRep::new(0, 1))
            || (l[3] * 2 + s[3] + -a[3] * 2 + a[1] * 2 + -s[0] * 1 + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2])
        || (l[3] * 2 + s[3] + -a[3] * 2 + a[1] * 2 + -s[0] * 1 + -l[1] * 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[3] + -a[3] * 1 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (l[3] * 2
                + -a[3] * 2
                + a[2] * 2
                + a[1] * 2
                + -l[2] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2])
        || (l[3] + -a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[3] + -a[3] * 1 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(s[1] * 2 + -s[0] * 1),
        Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 1 / 2 + -s[0] * 1 / 2),
        Interval::interval_lower(-l[3] * 1 + a[3]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (s[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2 <= RealNumRep::new(-10, 1))
            || (s[3] * 2 / 3 + -a[2] * 1 + s[0] * 1 / 3 + l[2] <= RealNumRep::new(-5, 1))
    );
    if !(-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[3] * 1 + s[3] + a[3] + -a[1] * 1 + l[1]),
            Interval::interval_upper(-l[3] * 1 + s[3] * 1 / 2 + a[3] + -s[0] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] * 2 + -a[3] * 2 + a[2] * 2 + s[1] + -s[0] * 1 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + -l[3] * 1 + a[3] + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (l[3] * 2
            + -a[3] * 2
            + a[2] * 2
            + a[1] * 2
            + -l[2] * 2
            + -s[2] * 1
            + -s[0] * 1
            + -l[1] * 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 5 / 2 + a[3] * 5 / 2 + -a[1] * 5 / 2 + s[0] + l[1] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (l[3] + -a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 5 / 2 + a[3] * 5 / 2 + -a[1] * 5 / 2 + s[0] + l[1] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (l[3] * 2 + -a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1
            <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 5 / 2 + a[3] * 5 / 2 + -a[1] * 5 / 2 + s[0] + l[1] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (l[3] * 2 + -a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + -a[0] * 1 + s[1] + -l[2] * 1 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[0] * 1
                <= RealNumRep::new(0, 1))
            || (-l[3] * 2 + -s[3] * 1 + a[3] * 2 + -a[2] * 2 + s[0] + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (!(RealNumRep::new(0, 1)
                <= -l[3] * 1 + a[3] + -a[2] * 1 + -a[1] * 1 + s[0] + l[1] + l[2]))
            || (RealNumRep::new(0, 1) <= s[3] * 1 / 2 + -a[1] * 1 + s[0] * 1 / 2 + l[1])
    );
    assert!(
        (l[3] == l[2])
            || (l[3] * 3 + s[3] + -a[3] * 3 + a[2] * 3 + -a[0] * 1 + -l[2] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 3 + a[3] * 3 + -a[2] * 3 + s[2] + l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 5 + a[3] * 5 + -a[2] * 5 + s[0] + l[2] * 5,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[0]
                <= RealNumRep::new(0, 1))
            || (l[3] + -a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2]) || (-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 5 / 2 + a[3] * 5 / 2 + -a[1] * 5 / 2 + s[0] + l[1] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (l[3] + -a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 2 + a[3] * 2 + -a[1] * 2 + s[1] + l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (l[3] + -a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -l[3] * 5 / 2 + a[3] * 5 / 2 + -a[1] * 5 / 2 + s[0] + l[1] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (l[3] + -a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-10, 1) + a[2] + a[1] * 2 + -l[2] * 1 + -s[0] * 2 + -l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(-10, 1))
            || (l[3] + -a[3] * 1 + s[1] <= RealNumRep::new(-15, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + -a[0] * 2 + s[1] * 3 + l[0] * 2 <= RealNumRep::new(-5, 1))
            || (l[3] + -a[3] * 1 + a[2] + -a[0] * 1 + -l[2] * 1 + s[1] + l[0]
                <= RealNumRep::new(-5, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-20, 3) + -l[3] * 4 / 3 + a[3] * 4 / 3 + -s[0] * 1 / 3,
            ),
            Interval::interval_upper(
                RealNumRep::new(-10, 1) + -l[3] * 2 + a[3] * 2 + -a[2] * 1 + l[2],
            ),
            Interval::interval_upper(
                RealNumRep::new(-15, 2)
                    + -l[3] * 3 / 2
                    + a[3] * 3 / 2
                    + -a[1] * 1 / 2
                    + l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + -l[3] * 1 + a[3] + a[2] + -s[1] * 1 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-5, 1) + -l[3] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + -l[2] * 1,
            ),
            Interval::interval_upper(
                RealNumRep::new(-5, 2)
                    + -l[3] * 1
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[2] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + -a[1] * 1 + l[1] + s[2] * 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + -a[0] * 1 / 2 + s[2] * 3 / 2 + l[0] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + s[2] * 4 / 3 + -s[0] * 1 / 3 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(-5, 1))
            || (l[3] + -a[3] * 1 + a[2] + -l[2] * 1 + s[1] * 1 / 2 + -s[0] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(-10, 1))
            || (l[3] + -a[3] * 1 + a[1] + -l[1] * 1 <= RealNumRep::new(-15, 1))
            || (l[3] + -a[3] * 1 + s[0] <= RealNumRep::new(-20, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + s[2] * 3 / 2 + -s[1] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-15, 1) + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3,
            ),
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[2] * 2 + -s[0] * 1 + -l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-10, 1) + -l[3] * 2 + a[3] * 2 + -a[2] * 1 + l[2],
            ),
            Interval::interval_upper(
                RealNumRep::new(-15, 2) + -l[3] * 3 / 2 + a[3] * 3 / 2 + -s[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(-l[3] * 1 + a[4])]);
    ret = ret.intersection(&tmp);
    assert!(-a[2] * 1 + l[2] + s[2] <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_sim_s_4_t_5_l_4(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
    C: RealNumRep,
    B: RealNumRep,
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 4);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3])]);
    ret = ret.intersection(&tmp);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])));
    assert!(a[1] + -s[2] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[1] + -a[0] * 1 + -C * 1 + -l[1] * 1 + -B * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(
        (l[2] == l[1])
            || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1))
    );
    assert!(a[1] + -C * 2 + -s[0] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[1] + -C * 1 + -s[1] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] + B <= RealNumRep::new(0, 1)));
    assert!((l[1] == l[0]) || (-a[1] * 1 + C + s[0] + l[1] + B <= RealNumRep::new(0, 1)));
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1)
            || (a[1] + -s[3] * 1 + C + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[1] + -s[3] * 1 + C + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1))
            || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (RealNumRep::new(0, 1) <= -a[3] * 1 + a[1] + C * 2 + -l[1] * 1 + l[2])
            || (!(l[3] == l[2]))
    );
    assert!(
        (l[1] == l[0])
            || (l[3] == l[2])
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1)
            || (-a[3] * 1 + a[1] + l[3] + C * 2 + -l[1] * 1 == RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 1 + -C * 1 + s[2] + l[1] + B <= RealNumRep::new(0, 1)));
    assert!(
        (l[1] == l[0])
            || (l[2] == l[1])
            || (-a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] == RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C) || (!(l[2] == l[1])));
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[3] + -C * 2 + l[1] + B <= RealNumRep::new(0, 1)));
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + C * 3 + -l[1] * 1 + -B * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1))
            || (-a[3] * 1 + a[2] + -l[2] * 1 + C + l[3] + B == RealNumRep::new(0, 1))
    );
    if !(!(RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(a[2] + -l[2] * 1 + C),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + C * 2 + -l[1] * 1 + -B * 1),
            Interval::interval_lower(a[3] + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1]) || (a[3] + -a[2] * 1 + -l[3] * 1 + -C * 1 + l[2] <= RealNumRep::new(0, 1))
    );
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[2] + l[2] + B <= RealNumRep::new(0, 1)));
    assert!((l[3] == l[2]) || (-a[3] * 1 + s[3] + l[3] + B <= RealNumRep::new(0, 1)));
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + C + -l[3] * 1 + -B * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(a[2] + -s[3] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)));
    assert!(-C * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(
        (l[3] == l[2])
            || (!(l[1] == l[0]))
            || (-a[3] * 1 + a[1] + C * 2 + l[3] + -l[0] * 1 <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1)
    );
    assert!(
        (-a[3] * 1 + a[2] + -l[2] * 1 + C + l[3] + B == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1))
    );
    assert!(
        (l[2] == l[1])
            || (!(l[1] == l[0]))
            || (-a[2] * 1 + a[1] + C + l[2] + -l[0] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (-a[2] * 1 + a[1] + -l[1] * 1 + C + l[2] + B == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= a[2] + -a[1] * 1 + -C * 1 + l[1] + -l[2] * 1 + -B * 1))
    );
    assert!(a[2] + -C * 2 + -s[1] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[2] + -a[0] * 1 + -C * 2 + -l[2] * 1 + -B * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + -C * 1 + s[1] + l[0] <= RealNumRep::new(0, 1));
    assert!((l[2] == l[1]) || (-a[2] * 1 + C + s[1] + l[2] + B <= RealNumRep::new(0, 1)));
    let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -l[3] * 1 + -B * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[3] + -l[3] * 1),
        Interval::interval_lower(a[2] + C + -l[2] * 1 + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + C * 2 + s[0] + l[2] + B <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1])
    );
    assert!(
        (l[2] == l[1])
            || (RealNumRep::new(0, 1) <= a[2] + -a[1] * 1 + -C * 1 + l[1] + -l[2] * 1 + -B * 1)
            || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1]))
    );
    assert!(a[2] + -C * 1 + -s[2] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)));
    assert!(a[2] + -C * 3 + -s[0] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(
        (l[3] == l[2])
            || (!(a[3] + -a[2] * 1 + -l[3] * 1 + -C * 1 + l[2] <= RealNumRep::new(0, 1)))
            || (-a[3] * 1 + a[2] + C + -l[2] * 1 + l[3] == RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + C * 2 + -l[2] * 1 + -B * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (-a[2] * 1 + -C * 1 + s[3] + l[2] + B <= RealNumRep::new(0, 1)));
    assert!((l[3] == l[2]) || (-a[3] * 1 + C + s[2] + l[3] + B <= RealNumRep::new(0, 1)));
    assert!(
        (l[3] + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + C * 2 + s[1] + l[3] + B <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1)
    );
    assert!(
        (l[3] == l[2])
            || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1)
            || (-a[3] * 1 + C * 2 + s[1] + l[3] + B <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + C * 3 + s[0] + l[3] + B <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= a[3] + -a[1] * 1 + -C * 2 + l[1] + -l[3] * 1 + -B * 1)
            || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1)
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + C * 3 + s[0] + l[3] + B <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1)
            || (RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1])
    );
    assert!(
        (l[3] == l[2])
            || (RealNumRep::new(0, 1) <= a[3] + -a[1] * 1 + -C * 2 + l[1] + -l[3] * 1 + -B * 1)
            || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1)
            || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1]))
    );
    assert!(a[3] + -C * 1 + -s[3] * 1 + -l[3] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[3] + -C * 4 + -s[0] * 1 + -l[3] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[3] + -C * 2 + -s[2] * 1 + -l[3] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[3] + -C * 3 + -s[1] * 1 + -l[3] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[3] + -a[0] * 1 + -C * 3 + -l[3] * 1 + -B * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(
        (-a[3] * 1 + a[1] + -l[1] * 1 + C * 2 + l[3] + B == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= a[3] + -a[1] * 1 + -C * 2 + l[1] + -l[3] * 1 + -B * 1))
    );
    assert!(
        (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (C + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (C + -s[3] * 1 + s[1] <= RealNumRep::new(0, 1))
    );
    assert!(-a[2] * 1 + l[2] + -C * 1 + s[3] <= RealNumRep::new(0, 1));
    assert!(-C * 2 + s[3] + -s[2] * 1 <= RealNumRep::new(0, 1));
    if !(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(a[2] + -l[2] * 1 + C),
            Interval::interval_lower(C * 3 + s[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[3] + -l[3] * 1),
        Interval::interval_lower(C + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !((RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + -l[1] * 1 + C + l[2])
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(a[1] + -l[1] * 1 + C * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + -l[1] * 1 + C + l[2]))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(a[2] + -l[2] * 1 + C),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (a[1] + -l[1] * 1 + C + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (C * 2 + -s[3] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(-C * 3 + s[3] + -s[1] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[2] + -l[2] * 1 + C * 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[3] + -l[3] * 1),
        Interval::interval_lower(a[2] + -l[2] * 1 + C),
        Interval::interval_lower(C * 2 + s[1]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(-a[0] * 1 + -C * 2 + s[2] + l[0] <= RealNumRep::new(0, 1));
    assert!(-C * 3 + s[2] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-C * 2 + s[2] + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + -C * 3 + s[3] + l[0] <= RealNumRep::new(0, 1));
    assert!(-C * 4 + s[3] + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 5 + s[0])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[0] + C * 4 + -l[0] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 3 + s[2])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 4 + s[1])]);
    ret = ret.intersection(&tmp);
    assert!(B >= RealNumRep::new(5, 1));
    assert!(C >= RealNumRep::new(5, 1));
    assert!(l[0] >= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[4] + -l[3] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[3] + -l[3] * 1 + C)]);
    ret = ret.intersection(&tmp);
    assert!(-a[3] * 1 + l[3] + s[3] <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + l[1] + s[1] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + l[1] + -C * 1 + s[2] <= RealNumRep::new(0, 1));
    assert!(-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[1] + -l[1] * 1 + C * 3)]);
    ret = ret.intersection(&tmp);
    assert!(-a[1] * 1 + l[1] + -C * 2 + s[3] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 2 + s[3])]);
    ret = ret.intersection(&tmp);
    ret
}

pub fn compute_c_t_5_l_5(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 5);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])));
    assert!((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)));
    if !((l[4] == l[3]) || (!(l[3] == l[2]))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -a[3] * 1 + l[2] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 2) + -a[2] * 1 / 2 + s[4] * 1 / 2 + l[2] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[2] * 1 + l[2] + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 1 / 2 + -a[2] * 1 / 2 + l[2] * 1 / 2 + -l[4] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(a[3] + -a[2] * 1 + l[2] + -l[3] * 1),
            Interval::interval_upper(a[3] + -a[2] * 1 + l[2] + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[2] + -s[1] * 1 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[4] == l[3]) || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)));
    let tmp = IntervalList::new(vec![Interval::interval_lower(-a[0] * 1 + s[1] + l[0])]);
    ret = ret.intersection(&tmp);
    if !(a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(s[2] + -s[0] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(s[4] + -s[2] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(s[4] * 1 / 2 + -s[1] * 1 / 2),
            Interval::interval_lower(a[2] + -s[1] * 1 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)));
    assert!((l[3] == l[2]) || (-a[3] * 1 + s[3] + l[3] <= RealNumRep::new(-5, 1)));
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + l[3] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(a[4] + -a[3] * 1 + l[3] + -l[4] * 1),
            Interval::interval_upper(a[4] + -a[3] * 1 + l[3] + -l[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[2] * 1 + l[2] + s[4]),
            Interval::interval_upper(-a[1] * 1 / 2 + l[1] * 1 / 2 + s[4] * 1 / 2),
            Interval::interval_upper(s[4] * 1 / 3 + -s[0] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(s[3] + -s[1] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[1] * 1 + l[1] + s[3]),
            Interval::interval_upper(a[1] + -s[0] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(-a[1] * 1 + l[1] + s[1] <= RealNumRep::new(0, 1));
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(-5, 1)));
    if !((l[4] == l[3]) || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(a[4] * 1 / 2 + -a[2] * 1 / 2 + l[2] * 1 / 2 + -l[4] * 1 / 2),
            Interval::interval_upper(a[4] * 1 / 2 + -a[2] * 1 / 2 + l[2] * 1 / 2 + -l[4] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + -a[1] * 1 + l[1] + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[0] * 1 + -l[1] * 1),
            Interval::interval_upper(
                RealNumRep::new(-5, 2) + a[2] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(s[3] * 1 / 2 + -s[0] * 1 / 2),
            Interval::interval_lower(a[1] + -s[0] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(-5, 1)));
    assert!(-a[4] * 1 + l[4] + s[4] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[2] * 1 / 2 + l[2] * 1 / 2 + s[4] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[2] * 1 / 3 + -s[0] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[2] * 1 / 2 + -s[1] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[0] * 1 / 2 + s[2] * 1 / 2 + l[0] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(-a[2] * 1 + l[2] + s[3])]);
    ret = ret.intersection(&tmp);
    assert!(-a[3] * 1 + l[3] + s[3] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3] * 1 / 3 + -s[1] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + -s[2] * 1 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
            Interval::interval_upper(a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
            Interval::interval_upper(a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[3] + -a[2] * 1 + l[2] + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
            Interval::interval_upper(a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[1] + l[1] + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
            Interval::interval_upper(a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[2] + l[1] + -l[3] * 1),
            Interval::interval_upper(a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -a[1] * 1 + -l[2] * 1 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + -a[1] * 1 + s[2] + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
            Interval::interval_lower(
                -a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[3],
            ),
            Interval::interval_upper(a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 1 / 2 + -a[0] * 1 / 2 + -l[2] * 1 / 2 + l[0] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
            Interval::interval_lower(a[2] * 1 / 2 + -a[0] * 1 / 2 + -l[2] * 1 / 2 + l[0] * 1 / 2),
            Interval::interval_upper(a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
            Interval::interval_upper(-a[2] * 1 + l[2] + s[4]),
            Interval::interval_upper(a[3] * 1 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 1 / 3 + -a[1] * 1 / 3 + l[1] * 1 / 3 + -l[4] * 1 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 1 / 2
                + -a[2] * 1 / 2
                + -a[1] * 1 / 2
                + l[2] * 1 / 2
                + s[1] * 1 / 2
                + l[1] * 1 / 2
                + -l[4] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3]) || (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] * 1 / 2
                    + -a[3] * 1 / 2
                    + -a[1] * 1 / 2
                    + l[3] * 1 / 2
                    + s[3] * 1 / 2
                    + l[1] * 1 / 2
                    + -l[4] * 1 / 2,
            ),
            Interval::interval_upper(a[4] * 1 / 3 + -a[1] * 1 / 3 + -l[4] * 1 / 3 + l[1] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3]) || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-5, 2)
                    + a[4] * 1 / 2
                    + -a[2] * 1 / 2
                    + l[2] * 1 / 2
                    + -l[4] * 1 / 2,
            ),
            Interval::interval_upper(a[4] * 1 / 3 + -a[1] * 1 / 3 + -l[4] * 1 / 3 + l[1] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3]) || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[2] * 1 + l[2] + s[4]),
            Interval::interval_upper(a[4] * 1 / 3 + -a[1] * 1 / 3 + -l[4] * 1 / 3 + l[1] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[1] * 1 + -l[1] * 1 + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + s[1] + l[1] + -l[4] * 1),
            Interval::interval_upper(a[4] * 1 / 3 + -a[1] * 1 / 3 + -l[4] * 1 / 3 + l[1] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-5, 2)
                    + a[4] * 1 / 2
                    + -a[2] * 1 / 2
                    + l[2] * 1 / 2
                    + -l[4] * 1 / 2,
            ),
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + l[3] + -l[4] * 1),
            Interval::interval_upper(a[4] * 1 / 3 + -a[1] * 1 / 3 + -l[4] * 1 / 3 + l[1] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] + -a[2] * 1 + -a[1] * 1 + a[0] + l[2] + l[1] + -l[4] * 1 + -l[0] * 1,
            ),
            Interval::interval_upper(a[4] * 1 / 3 + -a[1] * 1 / 3 + -l[4] * 1 / 3 + l[1] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[2] * 1 + l[2] + -l[3] * 1),
            Interval::interval_upper(
                a[4] * 1 / 2
                    + -a[2] * 1 / 2
                    + -a[1] * 1 / 2
                    + l[2] * 1 / 2
                    + s[2] * 1 / 2
                    + l[1] * 1 / 2
                    + -l[4] * 1 / 2,
            ),
            Interval::interval_upper(a[4] * 1 / 3 + -a[1] * 1 / 3 + -l[4] * 1 / 3 + l[1] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[2] * 1 + l[2] + -l[3] * 1),
            Interval::interval_upper(a[4] * 1 / 3 + -a[1] * 1 / 3 + -l[4] * 1 / 3 + l[1] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[0] + l[1] + -l[4] * 1
                <= RealNumRep::new(0, 1))
    );
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[0] * 1 + -l[1] * 1 + l[4],
            ),
            Interval::interval_upper(a[3] + -a[2] * 1 + l[2] + -l[3] * 1),
            Interval::interval_upper(a[4] * 1 / 3 + -a[1] * 1 / 3 + -l[4] * 1 / 3 + l[1] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[2] + l[1] + -l[4] * 1),
            Interval::interval_upper(a[3] + -a[2] * 1 + l[2] + -l[3] * 1),
            Interval::interval_upper(a[4] * 1 / 3 + -a[1] * 1 / 3 + -l[4] * 1 / 3 + l[1] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[1] + l[1] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1] + -l[3] * 1
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[0] * 1 / 4 + s[4] * 1 / 4 + l[0] * 1 / 4,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(-a[3] * 1 + l[3] + s[4])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3] * 1 / 2 + -s[2] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 1 / 2
                + -a[3] * 1 / 2
                + -a[1] * 1 / 2
                + l[3] * 1 / 2
                + s[2] * 1 / 2
                + l[1] * 1 / 2
                + -l[4] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 5 + -s[0] * 1 / 5)]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 3) + -a[1] * 1 / 3 + s[4] * 1 / 3 + l[1] * 1 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[2] + -a[1] * 1 + l[1] + -l[2] * 1),
            Interval::interval_upper(
                RealNumRep::new(-5, 2) + a[2] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[2] + -a[1] * 1 + l[1] + -l[2] * 1),
            Interval::interval_upper(
                RealNumRep::new(-5, 2) + a[2] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[2] + l[2] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[1] + l[2] + -l[4] * 1
                <= RealNumRep::new(0, 1))
    );
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + -s[3] * 1 + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + l[3] + -l[4] * 1),
            Interval::interval_upper(a[4] * 1 / 2 + -a[2] * 1 / 2 + -l[4] * 1 / 2 + l[2] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[3] + l[2] + -l[4] * 1),
            Interval::interval_upper(a[4] * 1 / 2 + -a[2] * 1 / 2 + -l[4] * 1 / 2 + l[2] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -a[4] * 1 / 2
                    + a[3] * 1 / 2
                    + a[2] * 1 / 2
                    + -l[3] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[2] * 1 / 2
                    + l[4] * 1 / 2,
            ),
            Interval::interval_upper(a[4] * 1 / 2 + -a[2] * 1 / 2 + -l[4] * 1 / 2 + l[2] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[2] + -l[3] * 1 + -s[2] * 1 + -l[2] * 1 + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 1 / 2 + -a[2] * 1 / 2 + -l[4] * 1 / 2 + l[2] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -a[4] * 1 + a[3] + a[2] + -l[3] * 1 + -s[1] * 1 + -l[2] * 1 + l[4],
            ),
            Interval::interval_upper(a[4] * 1 / 2 + -a[2] * 1 / 2 + -l[4] * 1 / 2 + l[2] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -a[4] * 1 + a[3] + a[2] + -a[0] * 1 + -l[3] * 1 + -l[2] * 1 + l[4] + l[0],
            ),
            Interval::interval_upper(a[4] * 1 / 2 + -a[2] * 1 / 2 + -l[4] * 1 / 2 + l[2] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[2] + -a[1] * 1 + -l[3] * 1 + l[1] + -l[2] * 1 + l[4]
            == RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1)
            <= -a[4] * 1 + a[3] + a[2] + -a[1] * 1 + -l[3] * 1 + l[1] + -l[2] * 1 + l[4])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 1 / 2 + -a[2] * 1 / 2 + -l[4] * 1 / 2 + l[2] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (RealNumRep::new(0, 1)
            <= -a[4] * 1 + a[3] + a[2] + -a[1] * 1 + -l[3] * 1 + l[1] + -l[2] * 1 + l[4]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 + a[3] + a[2] + -l[3] * 1 + -s[0] * 1 + -l[2] * 1 + l[4],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + -a[2] * 1 + s[3] + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[2] * 1 + l[2] + s[4]),
            Interval::interval_upper(a[2] + -s[1] * 1 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + -a[3] * 1 + s[4] + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[1] + -l[1] * 1 + -s[1] * 1),
        Interval::interval_lower(-a[1] * 1 / 3 + s[4] * 1 / 3 + l[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[3] + -a[2] * 1 + l[2] + -l[3] * 1),
            Interval::interval_upper(
                RealNumRep::new(-5, 2) + a[3] * 1 / 2 + -s[1] * 1 / 2 + -l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 4 + -s[1] * 1 / 4)]);
    ret = ret.intersection(&tmp);
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-5, 3) + a[3] * 1 / 3 + -s[0] * 1 / 3 + -l[3] * 1 / 3,
            ),
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[3] + -a[2] * 1 + l[2] + -l[3] * 1),
            Interval::interval_upper(
                RealNumRep::new(-5, 2)
                    + a[3] * 1 / 2
                    + -a[1] * 1 / 2
                    + l[1] * 1 / 2
                    + -l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 2) + -a[1] * 1 / 2 + s[3] * 1 / 2 + l[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[0] * 1 / 3 + s[3] * 1 / 3 + l[0] * 1 / 3,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3] * 1 / 4 + -s[0] * 1 / 4)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 3 + -s[2] * 1 / 3)]);
    ret = ret.intersection(&tmp);
    assert!((l[4] == l[3]) || (-a[4] * 1 + s[4] + l[4] <= RealNumRep::new(-5, 1)));
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + l[3] + -l[4] * 1),
            Interval::interval_upper(
                RealNumRep::new(-5, 2) + a[4] * 1 / 2 + -s[2] * 1 / 2 + -l[4] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-5, 2)
                    + a[4] * 1 / 2
                    + -a[2] * 1 / 2
                    + l[2] * 1 / 2
                    + -l[4] * 1 / 2,
            ),
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + l[3] + -l[4] * 1),
            Interval::interval_upper(
                RealNumRep::new(-5, 3) + a[4] * 1 / 3 + -s[1] * 1 / 3 + -l[4] * 1 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-5, 2)
                    + a[4] * 1 / 2
                    + -a[2] * 1 / 2
                    + l[2] * 1 / 2
                    + -l[4] * 1 / 2,
            ),
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + l[3] + -l[4] * 1),
            Interval::interval_upper(
                RealNumRep::new(-5, 3)
                    + a[4] * 1 / 3
                    + -a[1] * 1 / 3
                    + l[1] * 1 / 3
                    + -l[4] * 1 / 3,
            ),
            Interval::interval_upper(
                RealNumRep::new(-5, 4) + a[4] * 1 / 4 + -s[0] * 1 / 4 + -l[4] * 1 / 4,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[1] * 1 / 3 + l[1] * 1 / 3 + s[4] * 1 / 3,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(RealNumRep::new(5, 1))]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[1] * 1 / 2 + -s[0] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[2] * 1 + l[2] + s[2] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(-a[1] * 1 + l[1] + s[2])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[4] * 1 / 2 + -s[3] * 1 / 2)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -a[1] * 1 / 2 + l[1] * 1 / 2 + s[3] * 1 / 2,
    )]);
    ret = ret.intersection(&tmp);
    ret
}

pub fn compute_b_t_5_l_5(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 5);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])));
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[2] + -s[2] * 1 + -l[2] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[1] + -s[1] * 1 + -l[1] * 1)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1)]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + -s[4] * 1 / 2 + -s[2] * 1 / 2 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[4] == l[3]) || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)));
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[4] + -s[4] * 1 + -l[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)));
    assert!((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)));
    let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1 + -l[3] * 1)]);
    ret = ret.intersection(&tmp);
    assert!((l[3] == l[2]) || (-a[3] * 1 + a[2] + -l[2] * 1 + l[3] <= RealNumRep::new(-5, 1)));
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[3] + -s[3] * 1 + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + -s[4] * 3 / 4 + -s[0] * 1 / 4 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1)]);
    ret = ret.intersection(&tmp);
    assert!((l[2] == l[1]) || (-a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(-5, 1)));
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[2] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (l[2] == l[1])
            || (RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)
            || (-a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2 + l[3]
                == RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[3] + -a[2] * 2 + a[1] + l[2] * 2 + -l[3] * 1 + -l[0] * 1
                <= RealNumRep::new(0, 1))
            || (!(l[1] == l[0]))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 1 + a[2] * 2 + -s[2] * 1 + -l[2] * 2 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)
            || (RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)
            || (-a[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2 + l[4]
                == RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2 + l[3]),
            Interval::interval_point(-a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 2 + a[2] * 3 + -a[0] * 1 + -l[2] * 3 + l[3] * 2 + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 2 + -a[2] * 1 + -s[4] * 1 + l[2] + -l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 3 + a[2] * 4 + -s[0] * 1 + -l[2] * 4 + l[3] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 2 + a[2] * 3 + -s[1] * 1 + -l[2] * 3 + l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2 + l[3]),
            Interval::interval_upper(-a[3] * 2 + a[2] * 3 + -s[0] * 1 + -l[2] * 3 + l[3] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[3] * 1 + a[2] * 2 + -s[1] * 1 + -l[2] * 2 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (!(l[4] == l[3]))
            || (RealNumRep::new(0, 1) <= -a[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 1)
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 + a[3] * 2 + -s[2] * 1 + -l[3] * 2 + l[4],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[4] == l[3]) || (-a[4] * 1 + a[3] + -l[3] * 1 + l[4] <= RealNumRep::new(-5, 1)));
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[4] * 1 + a[3] * 2 + -s[3] * 1 + -l[3] * 2 + l[4],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (l[4] == l[3])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2 + l[4]),
            Interval::interval_upper(
                a[3] * 1 / 2 + -a[2] * 1 + a[1] * 1 / 2 + -l[1] * 1 / 2 + l[2] + -l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)
        || (RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)
        || (-a[4] * 2 + a[3] * 3 + -a[1] * 1 + l[1] + -l[3] * 3 + l[4] * 2
            == RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2 + l[4],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (!(l[2] == l[1]))
            || (a[4] + -a[3] * 2 + a[2] + -l[1] * 1 + l[3] * 2 + -l[4] * 1
                <= RealNumRep::new(0, 1))
    );
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(-a[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2 + l[4]),
            Interval::interval_lower(-a[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2 + l[4]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[4] * 4 + a[3] * 5 + -s[0] * 1 + -l[3] * 5 + l[4] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        RealNumRep::new(5, 1) + a[2] + -s[4] * 1 + -l[2] * 1,
    )]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[2] * 1 + a[1] * 2 + -a[0] * 1 + -l[1] * 2 + l[2] + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + l[3] + -l[2] * 1 / 2 + -l[4] * 1 / 2,
            ),
            Interval::interval_upper(
                a[4] * 3 / 2
                    + -a[3] * 3 / 2
                    + -a[2] * 1 / 2
                    + l[3] * 3 / 2
                    + s[0] * 1 / 2
                    + l[2] * 1 / 2
                    + -l[4] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3])
            || (-s[4] * 1 + s[2] <= RealNumRep::new(-5, 1))
    );
    if !(RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -s[4] * 2 + s[2] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + -s[3] * 1 + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[2] * 2 + a[1] * 3 + -s[0] * 1 + -l[1] * 3 + l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 2 + -a[1] * 1 + -s[3] * 1 + l[1] + -l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + -s[4] * 1 / 2 + -s[2] * 1 / 2 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[2] * 1 + a[1] * 2 + -s[1] * 1 + -l[1] * 2 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (l[4] == l[3])
            || (-a[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2 + l[4]
                == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1)
                <= -a[4] * 1 + a[3] * 2 + -a[2] * 1 + -l[3] * 2 + l[2] + l[4]))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[3] * 1 / 2 + a[1] * 3 / 2 + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1] + -l[3] * 1
                <= RealNumRep::new(0, 1))
    );
    if !((l[1] == l[0]) || (RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3])) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + -a[0] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 + l[0] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + -a[0] * 1 / 3 + -s[4] * 2 / 3 + -l[2] * 1 + l[0] * 1 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + -s[4] * 2 / 3 + -s[1] * 1 / 3 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2 + l[3]),
            Interval::interval_lower(a[2] * 2 + -a[1] * 1 + -s[4] * 1 + l[1] + -l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (!(l[3] == l[2]))
            || (RealNumRep::new(0, 1) <= -a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 1)
    );
    if !(a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + -s[2] * 2 + s[0] + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] * 1 / 4 + -s[2] * 1 + s[0] * 3 / 4 <= RealNumRep::new(0, 1))
    );
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -s[3] * 3 + s[1] * 2 + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + a[2] + -s[4] * 2 + -l[2] * 1 + -l[4] * 1),
            Interval::interval_lower(a[4] + -s[4] * 3 / 2 + s[1] * 1 / 2 + -l[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[2] + -s[1] * 1 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + l[3] + l[2] + -l[4] * 1 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + a[0] + -s[1] * 2 + -l[2] * 1 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-a[0] * 1 + -s[3] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1))
    );
    if !(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[4] * 2 + a[3] * 3 + -s[2] * 1 + -l[3] * 3 + l[4] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (s[4] * 1 / 3 + -s[3] * 1 + s[1] * 2 / 3 <= RealNumRep::new(0, 1))
    );
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + s[4] * 1 / 2 + -s[3] * 3 / 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 1 / 2 + a[2] * 1 / 2 + -s[4] * 1 + -l[2] * 1 / 2 + -l[4] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (RealNumRep::new(0, 1)
                <= -a[4] * 1 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3])
            || (!(l[4] == l[3]))
    );
    assert!(
        (l[1] == l[0])
            || (!(l[4] == l[3]))
            || (a[4] + -a[3] * 1 + -a[1] * 1 + s[0] + l[1] <= RealNumRep::new(0, 1))
    );
    if !((l[1] == l[0]) || (RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + l[3] + -l[2] * 1 / 2 + -l[4] * 1 / 2,
            ),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + l[3] + l[2] + -l[1] * 1 + -l[4] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
            || (-a[3] * 1 + -a[2] * 1 + a[1] + l[3] + s[4] + -l[1] * 1 + l[2]
                <= RealNumRep::new(0, 1))
    );
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 1 + a[1] + l[3] + s[4] + -s[3] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        RealNumRep::new(5, 1) + a[1] + -s[3] * 1 + -l[1] * 1,
    )]);
    ret = ret.intersection(&tmp);
    if !((l[1] == l[0])
        || (l[4] == l[3])
        || (-a[4] * 1 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[4]
            == RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1)
            <= -a[4] * 1 / 2 + a[2] * 3 / 2 + -a[1] * 1 + -l[2] * 3 / 2 + l[1] + l[4] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + l[3] + -l[2] * 1 / 2 + -l[4] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= l[1] + -l[2] * 1) || (!(l[4] == l[3]))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -s[1] * 3 / 2 + s[0] * 1 / 2 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(l[4] == l[3])) || (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 1 / 2 + -a[3] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 / 2 + -l[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] * 1 / 2 + a[1] * 1 / 2 + -s[3] * 1 + -l[1] * 1 / 2 + -l[3] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3])) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + s[4] + -s[2] * 2 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[1] + -a[0] * 2 / 3 + -s[4] * 1 / 3 + -l[1] * 1 + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                a[2] + a[1] + -a[0] * 1 + -s[4] * 1 + -l[2] * 1 + -l[1] * 1 + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[4] * 1 / 3 + -s[1] * 2 / 3 + -l[1] * 1),
            Interval::interval_lower(a[2] + a[1] + -s[4] * 1 + -l[2] * 1 + -s[1] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[3] * 2 + -a[2] * 2 + -a[1] * 1 + l[2] * 2 + s[0] + l[1] + -l[3] * 2,
            ),
            Interval::interval_lower(-a[3] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (l[3] == l[2])
            || (!(l[2] == l[1]))
            || (-a[3] * 1 + a[2] * 2 + -a[1] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + -s[2] * 1 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
    );
    if !(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + l[3] + l[2] + -l[1] * 1 + -l[4] * 1,
            ),
            Interval::interval_point(
                a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + l[3] + -l[1] * 1 + l[2] + -l[4] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
            || (a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[1] + l[2] + -l[4] * 1
                <= RealNumRep::new(0, 1))
    );
    if !((RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)
        || (-a[4] * 1 + a[3] + a[2] + -l[3] * 1 + -s[2] * 1 + -l[2] * 1 + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + l[3] + -l[2] * 1 / 2 + -l[4] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[2] * 1 + l[2] + -s[2] * 1 + s[0] + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + a[2] + -l[3] * 1 + -s[4] * 1 + -s[1] * 1 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[0] + l[1] + -l[4] * 1
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 / 3 + a[1] * 4 / 3 + -s[0] * 1 + -l[1] * 4 / 3 + l[4] * 1 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 + a[2] + a[1] * 2 + -l[2] * 1 + -s[0] * 2 + -l[1] * 2 + l[4],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(l[1] == l[0]))
        || (a[4] * 2 + -a[3] * 3 + a[1] + l[3] * 3 + -l[4] * 2 + -l[0] * 1
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2 + l[4],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[2] * 1 + l[2] + -s[2] * 2 + s[0] * 2 + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + a[2] + -s[4] * 2 + -l[2] * 1 + -l[4] * 1),
            Interval::interval_lower(
                a[4] * 2 / 3 + a[1] * 1 / 3 + -s[4] * 1 + -l[1] * 1 / 3 + -l[4] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 1 / 2 + a[1] * 3 / 2 + -s[1] * 1 + -l[1] * 3 / 2 + l[3] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + a[1] + -l[2] * 1 + -s[3] * 1 + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 1 / 2 + a[1] * 3 / 2 + -a[0] * 1 + -l[1] * 3 / 2 + l[3] * 1 / 2 + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (l[3] == l[2])) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 1 / 2 + a[1] * 1 / 2 + -s[2] * 1 + -l[1] * 1 / 2 + -l[3] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + a[1] + -l[3] * 1 + -s[4] * 1 + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + -a[1] * 1 / 2 + l[1] * 1 / 2 + -s[4] * 1 / 2 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -s[4] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1),
            Interval::interval_lower(
                a[2] * 2 + a[1] + -s[4] * 2 + -l[2] * 2 + -s[0] * 1 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 3 + -a[1] * 2 + -s[4] * 1 + l[1] * 2 + -l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (RealNumRep::new(0, 1)
                <= -a[4] * 1 / 2 + a[2] * 3 / 2 + -a[1] * 1 + -l[2] * 3 / 2 + l[1] + l[4] * 1 / 2)
    );
    if !((RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (RealNumRep::new(0, 1)
            <= -a[4] * 1 + a[3] + a[2] + -a[1] * 1 + -l[3] * 1 + l[1] + -l[2] * 1 + l[4]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 2 + -a[3] * 2 + -a[2] * 1 + l[3] * 2 + s[0] + l[2] + -l[4] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (l[4] == l[3])) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 1 / 2 + a[2] * 1 / 2 + -s[3] * 1 + -l[2] * 1 / 2 + -l[4] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + l[3] + -l[2] * 1 / 2 + -l[4] * 1 / 2,
            ),
            Interval::interval_lower(-a[4] * 1 + a[2] * 2 + -a[0] * 1 + -l[2] * 2 + l[4] + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(l[4] == l[3]))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 / 2 + a[2] * 3 / 2 + -s[1] * 1 + -l[2] * 3 / 2 + l[3] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1))
    );
    if !(a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -s[2] * 4 + s[0] * 3 + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(l[4] == l[3])) || (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + -s[2] * 1 + s[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[2] * 1 + s[3] + l[2] + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + a[2] + -l[2] * 1 + -s[3] * 2 + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3])
            || (-a[0] * 1 + -s[4] * 2 + s[2] * 3 + l[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3])
            || (-s[4] * 3 + s[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -s[4] * 1 / 3 + -s[1] * 2 / 3 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3])
            || (-s[4] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (a[2] + -l[2] * 1 + -s[4] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3])
            || (-s[4] * 2 + s[2] * 3 + -s[1] * 1 <= RealNumRep::new(0, 1))
    );
    assert!((l[3] == l[2]) || (-a[3] * 1 + a[1] + -l[1] * 1 + l[3] <= RealNumRep::new(-10, 1)));
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 1 / 2
                + -a[3] * 1 / 2
                + a[1] * 1 / 2
                + l[3] * 1 / 2
                + -s[3] * 1 / 2
                + -l[1] * 1 / 2
                + -l[4] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[4] == l[3]) || (-a[4] * 1 + a[2] + -l[2] * 1 + l[4] <= RealNumRep::new(-10, 1)));
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[2] + -a[1] * 1 + l[1] + -l[2] * 1),
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[2] + -s[0] * 1 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[2] + -a[1] * 1 / 2 + l[1] * 1 / 2 + -s[3] * 1 / 2 + -l[2] * 1,
            ),
            Interval::interval_upper(a[2] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + a[0] * 1 / 2 + -s[2] * 3 / 2 + -l[3] * 1 + -l[0] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[3] * 3 / 2 + -a[1] * 1 / 2 + -s[4] * 1 + l[1] * 1 / 2 + -l[3] * 3 / 2,
            ),
            Interval::interval_upper(
                a[3] + -a[2] * 1 / 2 + l[2] * 1 / 2 + -s[4] * 1 / 2 + -l[3] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + -s[4] * 1 / 4 + -s[0] * 3 / 4 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + l[3] + -l[2] * 1 / 2 + -l[4] * 1 / 2,
            ),
            Interval::interval_lower(
                -a[4] * 1 / 2 + a[2] * 3 / 2 + -s[2] * 1 + -l[2] * 3 / 2 + l[4] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 / 2 + a[2] * 3 / 2 + -s[1] * 1 + -l[2] * 3 / 2 + l[4] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + l[3] + -l[2] * 1 / 2 + -l[4] * 1 / 2,
            ),
            Interval::interval_lower(-a[4] * 1 + a[2] * 2 + -s[1] * 1 + -l[2] * 2 + l[4]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[4] * 1 + a[2] * 2 + -s[0] * 1 + -l[2] * 2 + l[4]),
            Interval::interval_upper(
                -a[4] * 1 / 2 + a[2] * 3 / 2 + -a[1] * 1 + l[1] + -l[2] * 3 / 2 + l[4] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + l[3] + -l[2] * 1 / 2 + -l[4] * 1 / 2,
            ),
            Interval::interval_point(
                -a[4] * 1 / 2 + a[2] * 3 / 2 + -a[1] * 1 + l[1] + -l[2] * 3 / 2 + l[4] * 1 / 2,
            ),
            Interval::interval_lower(
                -a[4] * 1 / 2 + a[2] * 3 / 2 + -a[1] * 1 + l[1] + -l[2] * 3 / 2 + l[4] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + a[1] + -l[1] * 1 + -s[2] * 2 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[3] + a[2] + -a[1] * 1 + -l[3] * 1 + -s[4] * 1 + l[1] + -l[2] * 1,
            ),
            Interval::interval_upper(
                a[3] * 2 + a[2] + -l[3] * 2 + -s[4] * 2 + -s[0] * 1 + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + l[3] + -s[3] * 1 + s[1] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (a[1] + -s[3] * 1 + -l[1] * 1 <= RealNumRep::new(-5, 1))
            || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1]))
    );
    if !((RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)
        || (-a[4] * 1 + a[3] + a[2] + -a[1] * 1 + -l[3] * 1 + l[1] + -l[2] * 1 + l[4]
            == RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1)
            <= -a[4] * 1 + a[3] + a[2] + -a[1] * 1 + -l[3] * 1 + l[1] + -l[2] * 1 + l[4])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + l[3] + -l[2] * 1 / 2 + -l[4] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + l[3] + -l[2] * 1 / 2 + -l[4] * 1 / 2,
            ),
            Interval::interval_upper(
                a[4] * 2 + -a[3] * 2 + -a[2] * 1 + l[3] * 2 + s[1] + l[2] + -l[4] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + l[3] + -l[2] * 1 / 2 + -l[4] * 1 / 2,
            ),
            Interval::interval_upper(
                a[4] * 2 + -a[3] * 2 + -a[2] * 1 + a[0] + l[3] * 2 + l[2] + -l[4] * 2 + -l[0] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 1 / 3 + a[1] * 2 / 3 + -s[3] * 1 + -l[1] * 2 / 3 + -l[4] * 1 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1])
    );
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + l[3] + -l[4] * 1),
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -s[2] * 1 + -l[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + l[3] + -s[2] * 1 + s[0] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + l[3] + -l[4] * 1),
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -a[2] * 1 + l[2] + -l[4] * 1),
            Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -s[1] * 1 + -l[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -s[3] * 2 + s[1] + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[1] + -s[4] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[4] * 3 + a[3] * 4 + -a[0] * 1 + -l[3] * 4 + l[4] * 3 + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + l[3] + -l[2] * 1 / 2 + -l[4] * 1 / 2,
            ),
            Interval::interval_lower(
                -a[4] * 3 / 2 + a[2] * 5 / 2 + -s[0] * 1 + -l[2] * 5 / 2 + l[4] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[3] * 3 / 2 + s[0] * 1 / 2 + -l[3] * 1),
            Interval::interval_lower(a[3] + a[1] + -s[3] * 2 + -l[1] * 1 + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + -s[2] * 3 / 2 + s[1] * 1 / 2 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[3] + -a[2] * 1 / 2 + l[2] * 1 / 2 + -s[4] * 1 / 2 + -l[3] * 1,
            ),
            Interval::interval_upper(a[3] + -s[4] * 3 / 4 + -s[0] * 1 / 4 + -l[3] * 1),
            Interval::interval_upper(
                a[3] + -a[1] * 1 / 3 + l[1] * 1 / 3 + -s[4] * 2 / 3 + -l[3] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[3] + -a[2] * 1 / 2 + l[2] * 1 / 2 + -s[4] * 1 / 2 + -l[3] * 1,
            ),
            Interval::interval_upper(a[3] + -s[4] * 2 / 3 + -s[1] * 1 / 3 + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -s[2] * 3 + s[0] * 2 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(l[4] == l[3]))
        || (RealNumRep::new(0, 1) <= -a[4] * 2 + a[3] * 3 + -a[1] * 1 + l[1] + -l[3] * 1))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2 + l[4],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -s[3] * 2 + s[0] + -l[4] * 1),
            Interval::interval_lower(a[4] + a[1] * 2 + -l[1] * 2 + -s[3] * 3 + -l[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + l[3] + s[4] + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + l[3] + s[4] + -s[3] * 1 + s[1] <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[2] + -a[1] * 2 / 3 + l[1] * 2 / 3 + -s[4] * 1 / 3 + -l[2] * 1,
            ),
            Interval::interval_upper(a[2] + -s[4] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[4] + -s[2] * 5 / 3 + s[0] * 2 / 3 + -l[4] * 1),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + l[3] + -s[2] * 1 / 3 + s[0] * 1 / 3 + -l[4] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -a[3] * 1 + a[1] + -l[4] * 1 + -s[3] * 1 + l[3] + -l[0] * 1,
            ),
            Interval::interval_lower(
                a[4] + -a[3] * 1 + l[3] + -s[3] * 1 / 2 + s[0] * 1 / 2 + -l[4] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[1] + l[3] + s[4] + -s[3] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[3] * 1 / 2 + s[0] * 1 / 2 + l[1]))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[3] + a[0] * 2 + -s[1] * 3 + -l[3] * 1 + -l[0] * 2),
            Interval::interval_upper(
                a[3] + -a[2] * 1 + a[0] + l[2] + -s[1] * 1 + -l[3] * 1 + -l[0] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[4] * 3 + a[3] * 4 + -s[0] * 1 + -l[3] * 4 + l[4] * 3),
            Interval::interval_upper(
                -a[4] * 2 + a[3] * 3 + -a[1] * 1 + l[1] + -l[3] * 3 + l[4] * 2,
            ),
            Interval::interval_upper(-a[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2 + l[4]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[4] * 2 + a[3] * 3 + -s[1] * 1 + -l[3] * 3 + l[4] * 2),
            Interval::interval_upper(-a[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2 + l[4]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[4] * 3 + a[3] * 4 + -s[1] * 1 + -l[3] * 4 + l[4] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[3] + -s[1] * 2 + s[0] + -l[3] * 1),
            Interval::interval_upper(
                a[3] + -a[2] * 1 + l[2] + -s[1] * 1 / 2 + s[0] * 1 / 2 + -l[3] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[3] + -a[2] * 1 + l[2] + -l[3] * 1),
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[3] + -s[1] * 1 + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(
                -a[4] * 2 + a[3] * 3 + -a[1] * 1 + l[1] + -l[3] * 3 + l[4] * 2,
            ),
            Interval::interval_lower(
                -a[4] * 2 + a[3] * 3 + -a[1] * 1 + l[1] + -l[3] * 3 + l[4] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -s[3] * 5 / 4 + s[0] * 1 / 4 + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + a[1] * 1 / 2 + -l[1] * 1 / 2 + -s[3] * 3 / 2 + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + l[3] + s[4] + -s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[1] * 1 + s[3] * 1 / 2 + s[0] * 1 / 2 + l[1])
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[3] + -a[2] * 1 + l[2] + -l[3] * 1),
            Interval::interval_upper(RealNumRep::new(-15, 1) + a[3] + -s[0] * 1 + -l[3] * 1),
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[3] + -a[1] * 1 + l[1] + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3]) || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1]))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + l[3] + -l[4] * 1),
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -a[2] * 1 + l[2] + -l[4] * 1),
            Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -a[1] * 1 + l[1] + -l[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -s[3] * 3 / 2 + s[2] * 1 / 2 + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + -s[2] * 4 / 3 + s[0] * 1 / 3 + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -l[2] * 1 + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (s[4] * 1 / 2 + -s[3] * 1 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
            || (a[1] * 2 + -l[1] * 2 + s[4] + -s[3] * 3 <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[2] * 1 + l[2] + s[4] + -s[2] * 2 + s[0] * 2 <= RealNumRep::new(0, 1))
    );
    if !(RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + a[2] + -s[4] * 2 + -l[2] * 1 + -l[4] * 1),
            Interval::interval_lower(a[4] + -s[4] * 4 / 3 + s[0] * 1 / 3 + -l[4] * 1),
            Interval::interval_lower(
                a[4] + a[1] * 1 / 2 + -l[1] * 1 / 2 + -s[4] * 3 / 2 + -l[4] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -a[4] * 1 + a[2] + a[1] * 2 + -a[0] * 2 + -l[2] * 1 + -l[1] * 2 + l[4] + l[0] * 2,
            ),
            Interval::interval_lower(
                -a[4] * 1 / 3 + a[1] * 4 / 3 + -a[0] * 1 + -l[1] * 4 / 3 + l[4] * 1 / 3 + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3])
            || (-a[1] * 1 / 2 + l[1] * 1 / 2 + -s[4] * 1 / 2 + s[2] <= RealNumRep::new(0, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3])
            || (-a[0] * 1 + -s[4] * 1 / 2 + s[1] * 3 / 2 + l[0] <= RealNumRep::new(0, 1))
            || (a[2] + -a[0] * 1 + -s[4] * 1 + -l[2] * 1 + s[1] + l[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3])
            || (-s[4] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1))
            || (a[2] * 2 + -s[4] * 2 + -l[2] * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[3] * 1 + s[4] + l[3])
            || (a[1] * 1 / 2 + -l[1] * 1 / 2 + -s[4] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (-s[4] * 1 / 3 + s[0] * 1 / 3 <= RealNumRep::new(-5, 1))
            || (a[2] + -l[2] * 1 + -s[4] * 1 <= RealNumRep::new(-5, 1))
    );
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[4] + a[0] * 3 + -s[1] * 4 + -l[4] * 1 + -l[0] * 3),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[0] + l[3] + -s[1] * 1 + -l[4] * 1 + -l[0] * 1,
            ),
            Interval::interval_upper(
                a[4] + -a[2] * 1 + a[0] * 2 + l[2] + -s[1] * 2 + -l[4] * 1 + -l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[4] + a[0] + -s[2] * 2 + -l[4] * 1 + -l[0] * 1),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[0] * 1 / 2 + l[3] + -s[2] * 1 / 2 + -l[4] * 1 + -l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[4] + a[1] * 2 + -l[1] * 2 + -s[2] * 3 + -l[4] * 1),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[1] + l[3] + -s[2] * 1 + -l[1] * 1 + -l[4] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + a[0] * 1 / 3 + -s[3] * 4 / 3 + -l[4] * 1 + -l[0] * 1 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3]) || (RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + l[3] + -l[4] * 1),
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -a[2] * 1 + l[2] + -l[4] * 1),
            Interval::interval_upper(RealNumRep::new(-20, 1) + a[4] + -s[0] * 1 + -l[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[4] + -s[1] * 5 / 2 + s[0] * 3 / 2 + -l[4] * 1),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + l[3] + -s[1] * 1 / 2 + s[0] * 1 / 2 + -l[4] * 1,
            ),
            Interval::interval_upper(a[4] + -a[2] * 1 + l[2] + -s[1] * 1 + s[0] + -l[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -a[4] * 2 / 3 + a[1] * 5 / 3 + -s[0] * 1 + -l[1] * 5 / 3 + l[4] * 2 / 3,
            ),
            Interval::interval_upper(
                a[4] * 2 + -a[3] * 2 + -a[1] * 1 + l[3] * 2 + s[0] + l[1] + -l[4] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (l[4] == l[3])
            || (RealNumRep::new(0, 1)
                <= a[4] + -a[3] * 3 / 2 + a[1] * 1 / 2 + -l[4] * 1 + -l[1] * 1 / 2 + l[3] * 3 / 2)
    );
    if !((l[1] == l[0]) || (l[4] == l[3])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] * 1 / 3 + a[1] * 2 / 3 + -s[2] * 1 + -l[1] * 2 / 3 + -l[4] * 1 / 3,
            ),
            Interval::interval_upper(
                a[4] * 1 / 2
                    + -a[3] * 1 / 2
                    + a[1] * 1 / 2
                    + l[3] * 1 / 2
                    + -s[2] * 1 / 2
                    + -l[1] * 1 / 2
                    + -l[4] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (l[4] == l[3])) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 / 3 + a[1] * 1 / 3 + -s[3] * 1 + -l[1] * 1 / 3 + -l[4] * 2 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -s[3] * 4 / 3 + s[1] * 1 / 3 + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[4] + -s[2] * 2 + s[1] + -l[4] * 1),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + l[3] + -s[2] * 1 / 2 + s[1] * 1 / 2 + -l[4] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[1] * 1 + -l[1] * 1 + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -a[4] * 1 + a[2] + a[1] * 2 + -l[2] * 1 + -s[1] * 2 + -l[1] * 2 + l[4],
            ),
            Interval::interval_lower(
                -a[4] * 1 / 3 + a[1] * 4 / 3 + -s[1] * 1 + -l[1] * 4 / 3 + l[4] * 1 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3]) || (-a[4] * 1 + a[1] + -l[1] * 1 + l[4] <= RealNumRep::new(-15, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + l[3] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 1 / 2 + a[1] + -l[2] * 1 / 2 + -s[4] * 1 / 2 + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(RealNumRep::new(5, 1))]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(-a[4] * 1 + l[4] + s[4] <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + l[1] + s[1] <= RealNumRep::new(0, 1));
    assert!(-a[2] * 1 + l[2] + s[2] <= RealNumRep::new(0, 1));
    assert!(-a[3] * 1 + l[3] + s[3] <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_q_4_t_5_l_5(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 5);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])) || (l[1] == l[0]));
    assert!((l[2] == l[1]) || (-a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(-5, 1)));
    assert!((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)));
    assert!((l[4] == l[3]) || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)));
    assert!((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)));
    if !((l[1] == l[0])
        || (l[4] == l[3])
        || (-a[4] * 1 + l[4] + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3
            == RealNumRep::new(0, 1))
        || (!(a[4] + -l[4] * 1 + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3
            <= RealNumRep::new(0, 1))))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -l[4] * 1 + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[2] == l[1])
            || (a[4] + -l[4] * 1 + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(RealNumRep::new(5, 1))]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[1] + -s[2] * 1 + -l[1] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[1] + -s[1] * 1 + -l[1] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (l[3] == l[2])
        || (l[4] == l[3])
        || (-a[4] * 2 + l[4] * 2 + a[3] * 3 + -a[1] * 1 + l[1] + -l[3] * 3
            == RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -l[4] * 1 + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[2] + -s[2] * 1 + -l[2] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -a[2] * 2 + a[1] * 2 + -s[3] * 1 + -l[1] * 2 + l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -a[2] * 1 + a[1] + -s[4] * 1 + -l[1] * 1 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[4] + -l[4] * 1 + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[4] * 1 + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] + l[3],
            ),
            Interval::interval_point(
                a[4] + l[3] + -a[3] * 1 + -l[4] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -a[2] * 3 + a[1] * 3 + -s[2] * 1 + -l[1] * 3 + l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -l[4] * 1 + -s[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(RealNumRep::new(0, 1)),
        Interval::interval_lower(RealNumRep::new(0, 1)),
    ]);
    ret = ret.intersection(&tmp);
    assert!(l[1] + -a[1] * 1 + s[1] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -l[4] * 1 + -s[3] * 3 / 2 + s[2] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[2] + -s[3] * 1 + -l[2] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(-5, 1)));
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + l[3] + -a[3] * 1 + -l[4] * 1),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -l[4] * 1 + -s[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !((-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1)
            <= -a[2] * 1 + a[1] * 1 / 2 + s[4] * 1 / 2 + -l[1] * 1 / 2 + l[2]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -l[1] * 1 / 2 + a[4] + a[1] * 1 / 2 + -l[4] * 1 + -s[4] * 3 / 2,
            ),
            Interval::interval_lower(a[4] + -l[4] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -s[4] * 2 + s[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3]) || (-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 1 / 2 + -l[4] * 1 / 2 + a[2] * 1 / 2 + -s[4] * 1 + -l[2] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[3] + -a[1] * 1 + -s[4] * 1 + s[1] + l[1] + -l[3] * 1 <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[2] * 1 + a[1] + -s[3] * 1 + -l[1] * 1 + l[2],
            ),
            Interval::interval_upper(RealNumRep::new(0, 1)),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[4] + -l[4] * 1 + -a[3] * 2 + a[2] + -l[2] * 1 + l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(
            a[4] + -l[4] * 1 + -a[3] * 1 + a[1] + -s[2] * 1 + -l[1] * 1 + l[3],
        ),
        Interval::interval_lower(
            a[4] + -l[4] * 1 + -a[3] * 3 / 2 + a[1] * 1 / 2 + -l[1] * 1 / 2 + l[3] * 3 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!((l[3] == l[2]) || (-a[3] * 1 + a[2] + -l[2] * 1 + l[3] <= RealNumRep::new(-5, 1)));
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -a[3] * 1 + a[2] + -s[4] * 1 + -l[2] * 1 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(15, 1) + a[4] + -l[4] * 1 + -a[2] * 3 + s[1] * 2 + l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -s[3] * 3 + s[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[3] * 2 + a[2] * 2 + -s[2] * 1 + -l[2] * 2 + l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[3] * 4 + a[2] * 4 + -s[0] * 1 + -l[2] * 4 + l[3] * 4,
            ),
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[3] * 3 + a[2] * 3 + -a[1] * 1 + l[1] + -l[2] * 3 + l[3] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + l[3] + -a[3] * 1 + -l[4] * 1 + -s[2] * 1 + s[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -s[2] * 4 + s[0] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(
            a[4] + l[3] + -a[3] * 1 + -l[4] * 1 + -s[2] * 1 / 2 + s[1] * 1 / 2,
        ),
        Interval::interval_lower(a[4] + -l[4] * 1 + -a[3] * 2 + s[2] + l[3] * 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1 + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[4] == l[3]) || (-a[4] * 1 + l[4] + a[3] + -l[3] * 1 <= RealNumRep::new(-5, 1)));
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[3] * 3 + a[2] * 3 + -s[1] * 1 + -l[2] * 3 + l[3] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[3] * 2 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(-l[4] * 1 + a[3] + -s[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(
            a[4] + -l[4] * 1 + -a[3] * 3 / 2 + a[1] * 1 / 2 + -l[1] * 1 / 2 + l[3] * 3 / 2,
        ),
        Interval::interval_upper(a[4] + -l[4] * 1 + -s[2] * 2 + s[1]),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 + -l[4] * 1 + a[3] * 2 + -s[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[3] + -s[3] * 1 + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] + l[3],
            ),
            Interval::interval_lower(
                a[4] + -l[4] * 1
                    + -a[3] * 1 / 2
                    + a[1] * 1 / 2
                    + -s[4] * 1
                    + -l[1] * 1 / 2
                    + l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[4] == l[3]) || (-a[4] * 1 + l[4] + a[2] + -l[2] * 1 <= RealNumRep::new(-10, 1)));
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[4] * 1 + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] + l[3],
            ),
            Interval::interval_upper(-a[4] * 1 + l[4] + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (RealNumRep::new(0, 1)
                <= -a[3] * 1 + a[2] * 2 + -a[1] * 1 + -l[2] * 2 + l[1] + l[3])
    );
    assert!((l[3] == l[2]) || (-a[3] * 1 + s[3] + l[3] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[1] == l[0])
            || (l[3] == l[2])
            || (-a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2 + l[3]
                == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1)
                <= -a[3] * 1 + a[2] * 2 + -a[1] * 1 + -l[2] * 2 + l[1] + l[3]))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[3] * 1 + a[1] + -s[2] * 1 + -l[1] * 1 + l[3],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[4] + -l[4] * 1 + -a[3] * 2 + s[2] + l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] + l[3],
            ),
            Interval::interval_lower(
                a[4] + -l[4] * 1
                    + -a[3] * 3 / 2
                    + a[1] * 3 / 2
                    + -s[2] * 1
                    + -l[1] * 3 / 2
                    + l[3] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -a[3] * 2 + a[1] * 2 + -a[0] * 1 + -l[1] * 2 + l[3] * 2 + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -a[3] * 3 + a[2] * 3 + -s[2] * 1 + -l[2] * 3 + l[3] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -a[3] * 5 + a[2] * 5 + -s[0] * 1 + -l[2] * 5 + l[3] * 5,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -a[3] * 2 + a[2] * 2 + -s[3] * 1 + -l[2] * 2 + l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[3] * 1 + a[2] + -s[3] * 1 + -l[2] * 1 + l[3],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[3] == l[2]) || (-a[3] * 1 + a[1] + -l[1] * 1 + l[3] <= RealNumRep::new(-10, 1)));
    assert!(
        (l[2] == l[1])
            || (l[4] == l[3])
            || (RealNumRep::new(0, 1)
                <= a[4] + -a[3] * 2 + a[2] + -l[4] * 1 + -l[2] * 1 + l[3] * 2)
    );
    assert!(
        (l[3] == l[2])
            || (-a[4] * 1 + l[4] + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2
                == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1)
                <= a[4] + -a[3] * 2 + a[2] + -l[4] * 1 + -l[2] * 1 + l[3] * 2))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -a[3] * 4 + a[2] * 4 + -a[0] * 1 + -l[2] * 4 + l[3] * 4 + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(
                l[1] + a[4] + -a[1] * 1 + -l[4] * 1 + -a[3] * 3 + a[2] * 3 + -l[2] * 3 + l[3] * 3,
            ),
            Interval::interval_lower(
                a[4] + -l[4] * 1 + -a[3] * 3 + a[2] * 3 + -a[1] * 1 + l[1] + -l[2] * 3 + l[3] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -a[2] * 4 + a[1] * 4 + -a[0] * 1 + -l[1] * 4 + l[2] * 4 + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] * 1 / 2 + -l[4] * 1 / 2 + a[2] * 1 / 2 + -s[3] * 1 + -l[2] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 2 + s[0] + l[1] * 2 + -l[2] * 1 <= RealNumRep::new(-5, 1))
    );
    if !((l[1] == l[0]) || (RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 / 3 + -l[4] * 2 / 3 + a[1] * 1 / 3 + -s[3] * 1 + -l[1] * 1 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -l[4] * 1 + -s[3] * 4 / 3 + s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + a[2] + -l[2] * 1 + -l[4] * 1 + -s[3] * 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -l[4] * 1 + -s[4] * 3 / 2 + s[1] * 1 / 2),
            Interval::interval_lower(a[4] + a[2] + -l[2] * 1 + -l[4] * 1 + -s[4] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -l[4] * 1 + -s[3] * 5 / 4 + s[0] * 1 / 4),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -l[4] * 1 + -s[2] * 5 / 3 + s[0] * 2 / 3),
        Interval::interval_upper(
            a[4] + l[3] + -a[3] * 1 + -l[4] * 1 + -s[2] * 1 / 3 + s[0] * 1 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(
            a[4] + -l[4] * 1 + -a[3] * 3 / 2 + a[1] * 1 / 2 + -l[1] * 1 / 2 + l[3] * 3 / 2,
        ),
        Interval::interval_upper(-l[1] * 2 + a[4] + a[1] * 2 + -l[4] * 1 + -s[2] * 3),
    ]);
    ret = ret.intersection(&tmp);
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 2 + a[4] + a[1] * 2 + -l[4] * 1 + -s[3] * 3),
            Interval::interval_lower(a[4] + -l[4] * 1 + -s[3] * 2 + s[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + l[3] + -a[3] * 1 + -l[4] * 1),
        Interval::interval_upper(RealNumRep::new(-15, 1) + l[1] + a[4] + -a[1] * 1 + -l[4] * 1),
        Interval::interval_upper(RealNumRep::new(-20, 1) + a[4] + -l[4] * 1 + -s[0] * 1),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -a[2] * 1 + l[2] + -l[4] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + l[3] + -a[3] * 1 + -l[4] * 1),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -l[4] * 1 + -s[1] * 1),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -a[2] * 1 + l[2] + -l[4] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (a[4] + l[3] + -a[3] * 1 + -l[4] * 1 + -a[2] * 1 + s[1] + l[2]
                <= RealNumRep::new(0, 1))
    );
    if !(-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[4] * 1 + -a[2] * 1 + a[1] + -s[4] * 1 + -l[1] * 1 + l[2],
            ),
            Interval::interval_lower(a[4] + -l[4] * 1 + -s[4] * 4 / 3 + s[0] * 1 / 3),
            Interval::interval_lower(a[4] + a[2] + -l[2] * 1 + -l[4] * 1 + -s[4] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[2] * 1 + l[2] + -l[4] * 1 + -s[2] * 2 + s[0] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[4] * 1 + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] + l[3],
            ),
            Interval::interval_lower(a[4] + a[2] + -l[2] * 1 + -l[4] * 1 + -s[4] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + l[3] + -a[3] * 1 + -l[4] * 1 + -s[3] * 1 + s[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + l[4] + a[2] + -a[1] * 1 + l[1] + -l[2] * 2 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 1 / 2 + -l[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + -l[2] * 1 / 2 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(
                l[1] + -a[4] * 1 / 2 + -a[1] * 1 + l[4] * 1 / 2 + a[2] * 3 / 2 + -l[2] * 3 / 2,
            ),
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[3] * 3 / 2 + a[1] * 1 / 2 + -l[1] * 1 / 2 + l[3] * 3 / 2,
            ),
            Interval::interval_lower(
                -a[4] * 1 / 2 + l[4] * 1 / 2 + a[2] * 3 / 2 + -a[1] * 1 + l[1] + -l[2] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[4] * 3 + l[4] * 3 + a[3] * 4 + -s[1] * 1 + -l[3] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[4] * 3 + l[4] * 3 + a[3] * 4 + -a[0] * 1 + -l[3] * 4 + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] + l[3],
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 1)
                    + a[4]
                    + -l[4] * 1
                    + -a[3] * 3 / 2
                    + a[1] * 1 / 2
                    + -l[1] * 1 / 2
                    + l[3] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -l[4] * 1 + a[0] + -s[2] * 2 + -l[0] * 1),
        Interval::interval_upper(
            a[4] + l[3] + -a[3] * 1 + -l[4] * 1 + a[0] * 1 / 2 + -s[2] * 1 / 2 + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -l[4] * 1 + -s[1] * 5 / 2 + s[0] * 3 / 2),
        Interval::interval_upper(
            a[4] + l[3] + -a[3] * 1 + -l[4] * 1 + -s[1] * 1 / 2 + s[0] * 1 / 2,
        ),
        Interval::interval_upper(a[4] + -a[2] * 1 + l[2] + -l[4] * 1 + -s[1] * 1 + s[0]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] * 2 + l[3] * 2 + -a[3] * 2 + -l[4] * 2 + -a[2] * 1 + a[0] + l[2] + -l[0] * 1,
            ),
            Interval::interval_lower(
                a[4] * 1 / 2 + -l[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + -l[2] * 1 / 2 + l[3],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + -l[3] * 1 + a[3] + l[4] + a[2] + -s[2] * 1 + -l[2] * 1
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 1 / 2 + -l[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + -l[2] * 1 / 2 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[4] * 1 + l[4] + a[2] * 2 + -a[0] * 1 + -l[2] * 2 + l[0]),
            Interval::interval_upper(
                a[4] * 1 / 2 + -l[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + -l[2] * 1 / 2 + l[3],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(l[1] * 4 + a[4] + -a[1] * 4 + -l[4] * 1 + a[0] * 3 + -l[0] * 3),
        Interval::interval_upper(a[4] + -l[4] * 1 + a[1] * 1 / 2 + -s[3] * 3 / 2 + -l[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                RealNumRep::new(-5, 1) + a[4] + -l[4] * 1 + a[2] + -s[3] * 2 + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[4] * 1 + l[4] + a[2] * 2 + -s[0] * 1 + -l[2] * 2),
            Interval::interval_upper(
                -a[4] * 1 / 2 + l[4] * 1 / 2 + a[2] * 3 / 2 + -a[1] * 1 + l[1] + -l[2] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[4] * 1 + l[4] + a[2] * 2 + -s[1] * 1 + -l[2] * 2),
            Interval::interval_upper(
                a[4] * 1 / 2 + -l[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + -l[2] * 1 / 2 + l[3],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] * 2 + l[3] * 2 + -a[3] * 2 + -l[4] * 2 + -a[2] * 1 + s[1] + l[2],
            ),
            Interval::interval_lower(
                a[4] * 1 / 2 + -l[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + -l[2] * 1 / 2 + l[3],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 / 2 + l[4] * 1 / 2 + a[2] * 3 / 2 + -s[1] * 1 + -l[2] * 3 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] * 3 / 2
                    + l[3] * 3 / 2
                    + -a[3] * 3 / 2
                    + -l[4] * 3 / 2
                    + -a[2] * 1 / 2
                    + s[0] * 1 / 2
                    + l[2] * 1 / 2,
            ),
            Interval::interval_lower(
                a[4] * 1 / 2 + -l[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + -l[2] * 1 / 2 + l[3],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -a[4] * 1 / 2 + l[4] * 1 / 2 + a[2] * 3 / 2 + -s[2] * 1 + -l[2] * 3 / 2,
            ),
            Interval::interval_upper(
                a[4] * 1 / 2 + -l[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + -l[2] * 1 / 2 + l[3],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -a[3] * 4 + a[2] * 4 + -s[1] * 1 + -l[2] * 4 + l[3] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -a[4] * 3 / 2 + l[4] * 3 / 2 + a[2] * 5 / 2 + -s[0] * 1 + -l[2] * 5 / 2,
            ),
            Interval::interval_upper(
                a[4] * 1 / 2 + -l[4] * 1 / 2 + -a[3] * 1 + a[2] * 1 / 2 + -l[2] * 1 / 2 + l[3],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -l[4] * 1 + a[0] * 1 / 3 + -s[3] * 4 / 3 + -l[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] * 1 / 2
                    + l[3] * 1 / 2
                    + -a[3] * 1 / 2
                    + -l[4] * 1 / 2
                    + a[1] * 1 / 2
                    + -s[2] * 1 / 2
                    + -l[1] * 1 / 2,
            ),
            Interval::interval_upper(
                a[4] * 1 / 3 + -l[4] * 1 + a[1] * 2 / 3 + -s[2] * 1 + -l[1] * 2 / 3 + l[3] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] * 2 / 3 + -l[4] * 2 / 3 + a[1] * 1 / 3 + -s[3] * 1 + -l[1] * 1 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[4] * 1 + l[4] + a[3] * 2 + -s[3] * 1 + -l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 2)
                    + a[4]
                    + -l[4] * 1
                    + -a[3] * 3 / 2
                    + s[1] * 1 / 2
                    + l[3] * 3 / 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + a[2] + -l[2] * 1 + -l[4] * 1 + -a[3] * 2 + l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[4] * 1 + l[4] + a[3] * 2 + -s[3] * 1 + -l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[4] * 4 + l[4] * 4 + a[3] * 5 + -s[0] * 1 + -l[3] * 5,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(-a[4] * 1 + -a[2] * 1 + l[2] + l[4] + a[3] * 2 + -l[3] * 2),
            Interval::interval_lower(-a[4] * 1 + l[4] + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[4] * 2 + -l[4] * 1 + a[3] * 3 + -s[1] * 1),
            Interval::interval_upper(-a[4] * 1 + l[4] + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1))
        || (RealNumRep::new(0, 1) <= -a[4] * 2 + a[3] * 3 + -a[1] * 1 + l[1] + -l[3] * 1))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 + l[4] + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] + l[3],
            ),
            Interval::interval_lower(
                a[4] + -l[4] * 1 + -a[3] * 2 + a[1] * 2 + -s[1] * 1 + -l[1] * 2 + l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[4] * 1 + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] + l[3],
            ),
            Interval::interval_lower(
                a[4] + a[2]
                    + -l[2] * 1
                    + -l[4] * 1
                    + -a[3] * 2
                    + a[1] * 2
                    + -s[2] * 2
                    + -l[1] * 2
                    + l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(-l[1] * 1 / 2 + a[4] + a[1] * 1 / 2 + -l[4] * 1 + -s[3] * 3 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1)
                    + a[4]
                    + -l[4] * 1
                    + -a[3] * 3 / 2
                    + a[1] * 1 / 2
                    + -l[1] * 1 / 2
                    + l[3] * 3 / 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + a[2] + -l[2] * 1 + -l[4] * 1 + -a[3] * 2 + l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1)
                    + -l[1] * 2
                    + a[4]
                    + a[1] * 2
                    + -l[4] * 1
                    + -a[2] * 3
                    + l[2] * 3,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + -l[4] * 1 + -a[2] * 2 + s[0] + l[2] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[4] * 2 + l[4] * 2 + a[3] * 3 + -s[2] * 1 + -l[3] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -l[4] * 1
                    + -a[3] * 1 / 2
                    + a[1] * 1 / 2
                    + -s[3] * 1
                    + -l[1] * 1 / 2
                    + l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -l[4] * 1
                    + -a[3] * 3 / 2
                    + a[1] * 3 / 2
                    + -s[1] * 1
                    + -l[1] * 3 / 2
                    + l[3] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -l[4] * 1 + -s[2] * 2 + s[1]),
        Interval::interval_upper(
            a[4] + l[3] + -a[3] * 1 + -l[4] * 1 + -s[2] * 1 / 2 + s[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(RealNumRep::new(0, 1)),
        Interval::interval_upper(a[4] + -l[4] * 1 + a[0] * 3 + -s[1] * 4 + -l[0] * 3),
        Interval::interval_upper(
            a[4] + l[3] + -a[3] * 1 + -l[4] * 1 + a[0] + -s[1] * 1 + -l[0] * 1,
        ),
        Interval::interval_upper(
            a[4] + -a[2] * 1 + l[2] + -l[4] * 1 + a[0] * 2 + -s[1] * 2 + -l[0] * 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] + l[3],
            ),
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_lower(
                a[4] + -l[4] * 1
                    + -a[3] * 5 / 2
                    + a[1] * 5 / 2
                    + -s[0] * 1
                    + -l[1] * 5 / 2
                    + l[3] * 5 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[4] * 1 + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] + l[3],
            ),
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + -a[2] * 3
                    + l[2] * 3
                    + -l[4] * 1
                    + a[3] * 2
                    + -a[1] * 2
                    + s[0] * 2
                    + l[1] * 2
                    + -l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] + a[2]
                    + -l[2] * 1
                    + -l[4] * 1
                    + -a[3] * 2
                    + a[1] * 2
                    + -s[1] * 2
                    + -l[1] * 2
                    + l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(l[1] == l[0]))
        || (a[4] * 2 + -l[4] * 2 + -a[3] * 3 + a[1] + l[3] * 3 + -l[0] * 1
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 + l[4] + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (l[4] == l[3])
            || (!(l[3] == l[2]))
            || (-a[4] * 2 + l[4] * 2 + a[3] * 3 + -a[1] * 1 + l[1] + -l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[2] + -l[2] * 1 + l[4] + a[1] + -s[0] * 1 + -l[1] * 1
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] * 2 + l[3] * 2 + -a[3] * 2 + -l[4] * 2 + -a[1] * 1 + s[0] + l[1],
            ),
            Interval::interval_lower(
                -a[4] * 2 / 3 + l[4] * 2 / 3 + a[1] * 5 / 3 + -s[0] * 1 + -l[1] * 5 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[4] + l[3] + -a[3] * 1 + -l[4] * 1 + -a[1] * 1 + s[0] + l[1]
                <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -a[2] * 5 + a[1] * 5 + -s[0] * 1 + -l[1] * 5 + l[2] * 5,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3]) || (-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] * 2 / 3 + -l[4] * 2 / 3 + a[1] * 1 / 3 + -s[4] * 1 + -l[1] * 1 / 3,
            ),
            Interval::interval_lower(a[4] + a[2] + -l[2] * 1 + -l[4] * 1 + -s[4] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3]) || (-a[4] * 1 + l[4] + a[1] + -l[1] * 1 <= RealNumRep::new(-15, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + l[3] + -a[3] * 1 + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (RealNumRep::new(0, 1)
            <= -a[4] * 1 + -l[3] * 1 + a[3] + l[4] + a[2] + -a[1] * 1 + l[1] + -l[2] * 1))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 2 + l[3] * 2 + -a[3] * 2 + -l[4] * 2 + -a[2] * 1 + s[0] + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(
                l[1] + -a[4] * 2 + -a[1] * 1 + l[4] * 2 + a[3] * 3 + -l[3] * 3,
            ),
            Interval::interval_lower(
                -a[4] * 2 + l[4] * 2 + a[3] * 3 + -a[1] * 1 + l[1] + -l[3] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3]) || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 1 / 3 + -l[4] * 1 / 3 + a[1] * 2 / 3 + -s[3] * 1 + -l[1] * 2 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 + a[2] + -l[2] * 1 + l[4] + a[1] * 2 + -s[0] * 2 + -l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 / 3 + l[4] * 1 / 3 + a[1] * 4 / 3 + -s[0] * 1 + -l[1] * 4 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                a[4] * 1 / 2
                    + l[3] * 1 / 2
                    + -a[3] * 1 / 2
                    + -l[4] * 1 / 2
                    + a[1] * 1 / 2
                    + -s[2] * 1 / 2
                    + -l[1] * 1 / 2,
            ),
            Interval::interval_upper(
                a[4] * 1 / 3 + -l[4] * 1 / 3 + a[1] * 2 / 3 + -s[2] * 1 + -l[1] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 + l[4] + a[3] * 2 + -s[2] * 1 + -l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] + l[3],
            ),
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[2] * 4 + a[1] * 4 + -s[0] * 1 + -l[1] * 4 + l[2] * 4,
            ),
            Interval::interval_upper(RealNumRep::new(0, 1)),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1 + -a[2] * 4 + a[1] * 4 + -s[1] * 1 + -l[1] * 4 + l[2] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] + l[3],
            ),
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[2] * 3 + a[1] * 3 + -s[1] * 1 + -l[1] * 3 + l[2] * 3,
            ),
            Interval::interval_upper(RealNumRep::new(0, 1)),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[3] * 1 + -a[2] * 1 + a[1] + -l[1] * 1 + l[2] + l[3],
            ),
            Interval::interval_upper(
                a[4] + -l[4] * 1 + -a[2] * 2 + a[1] * 2 + -s[2] * 1 + -l[1] * 2 + l[2] * 2,
            ),
            Interval::interval_upper(RealNumRep::new(0, 1)),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[4] + -l[4] * 1 + -a[1] * 4 + s[0] * 3 + l[1] * 4),
            Interval::interval_lower(
                RealNumRep::new(20, 3)
                    + a[4]
                    + -l[4] * 1
                    + -a[3] * 4 / 3
                    + s[0] * 1 / 3
                    + l[3] * 4 / 3,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + a[2] + -l[2] * 1 + -l[4] * 1 + -a[3] * 2 + l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 2)
                    + -l[1] * 1 / 2
                    + a[4]
                    + a[1] * 1 / 2
                    + -l[4] * 1
                    + -a[3] * 3 / 2
                    + l[3] * 3 / 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(20, 3)
                    + a[4]
                    + -l[4] * 1
                    + -a[3] * 4 / 3
                    + s[0] * 1 / 3
                    + l[3] * 4 / 3,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + a[2] + -l[2] * 1 + -l[4] * 1 + -a[3] * 2 + l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1] + -l[3] * 1
                <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[4] * 2 + l[4] * 2 + a[3] * 3 + -s[1] * 1 + -l[3] * 3),
            Interval::interval_upper(-a[4] * 1 + l[4] + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(l[1] + -a[4] * 2 + -a[1] * 1 + -l[4] * 1 + a[3] * 3),
            Interval::interval_upper(-a[4] * 3 + l[4] * 3 + a[3] * 4 + -s[0] * 1 + -l[3] * 4),
            Interval::interval_upper(-a[4] * 1 + l[4] + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-a[4] * 3 + l[4] * 3 + a[3] * 4 + -s[0] * 1 + -l[3] * 4),
            Interval::interval_upper(-a[4] * 1 + l[4] + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2),
            Interval::interval_upper(
                -a[4] * 2 + l[4] * 2 + a[3] * 3 + -a[1] * 1 + l[1] + -l[3] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + -l[3] * 1 + a[3] + l[4] + a[1] + -s[1] * 1 + -l[1] * 1
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -a[4] * 1 / 3 + l[4] * 1 / 3 + a[1] * 4 / 3 + -s[1] * 1 + -l[1] * 4 / 3,
            ),
            Interval::interval_lower(
                -a[4] * 1 + a[2] + -l[2] * 1 + l[4] + a[1] * 2 + -s[1] * 2 + -l[1] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3]) || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 1 / 2
                + l[3] * 1 / 2
                + -a[3] * 1 / 2
                + -l[4] * 1 / 2
                + a[1] * 1 / 2
                + -s[3] * 1 / 2
                + -l[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_lower(a[4] + -l[4] * 1 + -a[3] * 2 + s[2] + l[3] * 2),
            Interval::interval_upper(
                RealNumRep::new(-5, 1)
                    + a[4]
                    + l[3]
                    + -a[3] * 1
                    + -l[4] * 1
                    + a[1]
                    + -s[2] * 1
                    + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[4] + l[3] + -a[3] * 1 + -l[4] * 1 + -a[1] * 1 + s[0] + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + -l[3] * 1 + a[3] + l[4] + a[1] + -a[0] * 1 + -l[1] * 1 + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -a[4] * 1 / 3 + l[4] * 1 / 3 + a[1] * 4 / 3 + -a[0] * 1 + -l[1] * 4 / 3 + l[0],
            ),
            Interval::interval_lower(
                -a[4] * 1 + a[2] + -l[2] * 1 + l[4] + a[1] * 2 + -a[0] * 2 + -l[1] * 2 + l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -l[4] * 1 + -a[3] * 1 + a[1] + -s[3] * 1 + -l[1] * 1 + l[3],
            ),
            Interval::interval_lower(
                a[4] + l[3] + -a[3] * 1 + -l[4] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1)
                    + a[4]
                    + l[3]
                    + -a[3] * 1
                    + -l[4] * 1
                    + -a[2] * 1
                    + a[1]
                    + -l[1] * 1
                    + l[2],
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[4]
                    + l[3]
                    + -a[3] * 1
                    + -l[4] * 1
                    + -a[2] * 1 / 2
                    + s[0] * 1 / 2
                    + l[2] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[4] + l[3] + -a[3] * 1 + -l[4] * 1 + -a[2] * 1 + s[1] + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1)
                + a[4]
                + -a[2] * 1
                + l[2]
                + -l[4] * 1
                + -a[1] * 2
                + s[0] * 2
                + l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 1 + -s[3] * 1 + s[1] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                RealNumRep::new(-5, 2)
                    + a[4]
                    + -l[4] * 1
                    + a[1] * 1 / 2
                    + -s[3] * 3 / 2
                    + -l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(0, 1)),
            Interval::interval_upper(
                RealNumRep::new(-10, 1) + a[4] + -l[4] * 1 + a[1] * 2 + -s[2] * 3 + -l[1] * 2,
            ),
            Interval::interval_upper(a[4] + -l[4] * 1 + -a[3] * 2 + s[2] + l[3] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(20, 1) + a[4] + -l[4] * 1 + -a[1] * 4 + s[0] * 3 + l[1] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[0] * 1 + -s[3] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + a[1] + -a[0] * 1 + s[1] + -l[1] * 1 + l[2] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + -a[0] * 1 + s[1] * 2 + l[2] + l[0] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[2] * 2 + -a[1] * 2 + -s[3] * 1 + s[0] + l[1] * 2 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (a[3] + -a[2] * 1 + -l[3] * 1 + -s[2] * 1 + l[2] + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] + s[3] + -l[1] * 1 + l[2] * 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + -a[1] * 1 + s[3] + l[1] + -l[2] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 4 + a[1] * 4 + s[3] + -s[0] * 1 + -l[1] * 4 + l[2] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + -a[0] * 1 + s[3] + -l[1] * 3 + l[2] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + s[2] + -s[0] * 1 + -l[1] * 3 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[1] + -s[0] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (a[2] * 3 + -a[1] * 3 + -s[4] * 1 + s[0] + l[1] * 3 + -l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + -a[0] * 1 + s[2] + -l[1] * 2 + l[2] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-a[0] * 1 + -s[4] * 2 + s[2] * 3 + l[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-s[4] * 2 + s[2] * 3 + -s[1] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[2] + -s[1] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[3] + -s[2] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + s[3] + -s[1] * 1 + -l[1] * 3 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + s[3] + -s[2] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-s[4] * 3 + s[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-10, 1)));
    assert!(
        (-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-s[4] * 1 + s[2] <= RealNumRep::new(-5, 1))
    );
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[1] + l[2] <= RealNumRep::new(-10, 1)));
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + -a[0] * 1 + l[4] + -l[2] * 1 + s[1] + l[0]
                <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (a[3] + -a[1] * 1 + -s[3] * 2 + s[1] * 2 + l[1] + -l[3] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[3] + -a[2] * 1 + -s[3] * 1 + s[1] + l[2] + -l[3] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + -a[0] * 2 + s[2] * 2 + -l[1] * 2 + l[3] * 2 + l[0] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[1] + -a[0] * 2 + s[1] * 2 + -l[1] * 1 + l[3] + l[0] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-a[1] * 1 + -s[4] * 1 + s[2] * 2 + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (a[2] + -s[4] * 1 + -l[2] * 1 <= RealNumRep::new(-5, 1))
            || (-s[4] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-a[0] * 1 + -s[4] * 1 / 2 + s[1] * 3 / 2 + l[0] <= RealNumRep::new(0, 1))
            || (a[2] + -a[0] * 1 + -s[4] * 1 + -l[2] * 1 + s[1] + l[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[3] + -a[2] * 1 + -s[4] * 1 + s[2] + l[2] + -l[3] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-a[1] * 1 / 2 + -s[4] * 1 / 2 + l[1] * 1 / 2 + s[2] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[3] * 1 / 2 + s[1] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[3] * 2 + -a[2] * 2 + -s[4] * 1 + s[1] + l[2] * 2 + -l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))
            || (a[3] + -a[2] * 1 + -s[4] * 1 / 3 + s[0] * 1 / 3 <= RealNumRep::new(0, 1))
            || (a[3] * 2 + -a[2] * 2 + a[1] + -s[4] * 1 + -l[1] * 1 + l[2] * 2 + -l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-s[4] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1))
            || (a[2] * 2 + -s[4] * 2 + -l[2] * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (a[3] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 + s[2] + l[1] * 1 / 2 + -l[3] * 1 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (a[1] + -s[3] * 1 + -l[1] * 1 <= RealNumRep::new(-5, 1))
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))
            || (-l[3] * 1 + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2
                <= RealNumRep::new(-5, 1))
            || (a[3] * 2 + -a[2] * 3 + s[0] + l[2] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[2] * 3 + -a[0] * 1 + s[3] + -l[2] * 3 + l[3] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (l[3] == l[2])
            || (-a[3] * 1 / 2 + -a[1] * 1 / 2 + s[2] + l[1] * 1 / 2 + l[3] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (a[2] + -a[1] * 1 + -s[4] * 1 + s[2] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] * 1 / 2 + -a[1] * 3 / 2 + s[0] + l[1] * 3 / 2 + -l[3] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[3] + -a[2] * 2 + s[1] + l[2] * 2 + -l[3] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-l[3] * 1 + a[3] + -a[2] * 1 + a[1] + -s[3] * 1 + -l[1] * 1 + l[2]
                <= RealNumRep::new(0, 1))
            || (a[3] * 2 + -a[2] * 2 + -s[3] * 1 + s[0] + l[2] * 2 + -l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + s[3] + -s[2] * 1 + -l[2] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + -a[0] * 1 + s[2] + -l[2] * 2 + l[3] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-l[3] * 1 + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2
                <= RealNumRep::new(-5, 1))
            || (a[3] * 2 + -a[2] * 3 + s[0] + l[2] * 3 + -l[3] * 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[3] * 2 + -a[2] * 2 + a[1] + -s[4] * 1 + -l[1] * 1 + l[2] * 2 + -l[3] * 2
                <= RealNumRep::new(0, 1))
            || (a[3] * 3 + -a[2] * 3 + -s[4] * 1 + s[0] + l[2] * 3 + -l[3] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 4 + a[2] * 4 + s[3] + -s[0] * 1 + -l[2] * 4 + l[3] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[2] * 1 + s[3] + l[2] + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (a[1] * 1 / 2 + -s[4] * 1 / 2 + -l[1] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (a[2] + -s[4] * 1 + -l[2] * 1 <= RealNumRep::new(-5, 1))
            || (-s[4] * 1 / 3 + s[0] * 1 / 3 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (l[3] + -a[3] * 1 + a[2] + -a[1] * 1 + s[2] + l[1] + -l[2] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[2] * 3 + s[2] + -s[0] * 1 + -l[2] * 3 + l[3] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]))
            || (-a[3] * 1 + a[1] + s[2] * 2 / 3 + -s[0] * 2 / 3 + l[3] + -l[0] * 1
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]))
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[1] + s[2] * 2 / 3 + -s[0] * 2 / 3 + l[3] + -l[0] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]))
            || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[1] + s[2] * 2 / 3 + -s[0] * 2 / 3 + l[3] + -l[0] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(-10, 1))
            || (-a[2] * 1 + s[0] + l[2] <= RealNumRep::new(-15, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + -a[0] * 1 / 2 + s[2] * 3 / 2 + l[3] + l[0] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] + s[3] + -l[1] * 1 + l[2] * 2 <= RealNumRep::new(-10, 1))
            || (-a[2] * 1 + s[3] * 2 / 3 + s[0] * 1 / 3 + l[2] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[2] * 3 + s[3] + -s[1] * 1 + -l[2] * 3 + l[3] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + -a[1] * 1 + l[1] + s[2] * 2 + l[3] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + s[2] * 3 / 2 + -s[1] * 1 / 2 + l[3] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + s[2] + -s[1] * 1 + -l[2] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + -a[0] * 1 + -l[2] * 1 + s[1] + l[3] + l[0]
                <= RealNumRep::new(-5, 1))
            || (-a[3] * 1 + -a[0] * 2 + s[1] * 3 + l[3] + l[0] * 2 <= RealNumRep::new(-5, 1))
    );
    if !((l[3] == l[2])
        || (-a[3] * 2
            + a[2] * 2
            + a[1] * 2
            + -l[2] * 2
            + -s[2] * 1
            + -s[0] * 1
            + -l[1] * 2
            + l[3] * 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1
                + -a[3] * 5 / 2
                + a[1] * 5 / 2
                + -s[0] * 1
                + -l[1] * 5 / 2
                + l[3] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1
                + -a[3] * 5 / 2
                + a[1] * 5 / 2
                + -s[0] * 1
                + -l[1] * 5 / 2
                + l[3] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1
                + -a[3] * 5 / 2
                + a[1] * 5 / 2
                + -s[0] * 1
                + -l[1] * 5 / 2
                + l[3] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1
                + -a[3] * 5 / 2
                + a[1] * 5 / 2
                + -s[0] * 1
                + -l[1] * 5 / 2
                + l[3] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[3] * 2 + -a[1] * 2 + -s[3] * 2 + s[0] * 2 + l[1] * 2 + -l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 3 + a[1] * 3 + -a[0] * 2 + s[3] * 2 + -l[1] * 3 + l[3] * 3 + l[0] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] * 2 + a[1] + -s[4] * 1 + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] * 1 / 2 + -a[1] * 1 / 2 + -s[2] * 1 + s[0] + l[1] * 1 / 2 + -l[3] * 1 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2
                + a[2] * 2
                + a[1] * 2
                + -l[2] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] * 3 / 2 + -a[1] * 3 / 2 + -s[4] * 1 + s[0] + l[1] * 3 / 2 + -l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2])
        || (-a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3] * 2
            <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1
                + -a[3] * 5 / 2
                + a[1] * 5 / 2
                + -s[0] * 1
                + -l[1] * 5 / 2
                + l[3] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (!(l[1] == l[0]))
            || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[1] + s[2] * 2 / 3 + -s[0] * 2 / 3 + l[3] + -l[0] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + -l[2] * 1 + s[1] * 1 / 2 + -s[0] * 1 / 2 + l[3]
                <= RealNumRep::new(-5, 1))
            || (-a[3] * 1 + s[1] * 2 + -s[0] * 1 + l[3] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] * 2 + a[1] + -s[4] * 1 + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[2] * 2 + a[1] + -s[4] * 1 + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -l[4] * 1
                + -a[3] * 5 / 2
                + a[1] * 5 / 2
                + -s[0] * 1
                + -l[1] * 5 / 2
                + l[3] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] * 2 + a[1] + -s[4] * 1 + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2
                + a[2] * 2
                + a[1] * 2
                + -l[2] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[2] * 2 + -s[1] * 2 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 3 + a[1] * 3 + s[3] * 2 + -s[1] * 2 + -l[1] * 3 + l[3] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + s[2] * 4 / 3 + -s[0] * 1 / 3 + l[3] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + s[1] + -s[0] * 1 + -l[2] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-a[2] * 1 + -a[1] * 1 + s[3] + l[2] + s[0] + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-l[3] * 1 + a[3] + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (a[2] * 2 + -a[1] * 2 + -s[4] * 1 + s[1] + l[1] * 2 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(l[0] >= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[4] + -l[4] * 1 + -s[4] * 1)]);
    ret = ret.intersection(&tmp);
    assert!(l[3] + -a[3] * 1 + s[3] <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[2] * 1 + l[2] + s[2] <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_s_4_t_5_l_5(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 5);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3])]);
    ret = ret.intersection(&tmp);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])));
    assert!((l[2] == l[1]) || (-a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(-5, 1)));
    assert!((!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)) || (l[2] == l[1]));
    assert!(
        (l[2] == l[1])
            || (l[3] == l[2])
            || (RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
            || (-a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2 + l[3]
                == RealNumRep::new(0, 1))
    );
    assert!((!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)) || (l[4] == l[3]));
    assert!(
        (l[2] == l[1])
            || (a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3 + -l[4] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (l[4] == l[3])
            || (-a[4] * 1 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[4]
                == RealNumRep::new(0, 1))
            || (!(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3 + -l[4] * 1
                <= RealNumRep::new(0, 1)))
            || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (l[2] == l[1])
            || (l[4] == l[3])
            || (-a[4] * 1 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[4]
                == RealNumRep::new(0, 1))
            || (-a[4] * 1
                + a[3]
                + -a[2] * 1
                + a[1] * 2
                + -l[3] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[2]
                + l[4]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (l[4] == l[3])
            || (-a[4] * 1 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[4]
                == RealNumRep::new(0, 1))
            || (!(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3 + -l[4] * 1
                <= RealNumRep::new(0, 1)))
            || (-a[4] * 1
                + a[3]
                + a[2] * 2
                + -a[1] * 1
                + -l[3] * 1
                + -s[3] * 1
                + l[1]
                + -l[2] * 2
                + l[4]
                <= RealNumRep::new(0, 1))
    );
    if !((l[1] == l[0])
        || (l[4] == l[3])
        || (-a[4] * 1 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[4]
            == RealNumRep::new(0, 1))
        || (!(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3 + -l[4] * 1
            <= RealNumRep::new(0, 1))))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[1] == l[0])
            || (l[3] == l[2])
            || (-a[3] * 1 + a[2] * 2 + -a[1] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    );
    assert!((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)));
    assert!(
        (l[2] == l[1])
            || (l[3] == l[2])
            || (-a[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2 + l[4]
                == RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)
    );
    assert!(
        (l[3] == l[2])
            || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1))
            || (RealNumRep::new(0, 1) <= -a[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 1)
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 2 + -a[2] * 2 + s[3] + l[2] * 2 + -l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + s[3] + -s[1] * 1 + -l[1] * 3 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[3] + -l[3] * 1),
        Interval::interval_lower(RealNumRep::new(5, 1) + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -a[1] * 1 + s[2] + l[1] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + a[2] + -a[1] * 1 + -l[3] * 1 + l[1] + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] + s[3] + -l[1] * 1 + l[2] * 2 <= RealNumRep::new(-5, 1))
    );
    if !((l[4] == l[3])
        || (-a[4] * 3 + a[1] * 3 + s[2] * 3 + -s[0] * 3 + -l[1] * 3 + l[4] * 3
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 1 + -s[3] * 1 + s[1] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[3] == l[2]) || (-a[3] * 1 + a[2] + -l[2] * 1 + l[3] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[2] == l[1])
            || (!(l[1] == l[0]))
            || (a[3] + -a[2] * 2 + a[1] + l[2] * 2 + -l[3] * 1 + -l[0] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[4] == l[3])
            || (-a[4] * 1 + a[3] * 2 + -a[2] * 1 + -l[2] * 1 + l[4] <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))
    );
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[3] == l[2])
            || (RealNumRep::new(0, 1)
                <= -a[4] * 1 + a[3] * 2 + -a[2] * 1 + -l[3] * 2 + l[2] + l[4])
    );
    assert!(-a[1] * 1 + l[1] + s[1] <= RealNumRep::new(0, 1));
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + a[1] + -a[0] * 1 + s[1] + -l[1] * 1 + l[2] + l[0]
                <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[2] * 1 + s[2] + l[2] + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 2 + s[0] + l[1] * 2 + -l[2] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] * 1 / 2 + -a[1] * 1 / 2 + -s[2] * 1 + s[0] + l[1] * 1 / 2 + -l[3] * 1 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (l[4] == l[3])
            || (-a[4] * 1 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[4]
                == RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[3] + a[2] + -l[3] * 1 + -s[2] * 1 + -l[2] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (!(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3 + -l[4] * 1
                <= RealNumRep::new(0, 1)))
    );
    assert!(
        (l[1] == l[0])
            || (l[4] == l[3])
            || (-a[4] * 1 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[4]
                == RealNumRep::new(0, 1))
            || (!(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3 + -l[4] * 1
                <= RealNumRep::new(0, 1)))
            || (-a[4] * 1 + a[3] + a[2] + -a[1] * 1 + -l[3] * 1 + l[1] + -l[2] * 1 + l[4]
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + -a[0] * 2 + s[2] * 2 + -l[1] * 2 + l[3] * 2 + l[0] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(0, 1));
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2 + a[2] * 2 + s[3] * 2 + -s[2] * 2 + -l[2] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[4] == l[3])
            || (-a[4] * 1 / 2 + -a[2] * 1 / 2 + s[3] + l[2] * 1 / 2 + l[4] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[2] + -l[3] * 1 + -s[2] * 1 + -l[2] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3 / 2
                + a[2] * 3 / 2
                + -a[0] * 1
                + s[3]
                + -l[2] * 3 / 2
                + l[4] * 3 / 2
                + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[2] + -l[3] * 1 + -s[2] * 1 + -l[2] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3 / 2 + a[2] * 3 / 2 + s[3] + -s[1] * 1 + -l[2] * 3 / 2 + l[4] * 3 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + -a[0] * 1 + s[2] + -l[1] * 2 + l[2] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (a[3] + -a[2] * 1 + -s[2] * 1 + s[0] + l[2] + -l[3] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[3] + -s[2] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1))
            || (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
    );
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] + -a[2] * 1 + s[3] + l[2] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[3] * 1 / 2 + -a[1] * 3 / 2 + s[0] + l[1] * 3 / 2 + -l[3] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + -a[0] * 1 + s[3] + -l[1] * 3 + l[2] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + a[1] * 3 + -a[0] * 3 + s[3] * 3 + -l[1] * 3 + l[4] * 3 + l[0] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[2] * 3 + a[1] * 3 + -a[0] * 1 + s[3] + -l[1] * 3 + l[2] * 3 + l[0]
                <= RealNumRep::new(0, 1))
            || (!(-a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2 + l[3]
                == RealNumRep::new(0, 1)))
    );
    assert!((l[3] == l[2]) || (-a[3] * 1 + s[3] + l[3] <= RealNumRep::new(-5, 1)));
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-10, 1)));
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(s[3] * 3 + -s[1] * 2)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-a[0] * 1 + -s[3] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1))
    );
    assert!((l[4] == l[3]) || (-a[4] * 1 + a[3] + -l[3] * 1 + l[4] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[1] == l[0])
            || (a[2] * 2 + -a[1] * 2 + -s[3] * 1 + s[0] + l[1] * 2 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(
                a[4] * 1 / 2 + -a[2] * 1 / 2 + s[2] + l[2] * 1 / 2 + -l[4] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[3] + -l[3] * 1),
        Interval::interval_lower(s[2] * 4 / 3 + -s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + a[1] * 3 + s[3] * 3 + -s[1] * 3 + -l[1] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(a[2] * 3 + -a[1] * 3 + s[0] + l[1] * 3 + -l[2] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[2] + -s[1] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[1] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3 + a[1] * 3 + s[2] * 3 + -s[0] * 3 + -l[1] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + s[2] + -s[0] * 1 + -l[1] * 3 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[1] + -s[0] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(a[2] * 2 + -a[1] * 2 + s[1] + l[1] * 2 + -l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(a[2] + -a[1] * 1 + s[2] + l[1] + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (RealNumRep::new(0, 1)
                <= -a[3] * 1 + a[2] * 2 + -a[1] * 1 + -l[2] * 2 + l[1] + l[3])
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] * 3 / 2 + -a[1] * 3 / 2 + s[0] + l[1] * 3 / 2 + -l[3] * 3 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[1] * 1 + s[0] + l[1] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1))
            || (a[4] + -a[3] * 2 + a[2] + -l[1] * 1 + l[3] * 2 + -l[4] * 1
                <= RealNumRep::new(-5, 1))
            || (RealNumRep::new(0, 1) <= -a[4] * 2 + a[3] * 3 + -a[1] * 1 + l[1] + -l[3] * 1)
    );
    if !((l[3] == l[2])
        || (RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (-a[4] * 2 + a[3] * 3 + -a[1] * 1 + l[1] + -l[3] * 3 + l[4] * 2
            == RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= l[3] + -l[4] * 1))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + a[2] + -l[1] * 1 + l[3] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (RealNumRep::new(0, 1)
            <= a[4] + -a[2] * 3 + -a[1] * 1 + s[1] * 3 + l[1] + l[2] * 3 + -l[4] * 1))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(
                a[4] * 2 / 3 + -a[1] * 2 / 3 + s[1] + l[1] * 2 / 3 + -l[4] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[4] + -a[2] * 1 + -a[1] * 2 + l[2] + s[0] * 2 + l[1] * 2 + -l[4] * 1
                <= RealNumRep::new(-5, 1))
    );
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1)
            <= a[4] + -a[2] * 3 + -a[1] * 1 + s[1] * 3 + l[1] + l[2] * 3 + -l[4] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(a[2] * 2 + -l[2] * 2 + -s[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 3 + -a[1] * 3 + s[2] + l[1] * 3 + -l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2 / 3 + a[1] * 2 / 3 + s[3] + -s[2] * 1 + -l[1] * 2 / 3 + l[4] * 2 / 3
                <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 4 + -a[1] * 4 + a[0] + l[1] * 4 + -l[2] * 4 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[3] + -l[3] * 1),
        Interval::interval_lower(-a[0] * 1 / 2 + s[2] * 3 / 2 + l[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[1] * 1 + s[1] + l[1] + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[0] + l[1] + -l[4] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + s[3] + -s[2] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
    );
    if !(a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(s[2] * 4 + -s[0] * 3)]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 2 + -a[1] * 2 + s[3] + l[1] * 2 + -l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + a[1] + -l[3] * 1 + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 3 + -a[2] * 3 + s[2] + l[2] * 3 + -l[3] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 4 + -a[2] * 4 + s[1] + l[2] * 4 + -l[3] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 3 + -a[2] * 3 + a[1] + -l[1] * 1 + l[2] * 3 + -l[3] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + -a[1] * 1 + l[1] + s[3] + -l[2] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[1] * 1 + s[1] + l[1] + -l[3] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3 + a[1] * 3 + s[2] * 3 + -s[0] * 3 + -l[1] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + -a[2] * 1 + s[3] + l[1] + -l[3] * 1 + l[4]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 4 + a[1] * 4 + s[3] + -s[0] * 1 + -l[1] * 4 + l[2] * 4
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[3] + -l[3] * 1),
        Interval::interval_lower(s[2] * 3 / 2 + -s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[4] == l[3])
            || (RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
            || (-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[1] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1)
                <= a[4] + -a[2] * 3 + a[1] * 2 + -l[4] * 1 + -l[1] * 2 + l[2] * 3)
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(RealNumRep::new(5, 1) + -a[1] * 1 + s[2] * 2 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3]) || (!(l[1] == l[0])) || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 / 3 + -a[1] * 2 / 3 + s[3] + -l[4] * 2 / 3 + l[0] * 2 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + -a[1] * 1 + -l[3] * 1 + s[3] + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(
                a[3] * 1 / 2 + -a[1] * 1 / 2 + s[2] + l[1] * 1 / 2 + -l[3] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    assert!(
        (l[2] == l[1])
            || (a[4]
                + -a[3] * 1
                + -a[2] * 2
                + a[1]
                + l[3]
                + s[2]
                + -l[1] * 1
                + l[2] * 2
                + -l[4] * 1
                <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[1] + -s[3] * 1 + -l[1] * 1 <= RealNumRep::new(-5, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (RealNumRep::new(0, 1)
                <= -a[4] * 2 + a[3] * 3 + -a[1] * 1 + -l[3] * 3 + l[1] + l[4] * 2)
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + s[3] + -s[2] * 1 + -l[2] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + a[1] * 3 + s[2] * 3 + -s[0] * 3 + -l[1] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2
                + a[3] * 2
                + a[1] * 2
                + -l[3] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + a[1] * 3 + s[2] * 3 + -s[0] * 3 + -l[1] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[3] * 2 + a[1] + -l[3] * 2 + -s[0] * 1 + -l[1] * 1 + l[4] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] + -a[1] * 1 + -s[3] * 1 + s[0] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))
    );
    assert!(
        (l[3] == l[2])
            || (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (a[4] + -a[3] * 1 + -s[2] * 1 + s[0] + l[3] + -l[4] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 4 + a[1] * 4 + s[3] * 3 + -s[0] * 3 + -l[1] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3
                + a[3] * 3
                + a[1] * 3
                + -l[3] * 3
                + -s[3] * 1
                + -s[0] * 2
                + -l[1] * 3
                + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(
                a[4] * 1 / 3 + -a[1] * 1 / 3 + s[2] + l[1] * 1 / 3 + -l[3] * 1 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (a[3] + -a[2] * 1 + -s[3] * 1 + s[1] + l[2] + -l[3] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (a[4] + -a[3] * 1 + -l[4] * 1 + -s[3] * 1 + l[3] + s[1] <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + -a[0] * 1 + s[1] + -l[3] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[3] + -a[2] * 2 + s[1] + l[2] * 2 + -l[3] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + -a[0] * 1 + s[1] * 2 + l[2] + l[0] <= RealNumRep::new(-5, 1))
    );
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(s[3] * 2 + -s[0] * 1),
            Interval::interval_upper(-a[1] * 2 + l[1] * 2 + s[3] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (a[3] * 2 + -a[2] * 3 + s[0] + l[2] * 3 + -l[3] * 2 <= RealNumRep::new(-5, 1))
            || (a[3] + -a[2] * 2 + a[1] + -l[3] * 1 + -l[1] * 1 + l[2] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[2] + -a[1] * 1 + l[4] + s[3] + l[1] + -l[2] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1] + -l[3] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!((l[4] == l[3]) || (-a[4] * 1 + s[3] + l[4] <= RealNumRep::new(-10, 1)));
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] * 2 + -a[2] * 2 + s[1] + l[2] * 2 + -l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (a[4] + -a[3] * 2 + a[2] + -l[1] * 1 + l[3] * 2 + -l[4] * 1
                <= RealNumRep::new(-5, 1))
            || (RealNumRep::new(0, 1)
                <= -a[4] * 2 + a[3] * 3 + -a[1] * 1 + -l[3] * 3 + l[1] + l[4] * 2)
    );
    assert!(
        (l[3] == l[2])
            || (-a[4] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)
            || (RealNumRep::new(0, 1)
                <= -a[4] * 2 + a[3] * 3 + -a[1] * 1 + -l[3] * 3 + l[1] + l[4] * 2)
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[1] + -a[0] * 2 + s[1] * 2 + -l[1] * 1 + l[3] + l[0] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1)
                <= -a[4] * 2 + a[3] * 3 + -a[1] * 1 + -l[3] * 3 + l[1] + l[4] * 2)
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1)
                <= -a[4] * 2 + a[3] * 3 + -a[1] * 1 + -l[3] * 3 + l[1] + l[4] * 2)
    );
    assert!(
        (RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
            || (-a[4] * 2 + a[3] * 3 + -a[1] * 1 + l[1] + -l[3] * 3 + l[4] * 2
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[2] * 2 + -s[1] * 2 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2])
        || (RealNumRep::new(0, 1)
            <= -a[4] * 2 + a[3] * 3 + -a[1] * 1 + -l[3] * 3 + l[1] + l[4] * 2))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + a[2] + -l[1] * 1 + l[3] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[2] * 1 + s[1] + l[2] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[2] + -l[3] * 1 + -s[2] * 1 + -l[2] * 1 + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 + -a[2] * 2 + a[0] + l[2] * 2 + -l[4] * 2 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 / 2
            + a[3] * 1 / 2
            + a[2] * 1 / 2
            + -a[1] * 1 / 2
            + l[3] * 1 / 2
            + -l[2] * 3 / 2
            + l[1] * 1 / 2
            + l[4] * 1 / 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 3 / 2 + -a[2] * 3 / 2 + a[1] + -l[1] * 1 + l[2] * 3 / 2 + -l[4] * 3 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 / 2
            + a[3] * 1 / 2
            + a[2] * 1 / 2
            + -a[1] * 1 / 2
            + l[3] * 1 / 2
            + -l[2] * 3 / 2
            + l[1] * 1 / 2
            + l[4] * 1 / 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 + -a[2] * 2 + a[0] + l[2] * 2 + -l[4] * 2 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 2 + a[3] * 2 + a[2] + -a[0] * 1 + -l[3] * 2 + -l[2] * 1 + l[4] * 2 + l[0]
            <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 + -a[2] * 2 + a[0] + l[2] * 2 + -l[4] * 2 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 + -a[2] * 2 + a[0] + l[2] * 2 + -l[4] * 2 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 / 2
                + a[3] * 1 / 2
                + a[2] * 1 / 2
                + -a[1] * 1 / 2
                + l[3] * 1 / 2
                + -l[2] * 3 / 2
                + l[1] * 1 / 2
                + l[4] * 1 / 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[2] + -a[1] * 2 + l[1] * 2 + s[2] * 2 + -l[2] * 1 + l[4]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 / 2
                + a[3] * 1 / 2
                + a[2] * 1 / 2
                + -a[1] * 1 / 2
                + l[3] * 1 / 2
                + -l[2] * 3 / 2
                + l[1] * 1 / 2
                + l[4] * 1 / 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[2] + -a[0] * 1 + s[2] + -l[2] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!((l[4] == l[3]) || (-a[4] * 1 + a[2] + -l[2] * 1 + l[4] <= RealNumRep::new(-10, 1)));
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 4 + -a[1] * 4 + s[1] + l[1] * 4 + -l[2] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + s[1] + -s[0] * 1 + -l[2] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (l[4] == l[3])
            || (-a[4] * 2 / 3 + -a[1] * 1 / 3 + s[3] + l[1] * 1 / 3 + l[4] * 2 / 3
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + -a[2] * 1 + l[2] + s[3] * 2 + l[4] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1] <= RealNumRep::new(-5, 1))
    );
    if !(!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 1 / 2 + -s[0] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(s[1] * 2 + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 / 2
                + a[2] * 1 / 2
                + -a[0] * 1
                + s[1]
                + -l[2] * 1 / 2
                + l[4] * 1 / 2
                + l[0]
                <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] * 5 + -a[1] * 5 + s[0] + l[1] * 5 + -l[2] * 5,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[3] * 1 / 2 + s[1] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] + -a[1] * 1 + -s[3] * 2 + s[1] * 2 + l[1] + -l[3] * 1
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    assert!(
        (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[2] * 1 + l[2] + s[3] + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-a[2] * 1 + -a[1] * 1 + l[2] + s[3] + s[0] + l[1] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[3] + -l[3] * 1),
        Interval::interval_lower(-a[0] * 2 + s[1] * 3 + l[0] * 2),
        Interval::interval_lower(a[2] + -a[0] * 1 + -l[2] * 1 + s[1] + l[0]),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[2] == l[1])
        || (RealNumRep::new(0, 1)
            <= a[3] * 2 + -a[2] * 2 + -a[1] * 2 + s[0] * 2 + l[1] * 2 + l[2] * 2 + -l[3] * 2))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] * 3 + -a[2] * 3 + s[0] + l[2] * 3 + -l[3] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + a[3] * 3 + -a[0] * 1 + s[3] + -l[3] * 3 + l[4] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (a[4]
                + -a[3] * 2
                + a[2]
                + a[1]
                + -l[2] * 1
                + -s[2] * 1
                + -l[1] * 1
                + l[3] * 2
                + -l[4] * 1
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1)
                <= -a[4] * 2 + a[3] * 3 + -a[1] * 1 + -l[3] * 3 + l[1] + l[4] * 2)
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[1] * 2 + -a[0] * 3 + s[2] * 3 + -l[1] * 2 + l[4] * 2 + l[0] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[4] + -a[1] * 1 + -s[3] * 3 + s[1] * 3 + l[1] + -l[4] * 1
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1])
    );
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1)
            <= a[3] + -a[2] * 1 + -a[1] * 1 + s[0] + l[1] + l[2] + -l[3] * 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] * 2 + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2 + -l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[3] + -l[3] * 1),
        Interval::interval_lower(-a[1] * 1 + l[1] + s[2] * 2),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3
                + a[3] * 3
                + -a[1] * 3 / 2
                + l[1] * 3 / 2
                + s[3] * 3 / 2
                + -l[2] * 3
                + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))
    );
    if !((l[4] == l[3]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 3 + -a[3] * 3 + a[1] + -l[1] * 1 + l[2] * 3 + -l[4] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 / 2
                + a[3] * 1 / 2
                + -a[1] * 1 / 2
                + l[3] * 1 / 2
                + s[2] * 1 / 2
                + l[1] * 1 / 2
                + -l[2] * 1
                + l[4] * 1 / 2
                <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))
    );
    if !(a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -l[2] * 1 + s[2] * 2 + -s[0] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (l[4] == l[3])
            || (-a[4] * 1
                + a[3] * 2
                + -a[2] * 1
                + -a[1] * 1
                + l[2]
                + s[1]
                + l[1]
                + -l[3] * 2
                + l[4]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + -s[2] * 1 + s[0] * 2 + l[1] + -l[4] * 1
                <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2])
        || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 1 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2
                + a[2] * 2
                + a[1] * 2
                + -l[2] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1)
                <= -a[4] * 2 + a[3] * 3 + -a[1] * 1 + -l[3] * 3 + l[1] + l[4] * 2)
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[2] * 3 + -a[0] * 1 + s[3] + -l[2] * 3 + l[3] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[4] * 1 / 3 + -a[1] * 4 / 3 + s[0] + l[1] * 4 / 3 + -l[4] * 1 / 3
                <= RealNumRep::new(-5, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_upper(a[2] * 2 + -l[2] * 2 + -s[1] * 1),
            Interval::interval_lower(
                a[4] * 1 / 2
                    + a[2] * 1 / 2
                    + -a[1] * 1 / 2
                    + -l[2] * 1 / 2
                    + s[1] * 1 / 2
                    + l[1] * 1 / 2
                    + -l[4] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 / 2 + a[2] * 1 / 2 + -a[0] * 1 + s[1] + -l[2] * 1 / 2 + l[4] * 1 / 2 + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 / 2
                + a[3] * 1 / 2
                + a[2] * 1 / 2
                + -a[1] * 1 / 2
                + l[3] * 1 / 2
                + -l[2] * 3 / 2
                + l[1] * 1 / 2
                + l[4] * 1 / 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 / 2
                + a[2] * 1 / 2
                + -a[0] * 1
                + s[1]
                + -l[2] * 1 / 2
                + l[4] * 1 / 2
                + l[0]
                <= RealNumRep::new(0, 1))
    );
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + -l[3] * 1 + s[3] + -s[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
    );
    assert!((l[3] == l[2]) || (-a[3] * 1 + s[2] + l[3] <= RealNumRep::new(-10, 1)));
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-15, 1) + a[2] * 3 + -s[1] * 2 + -l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 4 + -a[2] * 4 + a[0] + l[2] * 4 + -l[3] * 4 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + -a[0] * 1 + s[1] + -l[2] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (RealNumRep::new(0, 1)
                <= -a[4] * 2 + a[3] * 3 + -a[1] * 1 + -l[3] * 3 + l[1] + l[4] * 2)
            || (-a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3] * 2
                <= RealNumRep::new(-5, 1))
    );
    if !((l[3] == l[2])
        || (RealNumRep::new(0, 1)
            <= -a[4] * 2 + a[3] * 3 + -a[1] * 1 + -l[3] * 3 + l[1] + l[4] * 2))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 1 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[3] == l[2]) || (-a[3] * 1 + a[1] + -l[1] * 1 + l[3] <= RealNumRep::new(-10, 1)));
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + -a[0] * 1 + -l[2] * 1 + s[1] + l[3] + l[0]
                <= RealNumRep::new(-5, 1))
            || (-a[3] * 1 + -a[0] * 2 + s[1] * 3 + l[3] + l[0] * 2 <= RealNumRep::new(-5, 1))
    );
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1))
        || (a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3 + -l[3] * 1
            <= RealNumRep::new(-10, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 3 / 2 + -a[2] * 3 / 2 + s[0] + l[2] * 3 / 2 + -l[3] * 3 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 1 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[3] * 1 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (!(-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-5, 1)))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(-10, 1))
            || (-a[2] * 1 + s[0] + l[2] <= RealNumRep::new(-15, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[3] + -l[3] * 1),
        Interval::interval_lower(RealNumRep::new(10, 1) + s[1]),
        Interval::interval_lower(RealNumRep::new(5, 1) + a[2] + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[1] + l[2] + -l[4] * 1
                <= RealNumRep::new(0, 1))
    );
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 4 + -a[3] * 4 + a[0] + l[3] * 4 + -l[4] * 4 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 + -a[3] * 5 + s[0] + l[3] * 5 + -l[4] * 5,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + a[2] + -l[1] * 1 + l[3] + -l[4] * 1),
            Interval::interval_lower(a[4] * 2 + -a[3] * 2 + s[1] + l[3] * 2 + -l[4] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + a[2] + -l[1] * 1 + l[3] + -l[4] * 1),
            Interval::interval_lower(a[4] * 3 + -a[3] * 3 + s[0] + l[3] * 3 + -l[4] * 3),
            Interval::interval_lower(
                a[4] * 2 + -a[3] * 2 + a[1] + -l[1] * 1 + l[3] * 2 + -l[4] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 3 + -a[3] * 3 + a[1] + -l[1] * 1 + l[3] * 3 + -l[4] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 3 + -a[3] * 3 + s[2] + l[3] * 3 + -l[4] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2 + a[3] * 2 + s[1] + -s[0] * 1 + -l[3] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(
                a[4] * 1 / 3 + -a[1] * 1 / 3 + s[2] + l[1] * 1 / 3 + -l[4] * 1 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[1] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[1] * 2 + s[2] * 3 + -s[1] * 3 + -l[1] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-20, 1) + a[1] * 4 + -s[0] * 3 + -l[1] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-10, 1) + a[2] + a[1] * 2 + -l[2] * 1 + -s[0] * 2 + -l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + -a[2] * 1 + a[1] + l[2] + s[3] * 2 + -s[2] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(0, 1))
    );
    if !(a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + -l[3] * 1 + s[2] + -s[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[3] + -l[3] * 1),
        Interval::interval_lower(RealNumRep::new(10, 1) + a[1] + -l[1] * 1),
        Interval::interval_lower(RealNumRep::new(15, 1) + s[0]),
        Interval::interval_lower(RealNumRep::new(5, 1) + a[2] + -l[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (a[4] * 1 / 3 + -a[1] * 1 / 3 + -s[2] * 1 + s[0] + l[1] * 1 / 3 + -l[4] * 1 / 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[2] * 3 + s[2] + -s[0] * 1 + -l[2] * 3 + l[3] * 3
                <= RealNumRep::new(0, 1))
    );
    if !((l[4] == l[3]) || (-a[4] * 1 + a[1] + -l[1] * 1 + l[4] <= RealNumRep::new(-15, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + -l[3] * 1 + l[4] <= RealNumRep::new(-10, 1))
            || (-a[4] * 1 + s[2] + l[4] <= RealNumRep::new(-15, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-10, 1) + a[3] * 2 + -s[2] * 1 + -l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (a[4] + -a[3] * 2 + s[2] + l[3] * 2 + -l[4] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[1] + l[2] <= RealNumRep::new(-10, 1)));
    assert!(
        (l[2] == l[1])
            || (a[4] * 1 / 2 + -a[2] * 1 / 2 + -s[3] * 1 + s[1] + l[2] * 1 / 2 + -l[4] * 1 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + -a[0] * 1 + s[2] + -l[2] * 2 + l[3] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + s[2] + -s[1] * 1 + -l[2] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[4] + -a[2] * 1 + -s[3] * 1 + s[0] + l[2] + -l[4] * 1 <= RealNumRep::new(0, 1))
            || (a[4] + -a[2] * 1 + a[1] * 2 + -l[1] * 2 + -s[3] * 2 + l[2] + -l[4] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] + -l[1] * 1 + s[3] + l[2] * 2 <= RealNumRep::new(-10, 1))
            || (-a[2] * 1 + s[3] * 2 / 3 + s[0] * 1 / 3 + l[2] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1))
            || (a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3 + -l[3] * 1
                <= RealNumRep::new(-10, 1))
            || (a[4] + -a[2] * 2 + s[0] + l[2] * 2 + -l[4] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[3] * 2 + -a[2] * 2 + -s[3] * 1 + s[0] + l[2] * 2 + -l[3] * 2
                <= RealNumRep::new(0, 1))
            || (a[3] + -a[2] * 1 + a[1] + -l[3] * 1 + -s[3] * 1 + -l[1] * 1 + l[2]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] * 2 + -a[1] * 2 + -s[3] * 2 + s[0] * 2 + l[1] * 2 + -l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[1] * 3 + -a[0] * 2 + s[3] * 2 + -l[1] * 3 + l[3] * 3 + l[0] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3 / 2
                + a[2] * 3 / 2
                + -a[0] * 1
                + s[3]
                + -l[2] * 3 / 2
                + l[4] * 3 / 2
                + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + -a[1] * 1 + l[3] + s[2] + l[1] + -l[2] * 1
                <= RealNumRep::new(0, 1))
    );
    if !((l[2] == l[1])
        || (RealNumRep::new(0, 1)
            <= -a[4] * 1 + a[3] + a[2] + -a[1] * 1 + -l[3] * 1 + l[1] + -l[2] * 1 + l[4]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] * 3 / 2 + -a[2] * 3 / 2 + s[0] + l[2] * 3 / 2 + -l[4] * 3 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] * 3 / 2 + -a[2] * 3 / 2 + s[0] + l[2] * 3 / 2 + -l[4] * 3 / 2,
            ),
            Interval::interval_lower(a[4] + -a[2] * 1 + a[1] + -l[4] * 1 + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (a[4] + -a[2] * 1 + -s[2] * 2 + s[0] * 2 + l[2] + -l[4] * 1
                <= RealNumRep::new(0, 1))
    );
    if !((l[4] == l[3])
        || (-a[4] * 2
            + a[3] * 2
            + a[2] * 2
            + -a[0] * 1
            + -l[3] * 2
            + -s[3] * 1
            + -l[1] * 2
            + l[4] * 2
            + l[0]
            <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 + -a[2] * 2 + a[0] + l[2] * 2 + -l[4] * 2 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 2
            + a[3] * 2
            + a[2] * 2
            + -l[3] * 2
            + -s[3] * 1
            + -s[1] * 1
            + -l[2] * 2
            + l[4] * 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 + -a[2] * 2 + s[1] + l[2] * 2 + -l[4] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 2
            + a[3] * 2
            + a[2] * 2
            + -a[0] * 1
            + -l[3] * 2
            + -s[3] * 1
            + -l[2] * 2
            + l[4] * 2
            + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 + -a[2] * 2 + a[0] + l[2] * 2 + -l[4] * 2 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[1] * 1 + -l[1] * 1 + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 + -a[2] * 2 + s[1] + l[2] * 2 + -l[4] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 2 + a[3] * 2 + a[2] + -l[3] * 2 + -s[1] * 1 + -l[2] * 1 + l[4] * 2
            <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 + -a[2] * 2 + s[1] + l[2] * 2 + -l[4] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (l[3] == l[2])
            || (-a[3] * 1 / 2 + -a[1] * 1 / 2 + s[2] + l[1] * 1 / 2 + l[3] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 5 + -a[2] * 5 + s[0] + l[2] * 5 + -l[3] * 5,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (a[4] * 1 / 2 + -a[2] * 3 / 2 + s[1] + l[2] * 3 / 2 + -l[4] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 2 + -a[1] * 2 + a[0] + l[1] * 2 + -l[3] * 2 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
            <= RealNumRep::new(0, 1))
        || (-a[4] * 4 / 3
            + a[2] * 2
            + a[1] * 4 / 3
            + -a[0] * 2
            + -l[2] * 2
            + -l[1] * 4 / 3
            + l[4] * 4 / 3
            + l[0] * 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 4 / 3 + -a[1] * 4 / 3 + a[0] + l[1] * 4 / 3 + -l[4] * 4 / 3 + -l[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
            <= RealNumRep::new(0, 1))
        || (!(-a[4] * 4 / 3
            + a[2] * 2
            + a[1] * 4 / 3
            + -a[0] * 2
            + -l[2] * 2
            + -l[1] * 4 / 3
            + l[4] * 4 / 3
            + l[0] * 2
            <= RealNumRep::new(0, 1))))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 + -a[2] * 1 + -a[1] * 2 + a[0] * 2 + l[2] + l[1] * 2 + -l[4] * 2 + -l[0] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 + -a[3] * 2 + s[3] + l[2] * 2 + -l[4] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[3] + -l[3] * 1 + s[3] * 1 / 2 + -s[0] * 1 / 2),
            Interval::interval_upper(a[3] + -a[1] * 1 + -l[3] * 1 + s[3] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 + -a[3] * 2 + a[2] + -l[2] * 1 + l[3] * 2 + -l[4] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3]) || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 1 / 2
                + a[3] * 1 / 2
                + -a[1] * 1 / 2
                + -l[3] * 1 / 2
                + s[3] * 1 / 2
                + l[1] * 1 / 2
                + -l[4] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (RealNumRep::new(0, 1)
                <= -a[3] * 1 / 2 + -a[1] * 1 / 2 + s[2] + l[1] * 1 / 2 + l[3] * 1 / 2)
            || (-a[4] * 1 + -a[1] * 2 + l[1] * 2 + s[2] * 3 + l[4] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2 + a[3] * 3 + -a[1] * 1 + -l[3] * 3 + l[1] + l[4] * 2
                <= RealNumRep::new(-10, 1))
            || (!(RealNumRep::new(0, 1)
                <= -a[3] * 1 / 2 + -a[1] * 1 / 2 + s[2] + l[1] * 1 / 2 + l[3] * 1 / 2))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + -a[1] * 1 + -l[3] * 1 + s[2] + l[1] + l[4]
                <= RealNumRep::new(-5, 1))
            || (!(RealNumRep::new(0, 1)
                <= -a[3] * 1 / 2 + -a[1] * 1 / 2 + s[2] + l[1] * 1 / 2 + l[3] * 1 / 2))
    );
    if !((l[4] == l[3]) || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 / 3 + -a[1] * 2 / 3 + s[3] + l[1] * 2 / 3 + -l[4] * 2 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[1] * 1 + -l[1] * 1 + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] * 4 / 3 + -a[1] * 4 / 3 + s[1] + l[1] * 4 / 3 + -l[4] * 4 / 3,
            ),
            Interval::interval_upper(
                a[4] * 2 + -a[2] * 1 + -a[1] * 2 + l[2] + s[1] * 2 + l[1] * 2 + -l[4] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[2] * 2 + -s[0] * 1 + -l[2] * 2),
            Interval::interval_upper(
                RealNumRep::new(-15, 1) + a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-5, 1) + a[3] + a[2] + -a[1] * 1 + -l[3] * 1 + l[1] + -l[2] * 1,
            ),
            Interval::interval_upper(
                RealNumRep::new(-5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -l[3] * 1
                    + -s[0] * 1 / 2
                    + -l[2] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[3] * 3 / 2 + -a[1] * 3 / 2 + s[2] + l[1] * 3 / 2 + -l[3] * 3 / 2,
            ),
            Interval::interval_upper(
                a[3] * 2 + -a[2] * 1 + -a[1] * 2 + l[2] + s[2] * 2 + l[1] * 2 + -l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[1] * 3 + s[3] * 2 + -s[1] * 2 + -l[1] * 3 + l[3] * 3
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2
                + a[2] * 2
                + a[1] * 2
                + -l[2] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[2] * 3 + s[3] + -s[1] * 1 + -l[2] * 3 + l[3] * 3
                <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 2 + -a[1] * 2 + s[1] + l[1] * 2 + -l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 5 / 2 + -a[1] * 5 / 2 + s[0] + l[1] * 5 / 2 + -l[3] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 5 / 2 + -a[1] * 5 / 2 + s[0] + l[1] * 5 / 2 + -l[3] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 2
            + a[2] * 2
            + a[1] * 2
            + -l[2] * 2
            + -s[2] * 1
            + -s[0] * 1
            + -l[1] * 2
            + l[3] * 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 5 / 2 + -a[1] * 5 / 2 + s[0] + l[1] * 5 / 2 + -l[3] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2 + a[1] * 2 + s[1] * 3 + -s[0] * 3 + -l[1] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[3] * 2 + a[1] + -l[3] * 2 + -s[0] * 1 + -l[1] * 1 + l[4] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 4 + a[2] * 4 + s[3] + -s[0] * 1 + -l[2] * 4 + l[3] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[2] + -a[0] * 1 + s[2] + -l[2] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[2] + -a[0] * 1 + s[2] + -l[2] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[3] * 2 + a[2] + -a[0] * 1 + -l[3] * 2 + -l[2] * 1 + l[4] * 2 + l[0]
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[4] * 2 + -a[1] * 2 + -s[3] * 3 + s[0] * 3 + l[1] * 2 + -l[4] * 2
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 / 2
                + a[2] * 1 / 2
                + -a[0] * 1
                + s[1]
                + -l[2] * 1 / 2
                + l[4] * 1 / 2
                + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[3] * 2 + a[2] + -a[0] * 1 + -l[3] * 2 + -l[2] * 1 + l[4] * 2 + l[0]
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 / 2 + a[2] * 3 / 2 + s[3] + -s[1] * 1 + -l[2] * 3 / 2 + l[4] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2
                + a[3] * 2
                + a[2] * 2
                + -l[3] * 2
                + -s[3] * 1
                + -s[1] * 1
                + -l[2] * 2
                + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 / 2 + a[2] * 3 / 2 + s[3] + -s[1] * 1 + -l[2] * 3 / 2 + l[4] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 / 2
                + a[3] * 1 / 2
                + a[2] * 1 / 2
                + -a[1] * 1 / 2
                + l[3] * 1 / 2
                + -l[2] * 3 / 2
                + l[1] * 1 / 2
                + l[4] * 1 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[2] + s[2] + -s[1] * 1 + -l[2] * 1 + l[4] <= RealNumRep::new(0, 1))
            || (-a[4] * 1 / 2
                + a[3] * 1 / 2
                + a[2] * 1 / 2
                + -a[1] * 1 / 2
                + l[3] * 1 / 2
                + -l[2] * 3 / 2
                + l[1] * 1 / 2
                + l[4] * 1 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[1] + -l[1] * 1 + l[4] <= RealNumRep::new(-15, 1))
            || (-a[4] * 1 + a[3] + -l[3] * 1 + l[4] <= RealNumRep::new(-10, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[1] + -l[1] * 1 + l[4] <= RealNumRep::new(-15, 1))
            || (-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[3] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(-10, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + -s[3] * 1 + s[1] * 2 + l[1] + -l[4] * 1
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + -l[3] * 1 + l[4] <= RealNumRep::new(-10, 1))
            || (-a[4] * 1 + s[1] + l[4] <= RealNumRep::new(-20, 1))
            || (-a[4] * 1 + a[2] + -l[2] * 1 + l[4] <= RealNumRep::new(-15, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + s[1] * 5 / 2 + -s[0] * 3 / 2 + l[4] <= RealNumRep::new(-5, 1))
            || (-a[4] * 1 + a[3] + -l[3] * 1 + s[1] * 1 / 2 + -s[0] * 1 / 2 + l[4]
                <= RealNumRep::new(-5, 1))
            || (-a[4] * 1 + a[2] * 3 + -l[2] * 3 + -s[1] * 2 + l[4] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2 + a[1] * 2 + s[1] * 3 + -s[0] * 3 + -l[1] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3
                + a[3] * 3
                + a[1] * 3
                + -l[3] * 3
                + -s[3] * 1
                + -s[0] * 2
                + -l[1] * 3
                + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    if !((l[4] == l[3])
        || (-a[4] * 3 / 2 + a[2] * 3 / 2 + s[3] + -s[1] * 1 + -l[2] * 3 / 2 + l[4] * 3 / 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 3 / 2 + a[2] * 3 / 2 + -a[0] * 1 + s[3] + -l[2] * 3 / 2 + l[4] * 3 / 2 + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2
                + a[3] * 2
                + a[2] * 2
                + -a[0] * 1
                + -l[3] * 2
                + -s[3] * 1
                + -l[2] * 2
                + l[4] * 2
                + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[2] + -a[0] * 1 + s[2] + -l[2] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2])
        || (-a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3] * 2
            <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 5 / 2 + -a[1] * 5 / 2 + s[0] + l[1] * 5 / 2 + -l[3] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 / 2
                + a[3] * 1 / 2
                + a[2] * 1 / 2
                + -a[1] * 1 / 2
                + l[3] * 1 / 2
                + -l[2] * 3 / 2
                + l[1] * 1 / 2
                + l[4] * 1 / 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[2] * 2 + s[1] * 2 + -s[0] * 2 + -l[2] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2 + a[3] * 2 + -l[3] * 2 + s[2] + -s[1] * 1 + l[4] * 2
                <= RealNumRep::new(-10, 1))
            || (-a[4] * 1 + s[2] * 2 + -s[1] * 1 + l[4] <= RealNumRep::new(-5, 1))
    );
    if !((l[3] == l[2]) || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] * 5 / 2 + -a[1] * 5 / 2 + s[0] + l[1] * 5 / 2 + -l[3] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
            || (-a[3] * 2
                + a[2] * 2
                + a[1] * 2
                + -l[2] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (l[4] == l[3])
            || (-a[4] * 1 / 3 + -a[1] * 2 / 3 + s[2] + l[1] * 2 / 3 + l[4] * 1 / 3
                <= RealNumRep::new(-5, 1))
            || (-a[4] * 1 / 2
                + a[3] * 1 / 2
                + -a[1] * 1 / 2
                + -l[3] * 1 / 2
                + s[2] * 1 / 2
                + l[1] * 1 / 2
                + l[4] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[2] + -a[0] * 1 + s[2] + -l[2] * 1 + l[4] + l[0] <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[2] + s[2] + -s[1] * 1 + -l[2] * 1 + l[4] <= RealNumRep::new(0, 1))
            || (-a[4] * 2
                + a[3] * 2
                + a[2] * 2
                + -l[3] * 2
                + -s[3] * 1
                + -s[1] * 1
                + -l[2] * 2
                + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[4] * 2 + -a[3] * 2 + -a[2] * 2 + l[3] * 2 + s[2] + s[0] + l[2] * 2 + -l[4] * 2
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1)
                <= -a[4] * 1 + a[3] + a[2] + -a[1] * 1 + -l[3] * 1 + l[1] + -l[2] * 1 + l[4])
    );
    if !((l[4] == l[3])
        || (-a[4] * 3 + a[2] * 3 + s[2] * 2 + -s[0] * 2 + -l[2] * 3 + l[4] * 3
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[2] + s[2] + -s[1] * 1 + -l[2] * 1 + l[4] <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + a[2] * 3 + s[2] * 2 + -s[0] * 2 + -l[2] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3 / 2
                + a[3] * 3 / 2
                + a[2] * 1 / 2
                + -l[3] * 3 / 2
                + -s[0] * 1 / 2
                + -l[2] * 1 / 2
                + l[4] * 3 / 2
                <= RealNumRep::new(-5, 1))
    );
    if !((l[4] == l[3])
        || (-a[4] * 4 + a[2] * 4 + s[3] * 2 + -s[0] * 2 + -l[2] * 4 + l[4] * 4
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 2 + a[2] * 2 + s[1] * 2 + -s[0] * 2 + -l[2] * 2 + l[4] * 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
            || (-a[4] * 2
                + a[3] * 2
                + a[1] * 2
                + -l[3] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[4] * 2
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1)
                <= a[4] + -a[2] * 3 + a[1] * 2 + -l[4] * 1 + -l[1] * 2 + l[2] * 3)
    );
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[4]
            <= RealNumRep::new(0, 1))
        || (-a[4] * 2
            + a[3] * 2
            + a[1] * 2
            + -l[3] * 2
            + -s[2] * 1
            + -s[0] * 1
            + -l[1] * 2
            + l[4] * 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 3 + -a[1] * 5 / 3 + s[0] + l[1] * 5 / 3 + -l[4] * 5 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 2 + a[1] * 2 + s[1] * 3 + -s[0] * 3 + -l[1] * 2 + l[4] * 2
            <= RealNumRep::new(0, 1))
        || (-a[4] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 4 + a[1] * 4 + s[3] * 3 + -s[0] * 3 + -l[1] * 4 + l[4] * 4
            <= RealNumRep::new(0, 1))
        || (-a[4] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -l[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[1] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[1] + -l[1] * 1 + l[4] <= RealNumRep::new(-15, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[1] + -l[1] * 1 + l[4] <= RealNumRep::new(-15, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 4 + a[1] * 4 + s[3] * 3 + -s[0] * 3 + -l[1] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 4 + a[1] * 4 + s[3] * 3 + -s[0] * 3 + -l[1] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[3] * 2 + a[1] + -l[3] * 2 + -s[0] * 1 + -l[1] * 1 + l[4] * 2
                <= RealNumRep::new(-5, 1))
    );
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[1] * 1 + -l[1] * 1 + l[4]
            <= RealNumRep::new(0, 1))
        || (-a[4] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 3 + -a[1] * 5 / 3 + s[0] + l[1] * 5 / 3 + -l[4] * 5 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 + -a[3] * 2 + s[3] + l[3] * 2 + -l[4] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (RealNumRep::new(0, 1)
                <= -a[4] * 1 + a[3] + -l[3] * 1 + s[3] * 1 / 2 + -s[0] * 1 / 2 + l[4])
            || (RealNumRep::new(0, 1)
                <= -a[4] * 1 + a[3] + -a[1] * 1 + -l[3] * 1 + s[3] + l[1] + l[4])
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[1] + -a[0] * 3 + s[1] * 3 + -l[1] * 1 + l[4] + l[0] * 3
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1
                + a[2]
                + a[1]
                + -a[0] * 2
                + -l[2] * 1
                + s[1]
                + -l[1] * 1
                + l[4]
                + l[0] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[1] * 2 + s[1] * 3 + -s[0] * 3 + -l[1] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[2] + -l[3] * 1 + -s[2] * 1 + -l[2] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 4 + a[2] * 4 + s[3] * 2 + -s[0] * 2 + -l[2] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 4 + a[2] * 4 + s[3] * 2 + -s[0] * 2 + -l[2] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3 / 2
                + a[3] * 3 / 2
                + a[2] * 1 / 2
                + -l[3] * 3 / 2
                + -s[0] * 1 / 2
                + -l[2] * 1 / 2
                + l[4] * 3 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 / 2
                + a[2] * 3 / 2
                + -a[0] * 1
                + s[3]
                + -l[2] * 3 / 2
                + l[4] * 3 / 2
                + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[3] * 2 + a[2] + -a[0] * 1 + -l[3] * 2 + -l[2] * 1 + l[4] * 2 + l[0]
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 / 2
                + a[2] * 3 / 2
                + -a[0] * 1
                + s[3]
                + -l[2] * 3 / 2
                + l[4] * 3 / 2
                + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 / 2
                + a[3] * 1 / 2
                + a[2] * 1 / 2
                + -a[1] * 1 / 2
                + l[3] * 1 / 2
                + -l[2] * 3 / 2
                + l[1] * 1 / 2
                + l[4] * 1 / 2
                <= RealNumRep::new(0, 1))
    );
    if !((l[2] == l[1])
        || (RealNumRep::new(0, 1)
            <= -a[4] * 1 / 2
                + a[3] * 1 / 2
                + a[2] * 1 / 2
                + -a[1] * 1 / 2
                + -l[3] * 1 / 2
                + -l[2] * 1 / 2
                + l[1] * 1 / 2
                + l[4] * 1 / 2))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -a[4] * 1 + a[3] * 2 + a[2] + -l[3] * 2 + -s[0] * 1 + -l[2] * 1 + l[4],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3
                + a[3] * 3
                + a[1] * 3
                + -l[3] * 3
                + -s[3] * 1
                + -s[0] * 2
                + -l[1] * 3
                + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[1] + -l[1] * 1 + l[4] <= RealNumRep::new(-15, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-5, 1)
                    + a[3] * 3 / 2
                    + -a[1] * 1 / 2
                    + l[1] * 1 / 2
                    + -l[3] * 3 / 2,
            ),
            Interval::interval_upper(
                RealNumRep::new(-10, 1) + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[1] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 4 + a[1] * 4 + s[3] * 3 + -s[0] * 3 + -l[1] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[2] + -l[3] * 1 + -s[2] * 1 + -l[2] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 / 2
                + a[2] * 1 / 2
                + -a[0] * 1
                + s[1]
                + -l[2] * 1 / 2
                + l[4] * 1 / 2
                + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3]) || (-a[4] * 2 + s[3] * 3 + -s[2] * 1 + l[4] * 2 <= RealNumRep::new(-10, 1))
    );
    assert!(
        (l[4] == l[3])
            || (RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
            || (RealNumRep::new(0, 1)
                <= a[4] + -a[2] * 3 + a[1] * 2 + -l[4] * 1 + -l[1] * 2 + l[2] * 3)
            || (-a[4] * 2 + a[3] * 2 + a[1] + -l[3] * 2 + -s[0] * 1 + -l[1] * 1 + l[4] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
            || (-a[4] * 3
                + a[3] * 3
                + a[1] * 3
                + -l[3] * 3
                + -s[3] * 1
                + -s[0] * 2
                + -l[1] * 3
                + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (RealNumRep::new(0, 1)
                <= a[4] + -a[2] * 3 + a[1] * 2 + -l[4] * 1 + -l[1] * 2 + l[2] * 3)
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + s[2] + l[3] + -l[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (a[4] + -a[2] * 2 + s[0] + l[2] * 2 + -l[4] * 1 <= RealNumRep::new(-5, 1))
            || (a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3 + -l[4] * 1
                <= RealNumRep::new(-10, 1))
    );
    if !((l[4] == l[3])
        || (-a[4] * 3
            + a[3] * 3
            + a[1] * 3
            + -l[3] * 3
            + -s[3] * 1
            + -s[0] * 2
            + -l[1] * 3
            + l[4] * 3
            <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 3 + -a[1] * 5 / 3 + s[0] + l[1] * 5 / 3 + -l[4] * 5 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[4]
            <= RealNumRep::new(0, 1))
        || (-a[4] * 2 + a[3] * 2 + a[1] + -l[3] * 2 + -s[0] * 1 + -l[1] * 1 + l[4] * 2
            <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 3 + -a[1] * 5 / 3 + s[0] + l[1] * 5 / 3 + -l[4] * 5 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
            <= RealNumRep::new(0, 1))
        || (-a[4] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 3 + -a[1] * 5 / 3 + s[0] + l[1] * 5 / 3 + -l[4] * 5 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + a[3] * 3 + -l[3] * 3 + s[2] + -s[0] * 1 + l[4] * 3
                <= RealNumRep::new(-15, 1))
            || (-a[4] * 1 + s[2] * 5 / 3 + -s[0] * 2 / 3 + l[4] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3]) || (-a[4] * 4 + s[3] * 5 + -s[0] * 1 + l[4] * 4 <= RealNumRep::new(-20, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + a[1] * 3 + s[2] * 3 + -s[0] * 3 + -l[1] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3
                + a[3] * 3
                + a[1] * 3
                + -l[3] * 3
                + -s[3] * 1
                + -s[0] * 2
                + -l[1] * 3
                + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + a[2] * 3 + s[2] * 2 + -s[0] * 2 + -l[2] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3 / 2
                + a[3] * 3 / 2
                + a[2] * 3 / 2
                + -l[3] * 3 / 2
                + -s[3] * 1
                + -s[0] * 1 / 2
                + -l[2] * 3 / 2
                + l[4] * 3 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 4 + a[2] * 4 + s[3] * 2 + -s[0] * 2 + -l[2] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[3] * 2 + a[2] + -l[3] * 2 + -s[1] * 1 + -l[2] * 1 + l[4] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + a[2] * 3 + s[2] * 2 + -s[0] * 2 + -l[2] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[3] * 2 + a[2] + -l[3] * 2 + -s[1] * 1 + -l[2] * 1 + l[4] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 / 2
                + a[3] * 1 / 2
                + a[2] * 1 / 2
                + -a[1] * 1 / 2
                + l[3] * 1 / 2
                + -l[2] * 3 / 2
                + l[1] * 1 / 2
                + l[4] * 1 / 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3 + a[2] * 3 + s[2] * 2 + -s[0] * 2 + -l[2] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2 + a[2] * 2 + s[1] * 2 + -s[0] * 2 + -l[2] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3 / 2
                + a[3] * 3 / 2
                + a[2] * 1 / 2
                + -l[3] * 3 / 2
                + -s[0] * 1 / 2
                + -l[2] * 1 / 2
                + l[4] * 3 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + s[2] * 4 / 3 + -s[0] * 1 / 3 + l[3] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + -a[1] * 1 + l[1] + s[2] * 2 + l[3] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2
                + a[3] * 2
                + a[2] * 2
                + -a[0] * 1
                + -l[3] * 2
                + -s[3] * 1
                + -l[2] * 2
                + l[4] * 2
                + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3 + a[2] * 3 + s[2] * 2 + -s[0] * 2 + -l[2] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 / 2
                + a[2] * 3 / 2
                + -a[0] * 1
                + s[3]
                + -l[2] * 3 / 2
                + l[4] * 3 / 2
                + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2
                + a[3] * 2
                + a[2] * 2
                + -a[0] * 1
                + -l[3] * 2
                + -s[3] * 1
                + -l[2] * 2
                + l[4] * 2
                + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[1] + -l[1] * 1 + l[4] <= RealNumRep::new(-15, 1))
            || (-a[4] * 2 + a[3] * 2 + a[1] + -l[3] * 2 + -s[0] * 1 + -l[1] * 1 + l[4] * 2
                <= RealNumRep::new(-5, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + a[2] + -l[3] * 1 + -s[1] * 1 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 3 / 2
            + a[3] * 3 / 2
            + a[2] * 1 / 2
            + -l[3] * 3 / 2
            + -s[0] * 1 / 2
            + -l[2] * 1 / 2
            + l[4] * 3 / 2
            <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 2 + -a[2] * 5 / 2 + s[0] + l[2] * 5 / 2 + -l[4] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + -l[2] * 1 + l[3] <= RealNumRep::new(-10, 1))
            || (-a[3] * 1 + s[1] + l[3] <= RealNumRep::new(-15, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2 + a[1] * 2 + s[1] * 3 + -s[0] * 3 + -l[1] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2
                + a[3] * 2
                + a[1] * 2
                + -l[3] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 4 + a[1] * 4 + s[3] * 3 + -s[0] * 3 + -l[1] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[2] + a[1] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2
                + a[3] * 2
                + a[1] * 2
                + -l[3] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2
                + a[3] * 2
                + a[1] * 2
                + -l[3] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[4] * 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[1] + -l[1] * 1 + l[4] <= RealNumRep::new(-15, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[1] + -l[1] * 1 + l[4] <= RealNumRep::new(-15, 1))
            || (-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[2] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(-5, 1))
    );
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[2] + -l[3] * 1 + -s[2] * 1 + -l[2] * 1 + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 3 / 2 + -a[2] * 3 / 2 + s[2] + l[2] * 3 / 2 + -l[4] * 3 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[2] + -l[3] * 1 + -s[2] * 1 + -l[2] * 1 + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 + -a[2] * 2 + s[1] + l[2] * 2 + -l[4] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 2 + -a[2] * 5 / 2 + s[0] + l[2] * 5 / 2 + -l[4] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 2 + a[3] * 2 + a[2] + -a[0] * 1 + -l[3] * 2 + -l[2] * 1 + l[4] * 2 + l[0]
            <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 2 + -a[2] * 5 / 2 + s[0] + l[2] * 5 / 2 + -l[4] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 2
            + a[3] * 2
            + a[2] * 2
            + -l[3] * 2
            + -s[3] * 1
            + -s[1] * 1
            + -l[2] * 2
            + l[4] * 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 2 + -a[2] * 5 / 2 + s[0] + l[2] * 5 / 2 + -l[4] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 2 + a[3] * 2 + a[2] + -l[3] * 2 + -s[1] * 1 + -l[2] * 1 + l[4] * 2
            <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 2 + -a[2] * 5 / 2 + s[0] + l[2] * 5 / 2 + -l[4] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 / 2
            + a[3] * 1 / 2
            + a[2] * 1 / 2
            + -a[1] * 1 / 2
            + l[3] * 1 / 2
            + -l[2] * 3 / 2
            + l[1] * 1 / 2
            + l[4] * 1 / 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 2 + -a[2] * 2 + s[1] + l[2] * 2 + -l[4] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 / 2
            + a[3] * 1 / 2
            + a[2] * 1 / 2
            + -a[1] * 1 / 2
            + l[3] * 1 / 2
            + -l[2] * 3 / 2
            + l[1] * 1 / 2
            + l[4] * 1 / 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 2 + -a[2] * 5 / 2 + s[0] + l[2] * 5 / 2 + -l[4] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 3 / 2
            + a[3] * 3 / 2
            + a[2] * 3 / 2
            + -l[3] * 3 / 2
            + -s[3] * 1
            + -s[0] * 1 / 2
            + -l[2] * 3 / 2
            + l[4] * 3 / 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 2 + -a[2] * 5 / 2 + s[0] + l[2] * 5 / 2 + -l[4] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 2
            + a[3] * 2
            + a[2] * 2
            + -a[0] * 1
            + -l[3] * 2
            + -s[3] * 1
            + -l[2] * 2
            + l[4] * 2
            + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 2 + -a[2] * 5 / 2 + s[0] + l[2] * 5 / 2 + -l[4] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (a[4] + -a[3] * 2 / 3 + -a[2] * 1 + -l[3] * 1 / 3 + s[0] * 2 / 3 + l[2]
                <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1))
            || (RealNumRep::new(0, 1)
                <= -a[4] * 1 / 2
                    + a[3] * 1 / 2
                    + a[2] * 1 / 2
                    + -a[1] * 1 / 2
                    + -l[3] * 1 / 2
                    + -l[2] * 1 / 2
                    + l[1] * 1 / 2
                    + l[4] * 1 / 2)
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[2] + s[2] + -s[1] * 1 + -l[2] * 1 + l[4] <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[3] * 2 + a[2] + -l[3] * 2 + -s[1] * 1 + -l[2] * 1 + l[4] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[1] * 1 + -l[1] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 + a[2] + s[2] + -s[1] * 1 + -l[2] * 1 + l[4] <= RealNumRep::new(0, 1))
    );
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 4 + -a[3] * 4 + s[1] + l[3] * 4 + -l[4] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + s[2] * 3 / 2 + -s[1] * 1 / 2 + l[3] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[4] == l[3])
            || (-a[4] * 1
                + a[3]
                + -a[2] * 1
                + a[1] * 2
                + -l[3] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[2]
                + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 4 + a[2] * 4 + s[3] * 2 + -s[0] * 2 + -l[2] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[4] == l[3])
            || (-a[4] * 1
                + a[3]
                + -a[2] * 1
                + a[1] * 2
                + -l[3] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[2]
                + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3 + a[2] * 3 + s[2] * 2 + -s[0] * 2 + -l[2] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3 + a[2] * 3 + s[2] * 2 + -s[0] * 2 + -l[2] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 4 + a[2] * 4 + s[3] * 2 + -s[0] * 2 + -l[2] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 4 + a[2] * 4 + s[3] * 2 + -s[0] * 2 + -l[2] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2
                + a[3] * 2
                + a[2] * 2
                + -a[0] * 1
                + -l[3] * 2
                + -s[3] * 1
                + -l[2] * 2
                + l[4] * 2
                + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[2] * 2 + s[1] * 2 + -s[0] * 2 + -l[2] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1)
                <= -a[4] * 1 + a[3] + a[2] + -a[1] * 1 + -l[3] * 1 + l[1] + -l[2] * 1 + l[4]))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2
                + a[3] * 2
                + a[2] * 2
                + -a[0] * 1
                + -l[3] * 2
                + -s[3] * 1
                + -l[2] * 2
                + l[4] * 2
                + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 / 2
                + a[2] * 1 / 2
                + -a[0] * 1
                + s[1]
                + -l[2] * 1 / 2
                + l[4] * 1 / 2
                + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[1] + -a[0] * 1 + -l[3] * 1 + -l[1] * 1 + l[4] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[2] * 2 + s[1] * 2 + -s[0] * 2 + -l[2] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    if !((l[4] == l[3])
        || (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1)
            <= -a[4] * 1 + a[3] + a[2] + -a[1] * 1 + -l[3] * 1 + l[1] + -l[2] * 1 + l[4])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 2 + -a[2] * 5 / 2 + s[0] + l[2] * 5 / 2 + -l[4] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + -a[0] * 1 / 2 + s[2] * 1 / 2 + -l[2] * 1 + l[4] + l[0] * 1 / 2
                <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2 + a[3] * 2 + s[3] + -s[2] * 1 + -l[3] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + -a[0] * 1 + -l[3] * 1 + s[1] + l[4] + l[0]
                <= RealNumRep::new(-5, 1))
            || (-a[4] * 1 + -a[0] * 3 + s[1] * 4 + l[4] + l[0] * 3 <= RealNumRep::new(-5, 1))
            || (-a[4] * 1 + a[2] + -a[0] * 2 + -l[2] * 1 + s[1] * 2 + l[4] + l[0] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2 + a[3] * 2 + -a[0] * 1 + s[2] + -l[3] * 2 + l[4] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + -a[1] * 1 + l[1] + s[2] + -l[3] * 1 + l[4]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[1] * 1 + -l[1] * 1 + l[4]
            <= RealNumRep::new(0, 1))
            || (-a[4] * 3 / 2 + a[2] * 3 / 2 + s[3] + -s[1] * 1 + -l[2] * 3 / 2 + l[4] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)
    );
    assert!(
        (-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[1] * 1 + -l[1] * 1 + l[4]
            <= RealNumRep::new(0, 1))
            || (-a[4] * 4 + a[2] * 4 + s[3] * 2 + -s[0] * 2 + -l[2] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)
    );
    assert!(
        (-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[1] * 1 + -l[1] * 1 + l[4]
            <= RealNumRep::new(0, 1))
            || (-a[4] * 3 + a[2] * 3 + s[2] * 2 + -s[0] * 2 + -l[2] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)
    );
    if !((-a[4] * 1 + a[3] + a[1] + -l[3] * 1 + -s[1] * 1 + -l[1] * 1 + l[4]
        <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= l[3] + -l[4] * 1))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 2 + -a[2] * 5 / 2 + s[0] + l[2] * 5 / 2 + -l[4] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 1 + a[3] + a[2] + -l[3] * 1 + -s[2] * 1 + -l[2] * 1 + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 2 + -a[2] * 5 / 2 + s[0] + l[2] * 5 / 2 + -l[4] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2]))
            || (-a[3] * 1 + a[2] + -l[2] * 1 + s[1] * 1 / 2 + -s[0] * 1 / 2 + l[3]
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2])
            || (-a[3] * 1 + s[1] * 2 + -s[0] * 1 + l[3] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + -a[0] * 1 / 2 + s[2] * 3 / 2 + l[3] + l[0] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + a[3] * 3 + s[2] + -s[0] * 1 + -l[3] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2 + a[3] * 2 + s[2] + -s[1] * 1 + -l[3] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 4 + a[2] * 4 + s[3] * 2 + -s[0] * 2 + -l[2] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[3] * 2 + a[2] + -a[0] * 1 + -l[3] * 2 + -l[2] * 1 + l[4] * 2 + l[0]
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 4 + a[2] * 4 + s[3] * 2 + -s[0] * 2 + -l[2] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
            || (-a[4] * 1 / 2
                + a[3] * 1 / 2
                + a[2] * 1 / 2
                + -a[1] * 1 / 2
                + l[3] * 1 / 2
                + -l[2] * 3 / 2
                + l[1] * 1 / 2
                + l[4] * 1 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + a[2] * 3 + s[2] * 2 + -s[0] * 2 + -l[2] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[3] * 2 + a[2] + -a[0] * 1 + -l[3] * 2 + -l[2] * 1 + l[4] * 2 + l[0]
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2 + a[2] * 2 + s[1] * 2 + -s[0] * 2 + -l[2] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[3] * 2 + a[2] + -a[0] * 1 + -l[3] * 2 + -l[2] * 1 + l[4] * 2 + l[0]
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + a[2] + -l[3] * 1 + -s[2] * 1 + -l[2] * 1 + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[2] * 2 + s[1] * 2 + -s[0] * 2 + -l[2] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 / 2
                + a[3] * 3 / 2
                + a[2] * 3 / 2
                + -l[3] * 3 / 2
                + -s[3] * 1
                + -s[0] * 1 / 2
                + -l[2] * 3 / 2
                + l[4] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[2] * 2 + s[1] * 2 + -s[0] * 2 + -l[2] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    if !((l[2] == l[1])
        || (l[4] == l[3])
        || (-a[4] * 1
            + a[3]
            + -a[2] * 1
            + a[1] * 2
            + -l[3] * 1
            + -s[0] * 1
            + -l[1] * 2
            + l[2]
            + l[4]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 2 + -a[2] * 5 / 2 + s[0] + l[2] * 5 / 2 + -l[4] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + a[2] * 3 + s[2] * 2 + -s[0] * 2 + -l[2] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2
                + a[3] * 2
                + a[2] * 2
                + -l[3] * 2
                + -s[3] * 1
                + -s[1] * 1
                + -l[2] * 2
                + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (a[4] + -a[3] * 2 + a[2] + -l[1] * 1 + l[3] * 2 + -l[4] * 1
                <= RealNumRep::new(-5, 1))
            || (a[4] * 2 + -a[3] * 3 + s[1] + l[3] * 3 + -l[4] * 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (-a[4] * 3 / 2 + a[2] * 3 / 2 + s[3] + -s[1] * 1 + -l[2] * 3 / 2 + l[4] * 3 / 2
            <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)
            || (-a[4] * 2 + a[3] * 2 + a[2] + -l[3] * 2 + -s[1] * 1 + -l[2] * 1 + l[4] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + -l[3] * 1 + l[4] <= RealNumRep::new(-10, 1))
            || (-a[4] * 1 + s[0] + l[4] <= RealNumRep::new(-25, 1))
            || (-a[4] * 1 + a[2] + -l[2] * 1 + l[4] <= RealNumRep::new(-15, 1))
            || (-a[4] * 1 + a[1] + -l[1] * 1 + l[4] <= RealNumRep::new(-20, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2
                + a[3] * 2
                + a[2] * 2
                + -a[0] * 1
                + -l[3] * 2
                + -s[3] * 1
                + -l[2] * 2
                + l[4] * 2
                + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[2] * 2 + s[1] * 2 + -s[0] * 2 + -l[2] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[4] == l[3])
            || (-a[4] * 1
                + a[3]
                + -a[2] * 1
                + a[1] * 2
                + -l[3] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[2]
                + l[4]
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[2] * 2 + s[1] * 2 + -s[0] * 2 + -l[2] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 4 + a[2] * 4 + s[3] * 2 + -s[0] * 2 + -l[2] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3 / 2
                + a[3] * 3 / 2
                + a[2] * 3 / 2
                + -l[3] * 3 / 2
                + -s[3] * 1
                + -s[0] * 1 / 2
                + -l[2] * 3 / 2
                + l[4] * 3 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 4 + a[2] * 4 + s[3] * 2 + -s[0] * 2 + -l[2] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2
                + a[3] * 2
                + a[2] * 2
                + -l[3] * 2
                + -s[3] * 1
                + -s[1] * 1
                + -l[2] * 2
                + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[4] * 3 / 2
                + -a[3] * 1
                + -a[2] * 3 / 2
                + l[3]
                + s[0]
                + l[2] * 3 / 2
                + -l[4] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1)
                <= -a[4] * 1 + a[3] + a[2] + -a[1] * 1 + -l[3] * 1 + l[1] + -l[2] * 1 + l[4])
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 4 + a[3] * 4 + s[3] + -s[0] * 1 + -l[3] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2 + a[3] * 2 + -a[1] * 1 + l[1] + s[3] + -l[3] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + a[3] * 3 + s[3] + -s[1] * 1 + -l[3] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + -a[1] * 1 / 2 + l[1] * 1 / 2 + s[3] * 3 / 2 + l[4]
                <= RealNumRep::new(-5, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-15, 2) + a[3] * 3 / 2 + -s[1] * 1 / 2 + -l[3] * 3 / 2,
            ),
            Interval::interval_upper(
                RealNumRep::new(-10, 1) + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (a[4] + -a[3] * 2 + a[2] + -l[1] * 1 + l[3] * 2 + -l[4] * 1
                <= RealNumRep::new(-5, 1))
            || (a[4] * 3 + -a[3] * 4 + s[0] + l[3] * 4 + -l[4] * 3 <= RealNumRep::new(-5, 1))
            || (a[4] * 2 + -a[3] * 3 + a[1] + -l[1] * 1 + l[3] * 3 + -l[4] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + -l[3] * 1 + s[1] * 1 / 2 + -s[0] * 1 / 2 + l[4]
                <= RealNumRep::new(-5, 1))
            || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2]))
            || (-a[4] * 1 + a[2] + -l[2] * 1 + s[1] + -s[0] * 1 + l[4] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + -a[0] * 1 + s[2] * 2 + l[4] + l[0] <= RealNumRep::new(-5, 1))
            || (-a[4] * 2 + a[3] * 2 + -a[0] * 1 + -l[3] * 2 + s[2] + l[4] * 2 + l[0]
                <= RealNumRep::new(-10, 1))
    );
    if !((l[3] == l[2])
        || (RealNumRep::new(10, 1) <= -a[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2 + l[4]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[4] + -l[4] * 1),
            Interval::interval_upper(
                RealNumRep::new(-15, 2)
                    + a[3] * 3 / 2
                    + -a[1] * 1 / 2
                    + l[1] * 1 / 2
                    + -l[3] * 3 / 2,
            ),
            Interval::interval_upper(
                RealNumRep::new(-20, 3) + a[3] * 4 / 3 + -s[0] * 1 / 3 + -l[3] * 4 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + -a[0] * 1 + s[3] * 4 + l[4] * 3 + l[0] <= RealNumRep::new(-15, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2 + a[2] * 2 + s[1] * 2 + -s[0] * 2 + -l[2] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[3] * 2 + a[1] + -l[3] * 2 + -s[0] * 1 + -l[1] * 1 + l[4] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 2
                + a[3] * 2
                + a[1] * 2
                + -l[3] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[4] * 2
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[2] * 2 + s[1] * 2 + -s[0] * 2 + -l[2] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + s[0] + l[3] <= RealNumRep::new(-20, 1))
            || (-a[3] * 1 + a[2] + -l[2] * 1 + l[3] <= RealNumRep::new(-10, 1))
            || (-a[3] * 1 + a[1] + -l[1] * 1 + l[3] <= RealNumRep::new(-15, 1))
    );
    assert!(
        (l[4] == l[3]) || (-a[4] * 3 + s[3] * 4 + -s[1] * 1 + l[4] * 3 <= RealNumRep::new(-15, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + a[2] * 3 + s[2] * 2 + -s[0] * 2 + -l[2] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3
                + a[3] * 3
                + a[1] * 3
                + -l[3] * 3
                + -s[3] * 1
                + -s[0] * 2
                + -l[1] * 3
                + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3
                + a[3] * 3
                + a[1] * 3
                + -l[3] * 3
                + -s[3] * 1
                + -s[0] * 2
                + -l[1] * 3
                + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[2] * 2 + s[1] * 2 + -s[0] * 2 + -l[2] * 2 + l[4] * 2
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 4 + a[2] * 4 + s[3] * 2 + -s[0] * 2 + -l[2] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
            || (-a[4] * 3
                + a[3] * 3
                + a[1] * 3
                + -l[3] * 3
                + -s[3] * 1
                + -s[0] * 2
                + -l[1] * 3
                + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    if !((l[4] == l[3])
        || (-a[4] * 3
            + a[3] * 3
            + a[1] * 3
            + -l[3] * 3
            + -s[3] * 1
            + -s[0] * 2
            + -l[1] * 3
            + l[4] * 3
            <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 2 + -a[2] * 5 / 2 + s[0] + l[2] * 5 / 2 + -l[4] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[4] == l[3])
        || (-a[4] * 2
            + a[3] * 2
            + a[1] * 2
            + -l[3] * 2
            + -s[2] * 1
            + -s[0] * 1
            + -l[1] * 2
            + l[4] * 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 2 + -a[2] * 5 / 2 + s[0] + l[2] * 5 / 2 + -l[4] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 4 + a[2] * 4 + s[3] * 2 + -s[0] * 2 + -l[2] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2
                + a[3] * 2
                + a[1] * 2
                + -l[3] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[4] * 2
                <= RealNumRep::new(0, 1))
    );
    if !((l[4] == l[3])
        || (-a[4] * 2 + a[3] * 2 + a[1] + -l[3] * 2 + -s[0] * 1 + -l[1] * 1 + l[4] * 2
            <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[4] * 5 / 2 + -a[2] * 5 / 2 + s[0] + l[2] * 5 / 2 + -l[4] * 5 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 3 + a[2] * 3 + s[2] * 2 + -s[0] * 2 + -l[2] * 3 + l[4] * 3
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[3] * 2 + a[1] + -l[3] * 2 + -s[0] * 1 + -l[1] * 1 + l[4] * 2
                <= RealNumRep::new(-5, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-10, 1) + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 2,
            ),
            Interval::interval_upper(
                RealNumRep::new(-15, 2)
                    + a[3] * 3 / 2
                    + -a[1] * 1 / 2
                    + l[1] * 1 / 2
                    + -l[3] * 3 / 2,
            ),
            Interval::interval_upper(
                RealNumRep::new(-20, 3) + a[3] * 4 / 3 + -s[0] * 1 / 3 + -l[3] * 4 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (-a[4] * 4 + a[2] * 4 + s[3] * 2 + -s[0] * 2 + -l[2] * 4 + l[4] * 4
                <= RealNumRep::new(0, 1))
            || (-a[4] * 2 + a[3] * 2 + a[1] + -l[3] * 2 + -s[0] * 1 + -l[1] * 1 + l[4] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(-a[0] * 2 + s[0] * 2 + l[0] * 2 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[4] + -l[4] * 1)]);
    ret = ret.intersection(&tmp);
    assert!(-a[3] * 1 + l[3] + s[3] <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_sim_s_4_t_5_l_5(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
    C: RealNumRep,
    B: RealNumRep,
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 5);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    let tmp = IntervalList::new(vec![Interval::interval_lower(s[3])]);
    ret = ret.intersection(&tmp);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])));
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] + B <= RealNumRep::new(0, 1)));
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[2] + l[2] + B <= RealNumRep::new(0, 1)));
    assert!(a[2] + -s[3] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[2] + -C * 1 + -s[2] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + C * 2 + s[0] + l[2] + B <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= a[2] + -a[1] * 1 + -C * 1 + l[1] + -l[2] * 1 + -B * 1)
    );
    assert!(a[2] + -C * 3 + -s[0] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[1] + -s[2] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[1] + -C * 2 + -s[0] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!((l[2] == l[1]) || (-a[2] * 1 + C + s[1] + l[2] + B <= RealNumRep::new(0, 1)));
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1)
            || (a[1] + C + -s[3] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[1] + C + -s[3] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1))
            || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 1 + C + s[0] + l[1] + B <= RealNumRep::new(0, 1)));
    assert!(a[1] + -a[0] * 1 + -C * 1 + -l[1] * 1 + -B * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(a[1] + -C * 1 + -s[1] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!((l[3] == l[2]) || (RealNumRep::new(0, 1) <= -a[4] * 1 + a[3] + -l[3] * 1 + C + l[4]));
    assert!(
        (RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1])
            || (C + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(-a[0] * 1 + -C * 1 + s[1] + l[0] <= RealNumRep::new(0, 1));
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1]))
    );
    assert!((l[2] == l[1]) || (RealNumRep::new(0, 1) <= -a[3] * 1 + a[2] + -l[2] * 1 + C + l[3]));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[0] + C * 4 + -l[0] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[4] + -C * 1 + -l[4] * 1 + -B * 1,
    )]);
    ret = ret.intersection(&tmp);
    assert!((l[4] == l[3]) || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1)));
    assert!((l[4] == l[3]) || (-a[4] * 1 + C + s[3] + l[4] + B <= RealNumRep::new(0, 1)));
    assert!(
        (l[4] == l[3])
            || (!(RealNumRep::new(0, 1) <= -a[3] * 1 + a[2] + C + -l[2] * 1 + l[3] + -B * 1))
            || (RealNumRep::new(0, 1) <= a[4] + -a[3] * 1 + -C * 1 + l[3] + -l[4] * 1 + -B * 1)
    );
    assert!((!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)) || (l[2] == l[1]));
    if !(l[4] == l[3]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[4] + -l[4] * 1 + -B * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[4] == l[3])
            || (RealNumRep::new(0, 1) <= a[4] + -a[3] * 1 + -C * 1 + l[3] + -l[4] * 1 + -B * 1)
            || (-a[4] * 1 + C * 2 + s[2] + l[4] + B <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + C * 3 + s[1] + l[4] + B <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= a[4] + -a[3] * 1 + -C * 1 + l[3] + -l[4] * 1 + -B * 1)
            || (RealNumRep::new(0, 1) <= a[4] + -a[2] * 1 + -C * 2 + l[2] + -l[4] * 1 + -B * 1)
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + C + -l[2] * 1 + l[4] <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))
    );
    assert!(a[4] + -C * 2 + -s[3] * 1 + -l[4] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[4] + -C * 3 + -s[2] * 1 + -l[4] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(
        (-a[4] * 1 + a[2] + -l[2] * 1 + C * 2 + l[4] + B == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= a[4] + -a[2] * 1 + -C * 2 + l[2] + -l[4] * 1 + -B * 1))
    );
    assert!(a[4] + -C * 5 + -s[0] * 1 + -l[4] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + a[3] + C + -l[3] * 1 + l[4] == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= -a[4] * 1 + a[3] + -l[3] * 1 + C + l[4]))
    );
    assert!(
        (l[2] == l[1]) || (RealNumRep::new(0, 1) <= a[2] + -a[1] * 1 + -l[2] * 1 + -C * 1 + l[1])
    );
    assert!(
        (l[4] == l[3])
            || (RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
            || (-a[4] * 1 + a[1] + C * 3 + -l[1] * 1 + l[4] == RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[3] * 1 + a[1] + C * 2 + -l[1] * 1 + l[3] + -B * 1)
            || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -l[3] * 1 + -C * 1 + l[2])
    );
    assert!(
        (l[4] == l[3])
            || (RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
            || (-a[4] * 1 + a[1] + C * 3 + -l[1] * 1 + l[4] == RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= a[4] + -a[3] * 1 + -C * 1 + l[3] + -l[4] * 1 + -B * 1)
            || (RealNumRep::new(0, 1) <= a[4] + -a[2] * 1 + -C * 2 + l[2] + -l[4] * 1 + -B * 1)
    );
    assert!((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)));
    assert!((l[1] == l[0]) || (-a[1] * 1 + -C * 1 + s[2] + l[1] + B <= RealNumRep::new(0, 1)));
    assert!(
        (-a[4] * 1 + a[3] + -l[3] * 1 + C + l[4] + B == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= a[4] + -a[3] * 1 + -C * 1 + l[3] + -l[4] * 1 + -B * 1))
    );
    assert!(
        (l[1] == l[0])
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1)
            || (!(RealNumRep::new(0, 1) <= a[4] + -a[2] * 1 + -C * 2 + l[2] + -l[4] * 1 + -B * 1))
    );
    assert!(
        (l[1] == l[0]) || (a[2] + -a[1] * 1 + -l[2] * 1 + -C * 1 + l[1] <= RealNumRep::new(0, 1))
    );
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + C * 2 + -l[1] * 1 + -B * 1),
            Interval::interval_lower(a[3] + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[1] == l[0]) || (-a[1] * 1 + -C * 2 + s[3] + l[1] + B <= RealNumRep::new(0, 1)));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[3] + -l[3] * 1 + C)]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (RealNumRep::new(0, 1) <= -a[4] * 1 + a[1] + C * 3 + -l[1] * 1 + l[3])
            || (!(RealNumRep::new(0, 1) <= l[3] + -l[4] * 1))
    );
    assert!((l[3] == l[2]) || (-a[3] * 1 + s[3] + l[3] + B <= RealNumRep::new(0, 1)));
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[1] + C * 3 + -l[1] * 1 + -B * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (RealNumRep::new(0, 1) <= -a[3] * 1 + a[1] + C * 2 + -l[1] * 1 + l[2])
            || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))
    );
    assert!(
        (l[1] == l[0])
            || (-a[3] * 1 + a[1] + C * 2 + -l[1] * 1 + l[3] == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= a[3] + -a[1] * 1 + -l[3] * 1 + -C * 2 + l[1]))
    );
    assert!(
        (l[3] == l[2])
            || (a[2] + -a[1] * 1 + -C * 1 + -l[2] * 1 + l[1] + B <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= a[3] + -a[1] * 1 + -l[3] * 1 + -C * 2 + l[1])
    );
    let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -l[3] * 1 + -B * 1)]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1))
            || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1)
    );
    assert!((l[3] == l[2]) || (-a[3] * 1 + C + s[2] + l[3] + B <= RealNumRep::new(0, 1)));
    if !(!(RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -l[2] * 1 + C),
            Interval::interval_lower(a[3] + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (RealNumRep::new(0, 1) <= -a[3] * 1 + a[2] + C + B)
            || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))
    );
    assert!(
        (l[4] == l[3])
            || (RealNumRep::new(0, 1) <= -a[3] * 1 + a[2] + C + -l[2] * 1 + l[3] + -B * 1)
            || (-a[4] * 1 + a[2] + C * 2 + -l[2] * 1 + l[4] == RealNumRep::new(0, 1))
            || (!(a[4] + -a[2] * 1 + -l[4] * 1 + l[2] + -C * 2 <= RealNumRep::new(0, 1)))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[2] + C + -l[2] * 1 + -B * 1),
        Interval::interval_lower(a[3] + -l[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!((l[2] == l[1]) || (-a[2] * 1 + -C * 1 + s[3] + l[2] + B <= RealNumRep::new(0, 1)));
    assert!(
        (l[3] == l[2]) || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -l[3] * 1 + -C * 1 + l[2])
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + C * 2 + -l[2] * 1 + -B * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1]) || (a[4] + -a[2] * 1 + -l[4] * 1 + l[2] + -C * 2 <= RealNumRep::new(0, 1))
    );
    assert!(a[2] + -C * 2 + -s[1] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[2] + -a[0] * 1 + -C * 2 + -l[2] * 1 + -B * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(
        (!(RealNumRep::new(0, 1) <= a[2] + -a[1] * 1 + -C * 1 + l[1] + -l[2] * 1 + -B * 1))
            || (-a[2] * 1 + a[1] + -l[1] * 1 + C + l[2] + B == RealNumRep::new(0, 1))
    );
    assert!(a[4] + -a[0] * 1 + -C * 4 + -l[4] * 1 + -B * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(
        (-a[4] * 1 + a[1] + -l[1] * 1 + C * 3 + l[4] + B == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= a[4] + -a[1] * 1 + -C * 3 + l[1] + -l[4] * 1 + -B * 1))
    );
    assert!(a[4] + -C * 4 + -s[1] * 1 + -l[4] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(
        (l[4] == l[3])
            || (!(l[1] == l[0]))
            || (-a[4] * 1 + a[1] + C * 3 + l[4] + -l[0] * 1 <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= a[4] + -a[3] * 1 + -C * 1 + l[3] + -l[4] * 1 + -B * 1)
            || (RealNumRep::new(0, 1) <= a[4] + -a[2] * 1 + -C * 2 + l[2] + -l[4] * 1 + -B * 1)
    );
    assert!(
        (l[4] == l[3])
            || (-a[4] * 1 + C * 4 + s[0] + l[4] + B <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= a[4] + -a[3] * 1 + -C * 1 + l[3] + -l[4] * 1 + -B * 1)
            || (RealNumRep::new(0, 1) <= a[4] + -a[2] * 1 + -C * 2 + l[2] + -l[4] * 1 + -B * 1)
            || (RealNumRep::new(0, 1) <= a[4] + -a[1] * 1 + -C * 3 + l[1] + -l[4] * 1 + -B * 1)
    );
    assert!(-C * 2 + s[2] + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (C + -s[3] * 1 + s[1] <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + C + -l[3] * 1 + -B * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(-a[0] * 1 + -C * 2 + s[2] + l[0] <= RealNumRep::new(0, 1));
    assert!(a[3] + -C * 1 + -s[3] * 1 + -l[3] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[3] + -C * 2 + -s[2] * 1 + -l[3] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[3] + -a[0] * 1 + -C * 3 + -l[3] * 1 + -B * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(a[3] + -C * 3 + -s[1] * 1 + -l[3] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(
        (-a[3] * 1 + a[2] + -l[2] * 1 + C + l[3] + B == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1))
    );
    assert!(
        (a[2] + -a[1] * 1 + -l[2] * 1 + -C * 1 + l[1] <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1))
    );
    assert!(a[3] + -C * 4 + -s[0] * 1 + -l[3] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + C * 2 + s[1] + l[3] + B <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1)
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + C * 3 + s[0] + l[3] + B <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1)
            || (RealNumRep::new(0, 1) <= a[3] + -a[1] * 1 + -C * 2 + l[1] + -l[3] * 1 + -B * 1)
    );
    assert!(
        (-a[3] * 1 + a[1] + -l[1] * 1 + C * 2 + l[3] + B == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= a[3] + -a[1] * 1 + -C * 2 + l[1] + -l[3] * 1 + -B * 1))
    );
    assert!(-C * 3 + s[2] + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[3] + -l[3] * 1),
        Interval::interval_lower(C + s[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (C * 2 + -s[3] * 1 + s[0] <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1])
    );
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (a[1] + -l[1] * 1 + C + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1]))
    );
    assert!(s[3] + -C * 2 + -s[2] * 1 <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + l[1] + -C * 2 + s[3] <= RealNumRep::new(0, 1));
    if !(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -l[2] * 1 + C),
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(C * 3 + s[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[2] + -l[2] * 1 + C),
        Interval::interval_lower(a[3] + -l[3] * 1),
        Interval::interval_lower(C * 2 + s[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[1] + -l[1] * 1 + C * 3)]);
    ret = ret.intersection(&tmp);
    if !((!(a[2] + -a[1] * 1 + -l[2] * 1 + -C * 1 + l[1] <= RealNumRep::new(0, 1)))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -l[2] * 1 + C),
            Interval::interval_lower(a[3] + -l[3] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[2] + -a[1] * 1 + -l[2] * 1 + -C * 1 + l[1] <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -l[3] * 1),
            Interval::interval_lower(a[1] + -l[1] * 1 + C * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 3 + s[2])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 4 + s[1])]);
    ret = ret.intersection(&tmp);
    assert!(s[3] + -C * 3 + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[3] + -C * 3 + l[0] <= RealNumRep::new(0, 1));
    assert!(s[3] + -C * 4 + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 5 + s[0])]);
    ret = ret.intersection(&tmp);
    assert!(B >= RealNumRep::new(5, 1));
    assert!(C >= RealNumRep::new(5, 1));
    assert!(l[0] >= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[4] + -l[4] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(C * 2 + s[3])]);
    ret = ret.intersection(&tmp);
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(0, 1));
    assert!(-a[2] * 1 + l[2] + s[2] <= RealNumRep::new(0, 1));
    assert!(-a[2] * 1 + s[3] + l[2] + -C * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[2] + -l[2] * 1 + C * 2)]);
    ret = ret.intersection(&tmp);
    assert!(-a[3] * 1 + l[3] + s[3] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + l[1] + -C * 1 + s[2] <= RealNumRep::new(0, 1));
    assert!(-C * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_l_1_t_5_l_1(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 1);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_lower(l[0]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[1] + -s[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(-s[4] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(-s[3] * 1 + -a[0] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1));
    assert!(-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(RealNumRep::new(-5, 2) + -s[3] * 1 / 2 + a[1] + -s[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(-a[0] * 1 + -s[4] * 1 / 2 + s[1] * 3 / 2 + l[0] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(a[3] + -a[2] * 1 + a[1] + -a[0] * 1 + -s[4] * 1 + s[1] + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[1] + -s[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (-a[0] * 1 + -s[4] * 1 / 2 + s[1] * 3 / 2 + l[0] <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= s[3] + a[3] + -a[2] * 1 + -s[4] * 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(-s[3] * 1 + a[1] + s[2] + -s[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + -s[3] * 1 + a[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((-a[0] * 1 + -s[4] * 1 / 2 + s[1] * 3 / 2 + l[0] <= RealNumRep::new(0, 1))
        || (a[3] + -a[2] * 1 + -a[0] * 1 + -s[4] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(-a[0] * 1 + -s[4] * 2 + s[2] * 3 + l[0] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(
                a[3] + -a[2] * 1 + a[1] + -a[0] * 1 / 2 + -s[4] * 1 + s[2] * 1 / 2 + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[1] + -s[2] * 1)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(s[3] + a[4] + -a[2] * 1 + a[1] + -s[4] * 1 + -s[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(!(RealNumRep::new(0, 1) <= s[3] + a[3] + -a[2] * 1 + -s[4] * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[0]),
            Interval::interval_upper(-s[3] * 1 + a[1] + s[4] * 1 / 2 + -s[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(a[2] + -a[1] * 1 + -s[4] * 1 + s[2] <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[0]),
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[1] + s[4] + -s[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-a[0] * 1 + -s[4] * 2 + s[2] * 3 + l[0] <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= s[3] + a[3] + -a[2] * 1 + -s[4] * 1))
    );
    if !(-s[4] * 1 + s[2] <= RealNumRep::new(-5, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(a[4] + -a[3] * 1 + a[1] + -s[4] * 1 + s[2] * 2 + -s[0] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(a[3] + -a[2] * 1 + a[1] + -s[4] * 1 + s[2] * 2 + -s[0] * 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(-s[3] * 1 + s[4] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -s[3] * 3 / 2 + a[1] + s[4] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= s[3] + a[3] + -a[2] * 1 + -s[4] * 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(a[1] + s[4] + -s[2] * 2)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(s[3] * 2 + a[3] + -a[2] * 1 + a[1] + -s[4] * 1 + -s[1] * 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(-s[3] * 1 + -a[3] * 1 + a[1] + s[4] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[3] * 1 / 2 + a[3] + -s[4] * 1 + -s[0] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((a[3] + -a[2] * 1 + -s[4] * 1 + s[2] <= RealNumRep::new(-5, 1))
        || (-a[0] * 1 + -s[4] * 2 + s[2] * 3 + l[0] <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[1] + -s[2] * 1),
        Interval::interval_upper(a[3] + -s[4] * 1 + s[2] + -s[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[1] + -s[2] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(s[4] * 1 / 4 + -s[2] * 1 + s[0] * 3 / 4 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[1] + -s[2] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[4] * 1 / 3 + s[0] * 1 / 3 <= RealNumRep::new(-5, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[1] + -s[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(a[4] + -a[2] * 1 + a[1] + -s[4] * 1 + s[2] + -s[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(s[3] * 2 + a[4] + -a[3] * 1 + a[1] + -s[4] * 1 + -s[1] * 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(-s[4] * 3 + s[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(
                a[3] + -a[2] * 1 + a[1] + -s[4] * 1 + s[2] * 1 / 3 + -s[0] * 1 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[3] + -a[2] * 1 + -s[4] * 1 + s[2] <= RealNumRep::new(-5, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[0]),
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_upper(RealNumRep::new(-5, 1) + a[1] + s[4] + -s[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-s[4] * 3 + s[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= s[3] + a[3] + -a[2] * 1 + -s[4] * 1))
    );
    if !((-s[4] * 3 + s[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1))
        || (a[3] + -a[2] * 1 + -s[4] * 1 + s[2] <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4] * 1 / 2
                + -a[2] * 1 / 2
                + a[1]
                + -s[4] * 1 / 2
                + -s[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[1] + -s[4] * 1 / 4 + -s[0] * 3 / 4),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(
            RealNumRep::new(-10, 3)
                + a[4] * 1 / 3
                + -a[3] * 1 / 3
                + a[1]
                + -s[4] * 1 / 3
                + -s[0] * 2 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (!(RealNumRep::new(0, 1) <= s[3] + a[3] + -a[2] * 1 + -s[4] * 1))
            || (-s[4] * 2 + s[2] * 3 + -s[1] * 1 <= RealNumRep::new(0, 1))
    );
    if !((-s[4] * 2 + s[2] * 3 + -s[1] * 1 <= RealNumRep::new(0, 1))
        || (a[3] + -a[2] * 1 + -s[4] * 1 + s[2] <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !((-s[4] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1))
        || (a[3] + -a[2] * 1 + -s[4] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(a[3] + -a[2] * 1 + -s[4] * 1 + s[2] <= RealNumRep::new(-5, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_upper(a[1] + s[4] + -s[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[4] * 2 + s[2] * 3 + -s[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(
                a[3] + -a[2] * 1 + a[1] + -s[4] * 1 + s[2] * 1 / 2 + -s[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[4] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(
                a[3] + -a[2] * 1 + a[1] + -s[4] * 1 + s[1] * 1 / 2 + -s[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-s[4] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= s[3] + a[3] + -a[2] * 1 + -s[4] * 1))
    );
    if !(!(RealNumRep::new(0, 1) <= s[3] + a[3] + -a[2] * 1 + -s[4] * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[0]),
            Interval::interval_upper(-s[3] * 1 + a[1] + s[4] + -s[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= s[3] + a[3] + -a[2] * 1 + -s[4] * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[0]),
            Interval::interval_upper(-s[3] * 1 + a[1] + s[4] * 1 / 3 + -s[0] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(
            s[3] * 1 / 2 + a[4] + -a[2] * 1 + a[1] + -s[4] * 1 + -s[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(
            RealNumRep::new(-10, 3)
                + a[3] * 1 / 3
                + -a[2] * 1 / 3
                + a[1]
                + -s[4] * 1 / 3
                + -s[0] * 2 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(s[3] + a[3] + -a[2] * 1 + a[1] + -s[4] * 1 + -s[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(s[3] + a[4] + -a[3] * 1 + a[1] + -s[4] * 1 + -s[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2) + a[3] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 + -s[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[2] + -s[3] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[4] + -s[4] * 1)]);
    ret = ret.intersection(&tmp);
    assert!(-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[1] + -s[1] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        s[3] + a[3] + -s[4] * 1 + -s[1] * 1,
    )]);
    ret = ret.intersection(&tmp);
    assert!(-s[3] * 3 + s[4] + s[1] * 2 <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_sim_l_1_t_5_l_1(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
    C: RealNumRep,
    B: RealNumRep,
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 1);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_lower(l[0]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(a[1] + -s[2] * 1 + -B * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -s[3] * 1 + a[1] + C + -B * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[1] + -a[0] * 1 + -C * 1 + -B * 1 + l[0],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[1] + -C * 1 + -s[1] * 1 + -B * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[1] + -C * 2 + -s[0] * 1 + -B * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(a[1] + -s[1] * 1 + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(a[1] + C + -s[2] * 1 + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(-s[3] * 1 + C + a[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(a[1] + -C * 1 + -s[0] * 1 + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(-B * 1 + C * 3 + a[1] + -s[4] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(-B * 1 + -s[3] * 1 + C * 2 + a[1]),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= C + -a[3] * 1 + a[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -B * 1 + C * 2 + a[1] + -s[4] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(a[2] + -a[1] * 1 + -C * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(-B * 1 + C * 2 + a[1] + -s[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[3] * 1 + C * 2 + s[0] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(-s[3] * 1 + C + a[1])]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(C * 2 + a[4] + -a[3] * 1 + a[1] + -s[4] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(C + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[1] + -C * 1 + -s[0] * 1)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[1] + -s[2] * 1),
        Interval::interval_upper(a[1] + -C * 1 + -s[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(s[3] + -C * 4 + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(C * 2 + a[3] + -a[2] * 1 + a[1] + -s[4] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[0]),
        Interval::interval_upper(C + a[4] + -a[2] * 1 + a[1] + -s[4] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(a[2] + -a[1] * 1 + -C * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-B * 1 + C * 2 + a[1] + -s[4] * 1),
            Interval::interval_lower(C + a[3] + -a[2] * 1 + a[1] + -s[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[4] + -s[4] * 1)]);
    ret = ret.intersection(&tmp);
    assert!(-B * 1 + -C * 2 + -a[4] * 1 + a[2] + -a[0] * 1 + s[4] + l[0] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[3] + C + -s[4] * 1)]);
    ret = ret.intersection(&tmp);
    assert!(!(RealNumRep::new(0, 1) <= -B * 1 + s[3] + -C * 2 + -a[0] * 1 + l[0]));
    assert!(!(RealNumRep::new(0, 1) <= -B * 1 + s[3] + -C * 3 + -s[0] * 1));
    assert!(s[3] + -a[0] * 1 + -C * 3 + l[0] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(-s[3] * 1 + a[1] + C * 2)]);
    ret = ret.intersection(&tmp);
    assert!(-B * 1 + -s[3] * 1 + -C * 1 + -a[4] * 1 + a[3] + s[4] <= RealNumRep::new(0, 1));
    assert!(-B * 1 + -C * 3 + -a[4] * 1 + a[3] + -a[0] * 1 + s[4] + l[0] <= RealNumRep::new(0, 1));
    assert!(-B * 1 + -C * 4 + -a[4] * 1 + a[3] + s[4] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-B * 1 + -s[3] * 1 + -a[4] * 1 + a[2] + s[4] <= RealNumRep::new(0, 1));
    assert!(-B * 1 + -C * 2 + -a[4] * 1 + a[3] + s[4] + -s[2] * 1 <= RealNumRep::new(0, 1));
    assert!(-B * 1 + -C * 3 + -a[4] * 1 + a[3] + s[4] + -s[1] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        a[4] + -a[3] * 1 + a[1] + B + C * 2 + -s[4] * 1,
    )]);
    ret = ret.intersection(&tmp);
    assert!(
        (B + -C * 1 + a[3] + -a[2] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= -B * 1 + s[3] + C + -s[4] * 1))
    );
    if !((B + -C * 1 + a[3] + -a[2] * 1 <= RealNumRep::new(0, 1))
        || (C * 3 + -s[4] * 1 + s[0] <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(a[1] + C * 2 + -s[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((C * 2 + -s[4] * 1 + s[1] <= RealNumRep::new(0, 1))
        || (B + C + a[3] + -a[2] * 1 + -s[4] * 1 + s[1] <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !((C + -s[4] * 1 + s[2] <= RealNumRep::new(0, 1))
        || (B + a[3] + -a[2] * 1 + -s[4] * 1 + s[2] <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(-B * 1 + -s[3] * 1 + -C * 1 + -a[3] * 1 + a[2] + s[4] <= RealNumRep::new(0, 1));
    assert!(-B * 1 + -C * 2 + -a[3] * 1 + a[2] + s[4] + -s[2] * 1 <= RealNumRep::new(0, 1));
    assert!(-B * 1 + -C * 1 + -a[4] * 1 + a[2] + s[4] + -s[2] * 1 <= RealNumRep::new(0, 1));
    assert!(-B * 1 + -C * 3 + -a[4] * 1 + a[2] + s[4] + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        a[1] + B + C + a[4] + -a[2] * 1 + -s[4] * 1,
    )]);
    ret = ret.intersection(&tmp);
    assert!(-B * 1 + -C * 2 + -a[4] * 1 + a[2] + s[4] + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-B * 1 + -C * 3 + -a[3] * 1 + a[2] + s[4] + -s[1] * 1 <= RealNumRep::new(0, 1));
    if !((!(B + -C * 1 + a[3] + -a[2] * 1 <= RealNumRep::new(0, 1)))
        || (a[2] + -a[1] * 1 + -C * 1 + -B * 1 <= RealNumRep::new(0, 1))
        || (B + C * 2 + a[3] + -a[2] * 1 + -s[4] * 1 + s[0] <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[1] + -C * 1 + -s[0] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !((!(B + -C * 1 + a[3] + -a[2] * 1 <= RealNumRep::new(0, 1)))
        || (!(a[2] + -a[1] * 1 + -C * 1 + -B * 1 <= RealNumRep::new(0, 1)))
        || (B + C * 2 + a[3] + -a[2] * 1 + -s[4] * 1 + s[0] <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(-B * 1 + -C * 4 + -a[3] * 1 + a[2] + s[4] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-B * 1 + -C * 3 + -a[3] * 1 + a[2] + -a[0] * 1 + s[4] + l[0] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        a[1] + B + C * 2 + a[3] + -a[2] * 1 + -s[4] * 1,
    )]);
    ret = ret.intersection(&tmp);
    assert!(
        (!(RealNumRep::new(0, 1) <= -B * 1 + s[3] + C + -s[4] * 1))
            || (!(RealNumRep::new(0, 1) <= s[3] + a[3] + -a[2] * 1 + -s[4] * 1))
    );
    if !(a[2] + -a[1] * 1 + -C * 1 + -B * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + C * 2 + -s[4] * 1),
            Interval::interval_lower(a[1] + B + C + a[3] + -a[2] * 1 + -s[4] * 1),
            Interval::interval_upper(a[1] + -C * 1 + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(B >= RealNumRep::new(5, 1));
    assert!(C >= RealNumRep::new(5, 1));
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(-s[3] * 1 + -C * 2 + s[4] <= RealNumRep::new(0, 1));
    assert!(-C * 3 + s[4] + -s[2] * 1 <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + -C * 1 + s[1] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + -C * 2 + s[2] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + -C * 4 + s[4] + l[0] <= RealNumRep::new(0, 1));
    assert!(-C * 2 + s[2] + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-C * 3 + s[2] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-C * 5 + s[4] + -s[0] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[1] + C + -s[2] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[1] + C * 3 + -s[4] * 1)]);
    ret = ret.intersection(&tmp);
    assert!(-C * 4 + s[4] + -s[1] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[1] + -s[1] * 1)]);
    ret = ret.intersection(&tmp);
    assert!(-C * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-s[3] * 1 + C + s[1] <= RealNumRep::new(0, 1));
    assert!(s[3] + -C * 2 + -s[2] * 1 <= RealNumRep::new(0, 1));
    assert!(!(-B * 1 + s[3] + -C * 2 + -s[1] * 1 >= RealNumRep::new(0, 1)));
    assert!(!(-B * 1 + s[3] + -C * 1 + -s[2] * 1 >= RealNumRep::new(0, 1)));
    assert!(s[3] + -C * 3 + -s[1] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[1] + B + -s[3] * 1 + C)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[2] + -s[3] * 1)]);
    ret = ret.intersection(&tmp);
    ret
}

pub fn compute_l_2_t_5_l_2(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 2);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])) || (l[1] == l[0]));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[2] + -s[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[2] + -a[1] * 1 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[2] + -a[1] * 2 + s[0] + l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -s[3] * 1 / 2 + a[2] + -a[1] * 1 + s[0] * 1 / 2 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_lower(l[1]),
    ]);
    ret = ret.intersection(&tmp);
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(-5, 1)));
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -s[3] * 1 + a[2] + -a[1] * 1 + s[1] + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(0, 1));
    if !(-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(-s[3] * 1 + a[2])]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[4] * 1 + s[2] <= RealNumRep::new(-5, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[3] * 1 + -a[0] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(-s[3] * 1 + a[2])]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(a[2] + -a[1] * 1 + -s[4] * 1 / 3 + s[0] * 1 / 3 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(
            a[2] + -a[1] * 1 + a[0] * 1 / 2 + -s[2] * 1 / 2 + l[1] + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(a[2] + -a[1] * 1 + -s[2] * 1 / 2 + s[1] * 1 / 2 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    if !(-s[4] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(a[2] + -s[4] * 1 / 2 + -s[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[4] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[2] + -s[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(-s[3] * 1 + a[2])]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(s[3] * 1 / 2 + a[2] + -a[1] * 1 + -s[4] * 1 / 2 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    if !((-s[3] * 1 + a[1] + -l[1] * 1 <= RealNumRep::new(-5, 1))
        || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(-s[3] * 1 + a[2])]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-10, 1)));
    if !(RealNumRep::new(0, 1) <= s[3] * 1 / 2 + -a[1] * 1 + s[0] * 1 / 2 + l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[3] * 1 + a[2]),
            Interval::interval_upper(s[3] * 1 / 2 + a[3] + -s[4] * 1 + -s[0] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(
            a[3] * 1 / 2 + a[2] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 / 2 + l[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(a[2] + -a[1] * 1 + -s[2] * 1 / 3 + s[0] * 1 / 3 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (s[4] * 1 / 4 + -s[2] * 1 + s[0] * 3 / 4 <= RealNumRep::new(0, 1))
            || (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(a[2] + -a[1] * 1 + a[0] + -s[1] * 1 + l[1] + -l[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + a[1] + -s[4] * 1 + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + -s[4] * 1 + s[2] + -s[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2) + -s[3] * 1 / 2 + a[2] + -a[1] * 1 / 2 + l[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1))
    );
    if !((l[1] == l[0]) || (-a[1] * 1 + -s[4] * 1 + s[2] * 2 + l[1] <= RealNumRep::new(-5, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[3] * 1 + a[2]),
        Interval::interval_upper(s[3] + a[3] + -s[4] * 1 + -s[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            -s[3] * 1 + a[2] + s[2] + -s[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[2] + -s[3] * 1 + a[1] + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[4] * 2 + s[2] * 3 + -s[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(-a[0] * 1 + -s[4] * 2 + s[2] * 3 + l[0] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(a[2] + -a[1] * 1 + -s[4] * 1 / 2 + s[1] * 1 / 2 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-a[0] * 1 + -s[4] * 1 / 2 + s[1] * 3 / 2 + l[0] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(a[2] + -a[0] * 1 + -s[4] * 1 + s[1] + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[3] * 3 + s[4] + s[1] * 2 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(-s[3] * 1 + a[2])]);
        ret = ret.intersection(&tmp);
    }
    if !((-s[3] * 1 + s[4] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
        || (-s[3] * 3 + a[1] * 2 + -l[1] * 2 + s[4] <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(-s[3] * 1 + a[2])]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(-s[3] * 1 / 2 + a[2] + -a[1] * 1 + s[2] * 1 / 2 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    if !(a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + -s[4] * 1 + s[2] * 2 + -s[0] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(a[2] + -a[1] * 1 + -s[4] * 1 / 3 + s[2] * 1 / 3 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 3) + a[2] + -a[1] * 2 / 3 + -s[4] * 1 / 3 + l[1] * 2 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(a[2] + -a[1] * 1 + -s[1] * 1 / 2 + s[0] * 1 / 2 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(
            a[4] * 1 / 2 + -a[3] * 1 / 2 + a[2] + -a[1] * 1 / 2 + -s[4] * 1 / 2 + l[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(a[2] + -a[1] * 1 + -s[4] * 1 / 5 + s[0] * 1 / 5 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(
            a[2] + -a[1] * 1 + a[0] * 1 / 4 + -s[4] * 1 / 4 + l[1] + -l[0] * 1 / 4,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(-s[4] * 3 + s[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(a[2] + -a[1] * 1 + -s[4] * 1 + s[2] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-s[4] * 1 / 3 + s[0] * 1 / 3 <= RealNumRep::new(-5, 1))
        || (-l[1] * 1 / 2 + a[1] * 1 / 2 + -s[4] * 1 / 2 <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[2] + -s[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + l[1] * 1 / 2 + -a[1] * 1 / 2 + -s[3] * 1 / 2 + a[2],
        ),
        Interval::interval_upper(RealNumRep::new(-5, 1) + -s[3] * 2 / 3 + a[2] + -s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(
            -s[3] * 1 / 3 + a[2] + -a[1] * 1 + a[0] * 1 / 3 + l[1] + -l[0] * 1 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(-s[3] * 1 / 3 + a[2] + -a[1] * 1 + s[1] * 1 / 3 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(-s[3] * 1 / 4 + a[2] + -a[1] * 1 + s[0] * 1 / 4 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(a[2] + -a[1] * 1 + -s[4] * 1 / 4 + s[1] * 1 / 4 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[2] + a[0] + -s[1] * 2 + -l[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 / 2 + s[2] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (s[3] * 1 / 3 + -a[1] * 1 + s[0] * 2 / 3 + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-a[4] * 1 / 2
                + a[3] * 1 / 2
                + -a[1] * 1 / 2
                + s[4] * 1 / 2
                + -s[2] * 1
                + s[0]
                + l[1] * 1 / 2
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(RealNumRep::new(-10, 1) + l[1] + -a[1] * 1 + a[2]),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[2] + -s[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[2] + a[4] + -a[3] * 1 + a[1] + -s[4] * 1 + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[4] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(a[2] + -s[4] * 1 + s[1] * 1 / 2 + -s[0] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[4] * 1 / 4 + s[0] * 3 / 4 + l[1] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[2] + -s[1] * 3 / 2 + s[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (-a[4] * 1 / 2 + a[3] * 1 / 2 + -a[1] * 3 / 2 + s[4] * 1 / 2 + s[0] + l[1] * 3 / 2
                <= RealNumRep::new(-5, 1))
    );
    if !((l[1] == l[0])
        || (-s[3] * 2 + -a[4] * 1 + a[3] + -a[1] * 1 + s[4] + s[1] * 2 + l[1]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(-s[3] * 1 + a[2])]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-10, 1) + a[2] + a[1] * 2 + -s[4] * 1 + -s[0] * 2 + -l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-s[3] * 1 + -a[4] * 1 + a[3] + -a[1] * 1 + s[4] + s[0] + l[1]
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[2] + -s[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[1]),
            Interval::interval_upper(a[4] + -a[3] * 1 + a[2] + -s[4] * 1 + s[2] + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4] * 1 / 2
                + -a[3] * 1 / 2
                + a[2]
                + -s[4] * 1 / 2
                + -s[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(-s[3] * 1 + a[2]),
        Interval::interval_upper(a[3] + a[1] + -s[4] * 1 + -s[0] * 1 + -l[1] * 1),
        Interval::interval_upper(s[3] + a[3] + -a[1] * 1 + -s[4] * 1 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_lower(a[3] + a[1] + -s[4] * 1 + -s[0] * 1 + -l[1] * 1),
        Interval::interval_upper(
            RealNumRep::new(-5, 3) + a[3] * 2 / 3 + a[2] * 1 / 3 + -s[4] * 2 / 3 + -s[0] * 1 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + l[1] * 2 / 3 + -a[1] * 2 / 3 + a[2] + -s[4] * 1 / 3,
        ),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[2] + -s[4] * 1 / 2 + -s[0] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + l[1] * 1 / 2
                + -a[1] * 1 / 2
                + a[4] * 1 / 2
                + -a[3] * 1 / 2
                + a[2]
                + -s[4] * 1 / 2,
        ),
        Interval::interval_upper(
            RealNumRep::new(-5, 3)
                + a[4] * 2 / 3
                + -a[3] * 2 / 3
                + a[2]
                + -s[4] * 2 / 3
                + -s[0] * 1 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(s[3] + a[4] + -a[3] * 1 + a[2] + -s[4] * 1 + -s[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + -s[3] * 1 / 2 + a[2] + -s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(l[1] + -a[1] * 1 + s[3] + a[4] + -a[3] * 1 + a[2] + -s[4] * 1),
        Interval::interval_upper(
            s[3] * 1 / 2 + a[4] + -a[3] * 1 + a[2] + -s[4] * 1 + -s[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2) + a[3] * 1 / 2 + a[2] * 1 / 2 + -s[4] * 1 / 2 + -s[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[2] + -s[4] * 1 / 3 + -s[1] * 2 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[3] * 1 / 2
                + a[2] * 1 / 2
                + -a[1] * 1 / 2
                + -s[4] * 1 / 2
                + l[1] * 1 / 2,
        ),
        Interval::interval_upper(a[3] + a[1] + -s[4] * 1 + -s[0] * 1 + -l[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(-s[3] * 1 + a[3])]);
    ret = ret.intersection(&tmp);
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[4] + -s[4] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[2] + -s[2] * 1)]);
    ret = ret.intersection(&tmp);
    ret
}

pub fn compute_sim_l_2_t_5_l_2(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
    C: RealNumRep,
    B: RealNumRep,
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 2);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])) || (l[1] == l[0]));
    assert!(a[1] + -s[2] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[1] + -a[0] * 1 + -C * 1 + -l[1] * 1 + -B * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(a[1] + -C * 2 + -s[0] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[1] + -C * 1 + -s[1] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] + B <= RealNumRep::new(0, 1)));
    assert!((l[1] == l[0]) || (-a[1] * 1 + C + s[0] + l[1] + B <= RealNumRep::new(0, 1)));
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[1]),
            Interval::interval_point(a[2] + -a[1] * 1 + -C * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[3] * 1 + a[1] + C + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + -a[1] * 1 + -C * 1 + l[1] + B,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(a[2] + -a[1] * 1 + -C * 1 + l[1] + B),
        Interval::interval_lower(a[2] + -s[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(a[2] + -a[1] * 1 + -C * 1 + l[1] + B),
        Interval::interval_lower(a[3] + -s[4] * 1),
        Interval::interval_lower(a[2] + C + -s[4] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!((l[1] == l[0]) || (-a[1] * 1 + -C * 1 + s[2] + l[1] + B <= RealNumRep::new(0, 1)));
    if !(-B * 1 + C * 2 + a[1] + -s[4] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -a[1] * 1 + -C * 1 + l[1] + B),
            Interval::interval_lower(a[3] + -s[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[1] == l[0]) || (B + -C * 3 + -a[1] * 1 + s[4] + l[1] <= RealNumRep::new(0, 1)));
    assert!((l[1] == l[0]) || (B + s[3] + -C * 2 + -a[1] * 1 + l[1] <= RealNumRep::new(0, 1)));
    if !((l[1] == l[0]) || (RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C)) {
        let tmp = IntervalList::new(vec![Interval::new(None, None)]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[3] * 1 + C + s[1] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[2] + -s[3] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-C * 2 + -a[4] * 1 + a[3] + -a[1] * 1 + s[4] + l[1] <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[4] + -s[4] * 1)]);
    ret = ret.intersection(&tmp);
    if !(C * 2 + -s[4] * 1 + s[1] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(a[2] + C + -s[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(-B * 1 + -s[3] * 1 + a[2])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(-B * 1 + -C * 1 + a[2] + -s[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(a[3] + -s[4] * 1),
        Interval::interval_lower(-B * 1 + C + a[2] + -s[4] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(a[2] + -a[1] * 1 + -C * 1 + -B * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(l[1])]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_lower(l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1] + -a[1] * 1 + -B * 1 + -C * 1 + a[2]),
        Interval::interval_lower(-B * 1 + -C * 1 + a[2] + -a[1] * 1 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(-B * 1 + a[2] + -s[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_point(a[2] + -a[1] * 1 + -C * 1 + l[1]),
        Interval::interval_upper(a[2] + -a[1] * 1 + -C * 1 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(-B * 1 + C * 2 + a[2] + -s[4] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(-B * 1 + -s[3] * 1 + C + a[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -B * 1 + -C * 3 + a[2] + -s[0] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -B * 1 + -C * 1 + a[2] + -s[2] * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -B * 1 + -C * 2 + a[2] + -a[0] * 1 + l[0],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        -B * 1 + -C * 2 + a[2] + -s[1] * 1,
    )]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= C + -a[1] * 1 + s[0] + l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[1]),
            Interval::interval_upper(-B * 1 + -C * 2 + a[2] + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= C + -a[1] * 1 + s[0] + l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[1]),
            Interval::interval_upper(-B * 1 + -C * 1 + a[2] + -a[1] * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[1]),
        Interval::interval_upper(C + a[4] + -a[3] * 1 + a[2] + -s[4] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !((-s[3] * 1 + a[1] + -l[1] * 1 + C <= RealNumRep::new(0, 1))
        || (-s[3] * 1 + C * 2 + s[0] <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + -a[1] * 1 + -C * 1 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(-a[0] * 1 + -C * 1 + s[1] + l[0] <= RealNumRep::new(0, 1));
    assert!(-C * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (C + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(s[3] + -C * 3 + -a[0] * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(-C * 2 + s[2] + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(s[3] + -C * 3 + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + -C * 2 + s[2] + l[0] <= RealNumRep::new(0, 1));
    assert!(-C * 3 + s[2] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-C * 5 + s[4] + -s[0] * 1 <= RealNumRep::new(0, 1));
    if !(-s[3] * 1 + C * 2 + s[0] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -s[3] * 1),
            Interval::interval_upper(a[2] + -a[1] * 1 + -C * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(C + -s[4] * 1 + s[2] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !((a[1] + -l[1] * 1 + C * 2 + -s[4] * 1 <= RealNumRep::new(0, 1))
        || (C * 3 + -s[4] * 1 + s[0] <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(a[2] + C + -s[4] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(-B * 1 + -s[3] * 1 + -C * 1 + -a[4] * 1 + a[3] + s[4] <= RealNumRep::new(0, 1));
    assert!(l[1] + -a[1] * 1 + -B * 1 + -C * 2 + -a[4] * 1 + a[3] + s[4] <= RealNumRep::new(0, 1));
    assert!(-B * 1 + -C * 2 + -a[4] * 1 + a[3] + s[4] + -s[2] * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(
        a[2] + B + C + a[4] + -a[3] * 1 + -s[4] * 1,
    )]);
    ret = ret.intersection(&tmp);
    assert!(-B * 1 + -C * 4 + -a[4] * 1 + a[3] + s[4] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-B * 1 + -C * 3 + -a[4] * 1 + a[3] + -a[0] * 1 + s[4] + l[0] <= RealNumRep::new(0, 1));
    assert!(-B * 1 + -C * 3 + -a[4] * 1 + a[3] + s[4] + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(B >= RealNumRep::new(5, 1));
    assert!(C >= RealNumRep::new(5, 1));
    assert!(l[0] >= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(-s[3] * 1 + a[3])]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[3] + C + -s[4] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[2] + C + -s[3] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[2] + C * 2 + -s[4] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[2] + -s[2] * 1)]);
    ret = ret.intersection(&tmp);
    assert!(-s[3] * 1 + -C * 2 + s[4] <= RealNumRep::new(0, 1));
    assert!(-C * 3 + s[4] + -s[2] * 1 <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + l[1] + -C * 1 + s[2] <= RealNumRep::new(0, 1));
    assert!(-C * 4 + s[4] + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-C * 4 + -a[0] * 1 + s[4] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + l[1] + -C * 3 + s[4] <= RealNumRep::new(0, 1));
    assert!(s[3] + -C * 4 + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(s[3] + -a[1] * 1 + l[1] + -C * 2 <= RealNumRep::new(0, 1));
    assert!(s[3] + -C * 2 + -s[2] * 1 <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_l_3_t_5_l_3(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 3);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[3] + -s[3] * 1)]);
    ret = ret.intersection(&tmp);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])));
    assert!((l[2] == l[1]) || (-a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(-5, 1)));
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(l[2]),
        Interval::interval_point(l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[1] * 1 + -s[4] * 1 + s[1] + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + -s[3] * 1 + a[3]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 <= RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(-5, 1)));
    assert!((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)));
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[3] + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(0, 1));
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]),
            Interval::interval_lower(-s[3] * 1 + a[3] + -a[2] * 1 + a[1] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(-5, 1)));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(
            -s[3] * 1 / 2 + a[3] + -a[2] * 1 + a[1] * 1 / 2 + -l[1] * 1 / 2 + l[2],
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (s[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2 <= RealNumRep::new(-5, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (s[3] + -a[2] * 2 + a[1] * 2 + -s[2] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (s[4] * 1 / 4 + -s[2] * 1 + s[0] * 3 / 4 <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1))
    );
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[1] + l[1]))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[2] * 1 + a[1] * 1 / 2 + -l[1] * 1 / 2 + -s[4] * 1 / 2 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(
            a[3] + -a[2] * 1 + a[1] * 1 / 3 + -l[1] * 1 / 3 + -s[4] * 1 / 3 + l[2],
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + s[4] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
            || (-s[3] * 3 + a[1] * 2 + -l[1] * 2 + s[4] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-s[3] * 1 + a[2] + -a[1] * 1 + s[1] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + -a[2] * 1 / 2 + l[2] * 1 / 2 + -s[4] * 1 / 2,
        ),
        Interval::interval_upper(
            RealNumRep::new(-10, 3) + a[3] + -a[1] * 1 / 3 + -s[4] * 2 / 3 + l[1] * 1 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + s[4] + -s[2] * 1 + -l[1] * 3 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[2]),
            Interval::interval_upper(a[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + -a[0] * 1 + s[2] + -l[1] * 2 + l[2] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[2] + -s[1] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(-s[4] * 1 + s[2] <= RealNumRep::new(-5, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[2]),
            Interval::interval_upper(s[3] + a[3] + -a[1] * 1 + -s[4] * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-s[3] * 1 + -a[2] * 2 + a[1] * 2 + s[4] + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(-s[4] * 2 + s[2] * 3 + -s[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(-s[3] * 1 + a[3] + -a[1] * 1 + s[2] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    if !(!(l[2] == l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[2]),
            Interval::interval_upper(a[3] + -a[2] * 1 + -s[1] * 1 / 2 + s[0] * 1 / 2 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(l[2] == l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[2]),
            Interval::interval_upper(a[3] + -a[2] * 1 + a[0] + -s[1] * 1 + l[1] + -l[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + a[1] + -l[1] * 1 + -s[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + s[2] + -s[0] * 1 + -l[1] * 3 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
    );
    if !(a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + -s[4] * 1 + s[2] + -s[0] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((a[2] + -s[4] * 1 + -l[2] * 1 <= RealNumRep::new(-5, 1))
        || (-s[4] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1))
    );
    if !(-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            s[3] + a[3] + -s[4] * 1 + -s[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[2] * 1 + -s[4] * 1 / 2 + s[1] * 1 / 2 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (s[3] + -a[2] * 3 + a[1] * 3 + -a[0] * 1 + -l[1] * 3 + l[2] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-10, 1)));
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (s[3] * 1 / 3 + -a[1] * 1 + s[0] * 2 / 3 + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 4 + s[4] + s[0] * 3 + l[1] * 4 <= RealNumRep::new(-20, 1)));
    assert!(
        (-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + a[1] + -l[1] * 1 <= RealNumRep::new(-5, 1))
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    if !((l[1] == l[0])
        || (!(l[2] == l[1]))
        || (a[2] + -a[1] * 1 + -s[4] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[1] + l[2] <= RealNumRep::new(-10, 1)));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(s[3] * 1 / 2 + a[3] + -a[2] * 1 + -s[4] * 1 / 2 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (s[3] + -a[2] * 1 + l[2] + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 2 + s[4] + -l[1] * 2 + l[2] * 3 <= RealNumRep::new(-5, 1))
    );
    if !(-a[0] * 1 / 2 + -s[4] * 1 + s[2] * 3 / 2 + l[0] * 1 / 2 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[1] * 1 + a[0] + -s[2] * 1 + l[1] + -l[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -a[1] * 1 + a[0] + l[2] + l[1] + -l[0] * 1),
        Interval::interval_upper(
            -s[3] * 2 / 3 + a[3] + -a[1] * 1 + a[0] * 2 / 3 + l[1] + -l[0] * 2 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[1] == l[0]) || (-a[1] * 1 + -s[4] * 1 + s[2] * 2 + l[1] <= RealNumRep::new(-5, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + -a[2] * 2 + s[1] + l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((-a[0] * 2 + -s[4] * 1 + s[1] * 3 + l[0] * 2 <= RealNumRep::new(0, 1))
        || (a[2] + -a[0] * 1 + -l[2] * 1 + -s[4] * 1 + s[1] + l[0] <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 2 + s[0] + l[1] * 2 + -l[2] * 1 <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(-s[3] * 1 / 2 + a[3] + -a[2] * 1 + s[2] * 1 / 2 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !((a[2] + -s[4] * 1 + -l[2] * 1 <= RealNumRep::new(-5, 1))
        || (a[1] * 1 / 2 + -l[1] * 1 / 2 + -s[4] * 1 / 2 <= RealNumRep::new(-5, 1))
        || (-s[4] * 1 / 3 + s[0] * 1 / 3 <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(-s[4] * 1 + s[2] * 4 / 3 + -s[0] * 1 / 3 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (a[3] + -a[2] * 1 + -s[4] * 1 + s[2] <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(l[2])]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + a[1] + -a[0] * 1 + s[1] + -l[1] * 1 + l[2] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + -a[0] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[1] * 1 + -s[2] * 2 + s[0] * 2 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + -a[2] * 1 + a[1] * 1 / 2 + -l[1] * 1 / 2 + -s[4] * 1 / 2 + l[2],
            ),
            Interval::interval_lower(a[3] + -a[2] * 1 + -s[4] * 1 / 3 + s[0] * 1 / 3 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -s[3] * 1 + a[3] + -a[1] * 1 + s[0] + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[2] * 1 + -s[4] * 1 + s[2] + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-s[3] * 1 + a[2] * 2 + -a[1] * 2 + s[0] + l[1] * 2 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 4 + a[1] * 4 + -a[0] * 1 + s[4] + -l[1] * 4 + l[2] * 4 + l[0]
                <= RealNumRep::new(0, 1))
    );
    if !((l[1] == l[0])
        || (!(l[2] == l[1]))
        || (a[2] + -a[1] * 1 + -s[4] * 1 / 3 + s[0] * 1 / 3 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[1] * 1 + -s[4] * 2 / 3 + s[0] * 2 / 3 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[2]),
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[3] + a[1] + -s[2] * 2 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[1] + l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[2]),
            Interval::interval_upper(a[3] + -a[2] * 1 + -a[1] * 1 + a[0] + l[2] + l[1] + -l[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + -a[0] * 1 + s[1] * 2 + l[2] + l[0] <= RealNumRep::new(-5, 1))
    );
    if !((l[1] == l[0])
        || (a[2] * 3 + -a[1] * 3 + -s[4] * 1 + s[0] + l[1] * 3 + -l[2] * 3
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (-a[2] * 1 + l[2] + s[4] + -s[2] * 2 + s[0] * 2 <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            a[3] + a[2] + -a[1] * 1 + -s[4] * 1 + l[1] + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[3] * 1 + s[4] * 1 / 3 + s[1] * 2 / 3 <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -s[3] * 1 + a[3] + -a[2] * 1 + s[1] + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (s[3] + -a[2] * 3 + a[1] * 3 + -s[1] * 1 + -l[1] * 3 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (s[3] + -a[2] * 4 + a[1] * 4 + -s[0] * 1 + -l[1] * 4 + l[2] * 4
                <= RealNumRep::new(0, 1))
    );
    if !((l[1] == l[0])
        || (a[2] + -a[1] * 1 + -s[4] * 1 + s[2] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (a[2] * 2 + -a[1] * 2 + -s[4] * 1 + s[1] + l[1] * 2 + -l[2] * 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[1] + -s[0] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(-10, 1))
            || (-a[2] * 1 + s[0] + l[2] <= RealNumRep::new(-15, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 4 + a[1] * 4 + s[4] + -s[1] * 1 + -l[1] * 4 + l[2] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 5 + a[1] * 5 + s[4] + -s[0] * 1 + -l[1] * 5 + l[2] * 5
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (s[3] * 1 / 2 + -a[2] * 1 + s[1] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
    );
    if !((l[2] == l[1]) || (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[2] * 1 + l[2] + -s[2] * 1 + s[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[3] + -a[1] * 3 + s[0] * 2 + l[1] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[3] + -s[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[4] * 1 / 3 + s[1] * 2 / 3 + l[2] <= RealNumRep::new(-5, 1))
    );
    if !((l[1] == l[0]) || (-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -s[3] * 2 + a[3] + -a[1] * 1 + s[1] * 2 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -s[4] * 1),
            Interval::interval_lower(a[3] + -a[1] * 1 + -s[4] * 2 + s[2] * 2 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(-a[1] * 1 / 2 + l[1] * 1 / 2 + -s[4] * 1 / 2 + s[2] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(
            a[3] + -a[2] * 1 + a[0] * 1 / 2 + -s[2] * 1 / 2 + l[2] + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(
            a[3] + -a[2] * 1 + a[0] * 1 / 4 + -s[4] * 1 / 4 + l[2] + -l[0] * 1 / 4,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -a[1] * 1 + a[0] + l[2] + l[1] + -l[0] * 1),
        Interval::interval_upper(a[3] + -a[1] * 1 + a[0] * 2 + -s[1] * 2 + l[1] + -l[0] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -a[1] * 1 + a[0] + l[2] + l[1] + -l[0] * 1),
        Interval::interval_upper(-s[3] * 1 / 2 + a[3] + -a[1] * 1 + s[0] * 1 / 2 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[1] + l[1]),
        Interval::interval_upper(-s[3] * 2 / 3 + a[3] + -a[1] * 1 + s[1] * 2 / 3 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[1] * 1 + -s[2] * 1 + s[1] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -s[2] * 1 / 2 + s[1] * 1 / 2 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(-s[3] * 1 / 4 + a[3] + -a[2] * 1 + s[0] * 1 / 4 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(!(l[2] == l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[2]),
            Interval::interval_upper(a[3] + -a[2] * 1 + -s[2] * 1 / 3 + s[0] * 1 / 3 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -s[2] * 1 / 3 + s[0] * 1 / 3 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(-s[3] * 1 / 3 + a[3] + -a[2] * 1 + s[1] * 1 / 3 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (s[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[1] * 1 + -s[4] * 2 / 3 + s[2] * 2 / 3 + l[1]),
        Interval::interval_upper(
            a[3] + -a[2] * 1 / 2 + -a[1] * 1 + l[2] * 1 / 2 + -s[4] * 1 / 2 + s[2] + l[1],
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2) + a[3] + -a[2] * 3 / 2 + s[0] * 1 / 2 + l[2] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2) + a[3] + -a[2] * 1 / 2 + -s[4] * 1 / 2 + l[2] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -s[4] * 1 / 4 + s[1] * 1 / 4 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -a[1] * 1 + a[0] + l[2] + l[1] + -l[0] * 1),
        Interval::interval_upper(
            a[3] + -a[1] * 1 + a[0] * 1 / 2 + -s[4] * 1 / 2 + l[1] + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[3] + -s[4] * 1 / 2 + -s[2] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -a[1] * 1 + a[0] + l[2] + l[1] + -l[0] * 1),
        Interval::interval_upper(a[3] + -a[1] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[1] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[3]
                + -a[2] * 1
                + -a[1] * 1 / 2
                + l[2]
                + s[0] * 1 / 2
                + l[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(-s[3] * 1 / 2 + a[3] + -a[1] * 1 + s[0] * 1 / 2 + l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[3]
                + -a[2] * 1
                + -a[1] * 1 / 2
                + l[2]
                + s[0] * 1 / 2
                + l[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[2]),
            Interval::interval_upper(a[3] + -a[1] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[1] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[1]),
        Interval::interval_upper(a[3] + -a[2] * 2 + -a[1] * 1 + l[2] * 2 + s[4] + s[0] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[1] + l[1]),
        Interval::interval_upper(a[3] + -a[1] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[3] + -a[1] * 1 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(-s[3] * 1 / 2 + a[3] + -a[1] * 1 + s[0] * 1 / 2 + l[1]),
        Interval::interval_upper(
            a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[1] + l[1]),
        Interval::interval_upper(-s[3] * 1 / 2 + a[3] + -a[1] * 1 + s[0] * 1 / 2 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(-s[3] * 1 / 2 + a[3] + -a[1] * 1 + s[0] * 1 / 2 + l[1]),
        Interval::interval_upper(a[3] + -a[2] * 2 + -a[1] * 1 + l[2] * 2 + s[4] + s[0] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[1] * 1 + -s[1] * 1 + s[0] + l[1]),
        Interval::interval_upper(
            a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[1] * 1 + -s[1] * 1 + s[0] + l[1]),
        Interval::interval_upper(a[3] + -a[2] * 2 + -a[1] * 1 + l[2] * 2 + s[4] + s[0] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    if !((-s[4] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1))
        || (a[2] + -s[4] * 1 + -l[2] * 1 + s[1] * 1 / 2 + -s[0] * 1 / 2 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (s[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2 <= RealNumRep::new(-10, 1))
            || (s[3] * 2 / 3 + -a[2] * 1 + s[0] * 1 / 3 + l[2] <= RealNumRep::new(-5, 1))
    );
    if !(-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(s[3] + a[3] + -a[1] * 1 + -s[4] * 1 + l[1]),
            Interval::interval_upper(s[3] * 1 / 2 + a[3] + -s[4] * 1 + -s[0] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -s[1] * 1 / 2 + s[0] * 1 / 2 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + a[1] + -s[4] * 1 + -s[0] * 1 + -l[1] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[1] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[1]),
        Interval::interval_upper(
            a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -a[1] * 1 + a[0] + l[2] + l[1] + -l[0] * 1),
        Interval::interval_upper(a[3] + -a[1] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[1] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[3]
                + -a[2] * 1
                + -a[1] * 1 / 2
                + l[2]
                + s[0] * 1 / 2
                + l[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[1] * 1 + -s[1] * 1 + s[0] + l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[3]
                + -a[2] * 1
                + -a[1] * 1 / 2
                + l[2]
                + s[0] * 1 / 2
                + l[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + a[0] + -s[1] * 1 + l[2] + -l[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[0]),
            Interval::interval_lower(-s[3] * 1 / 2 + a[3] + -a[2] * 1 + s[0] * 1 / 2 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (RealNumRep::new(0, 1) <= s[3] * 1 / 2 + -a[1] * 1 + s[0] * 1 / 2 + l[1]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[2] * 1 + -a[1] * 1 + s[0] + l[1] + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(
            -s[3] * 1 / 3 + a[3] + -a[2] * 1 + a[0] * 1 / 3 + l[2] + -l[0] * 1 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -s[4] * 1 / 3 + s[2] * 1 / 3 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -s[4] * 1 / 5 + s[0] * 1 / 5 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -a[1] * 1 + a[0] + l[2] + l[1] + -l[0] * 1),
        Interval::interval_upper(a[3] + -a[1] * 1 + -s[1] * 1 + s[0] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    if !(-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[2]),
            Interval::interval_upper(a[3] + -a[1] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[1] + l[1]),
        Interval::interval_upper(a[3] + -a[1] * 1 + -s[4] * 1 / 2 + s[1] * 1 / 2 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[1] + l[1]),
        Interval::interval_upper(a[3] + -a[1] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    if !(-s[3] * 1 + a[2] + -l[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[2]),
            Interval::interval_upper(a[3] + -a[1] * 1 + -s[1] * 1 + s[0] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-a[2] * 1 / 2 + -a[1] * 1 + l[2] * 1 / 2 + s[4] * 1 / 2 + s[0] + l[1]
                <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[3] + -a[2] * 1 + l[2]),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[3] + -s[1] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[3] + a[0] * 2 + -s[1] * 3 + -l[0] * 2),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + -a[2] * 1 + a[0] + l[2] + -s[1] * 1 + -l[0] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[3] + -s[4] * 3 / 4 + -s[0] * 1 / 4),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + -a[2] * 1 / 2 + l[2] * 1 / 2 + -s[4] * 1 / 2,
        ),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + -a[1] * 1 / 3 + l[1] * 1 / 3 + -s[4] * 2 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + a[2] + -s[4] * 1 + -s[1] * 1 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-5, 1) + a[3] + a[2] + -a[1] * 1 + -s[4] * 1 + l[1] + -l[2] * 1,
            ),
            Interval::interval_upper(
                RealNumRep::new(-5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[4] * 1
                    + -s[0] * 1 / 2
                    + -l[2] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[3] + a[1] + -l[1] * 1 + -s[2] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + a[0] * 1 / 2 + -s[2] * 3 / 2 + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[3] + -s[2] * 4 / 3 + s[0] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[3] + -s[1] * 2 + s[0]),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + -a[2] * 1 + l[2] + -s[1] * 1 / 2 + s[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[3] + -a[2] * 1 + l[2]),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[3] + -a[1] * 1 + l[1]),
        Interval::interval_upper(RealNumRep::new(-20, 1) + a[3] + -s[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[3] + -s[2] * 3 / 2 + s[1] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 2 + -l[1] * 2 + s[4] + l[2] * 3 <= RealNumRep::new(-15, 1))
            || (-a[2] * 1 + s[4] * 1 / 2 + s[0] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[3] + -a[2] * 1 / 2 + l[2] * 1 / 2 + -s[4] * 1 / 2,
        ),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[3] + -s[4] * 2 / 3 + -s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[4] + -s[4] * 1)]);
    ret = ret.intersection(&tmp);
    assert!(-a[2] * 1 + l[2] + s[2] <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_sim_l_3_t_5_l_3(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
    C: RealNumRep,
    B: RealNumRep,
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 3);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])));
    assert!(a[1] + -s[2] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[1] + -a[0] * 1 + -C * 1 + -l[1] * 1 + -B * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(
        (l[2] == l[1])
            || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1))
    );
    assert!(a[1] + -C * 2 + -s[0] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[1] + -C * 1 + -s[1] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] + B <= RealNumRep::new(0, 1)));
    assert!((l[1] == l[0]) || (-a[1] * 1 + C + s[0] + l[1] + B <= RealNumRep::new(0, 1)));
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1)
            || (a[1] + -s[3] * 1 + C + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[1] + -s[3] * 1 + C + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1))
            || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    if !((l[1] == l[0]) || (RealNumRep::new(0, 1) <= -a[3] * 1 + a[1] + C * 2 + -l[1] * 1 + l[2])) {
        let tmp = IntervalList::new(vec![Interval::new(None, None)]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[2]),
            Interval::interval_point(a[3] + -a[1] * 1 + -C * 2 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[1] == l[0]) || (-a[1] * 1 + -C * 1 + s[2] + l[1] + B <= RealNumRep::new(0, 1)));
    assert!(
        (l[1] == l[0])
            || (l[2] == l[1])
            || (-a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] == RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C) || (!(l[2] == l[1])));
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[3] + -C * 2 + l[1] + B <= RealNumRep::new(0, 1)));
    assert!((l[1] == l[0]) || (-a[1] * 1 + -C * 3 + s[4] + l[1] + B <= RealNumRep::new(0, 1)));
    if !(!(RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[2]),
            Interval::interval_point(a[3] + -a[2] * 1 + l[2] + -C * 1 + -B * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1))
        || (a[2] + -l[2] * 1 + C + -s[4] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1)
        || (a[1] + -s[4] * 1 + C * 2 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[2] * 1 + -C * 1 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[2] + l[2] + B <= RealNumRep::new(0, 1)));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -s[3] * 1 + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + C + -s[4] * 1 + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(a[2] + -s[3] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)));
    assert!(-C * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1));
    if !(!(l[1] == l[0])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[2]),
            Interval::interval_upper(a[3] + -a[1] * 1 + -C * 2 + l[0]),
            Interval::interval_upper(a[3] + -a[2] * 1 + -C * 1 + l[2] + -B * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(a[3] + -a[2] * 1 + l[2] + -C * 1 + -B * 1),
        Interval::interval_lower(a[3] + -a[2] * 1 + -C * 1 + l[2] + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (!(l[1] == l[0]))
            || (-a[2] * 1 + a[1] + C + l[2] + -l[0] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (-a[2] * 1 + a[1] + -l[1] * 1 + C + l[2] + B == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= a[2] + -a[1] * 1 + -C * 1 + l[1] + -l[2] * 1 + -B * 1))
    );
    assert!(a[2] + -C * 2 + -s[1] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[2] + -a[0] * 1 + -C * 2 + -l[2] * 1 + -B * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + -C * 1 + s[1] + l[0] <= RealNumRep::new(0, 1));
    assert!((l[2] == l[1]) || (-a[2] * 1 + C + s[1] + l[2] + B <= RealNumRep::new(0, 1)));
    let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1 + -B * 1)]);
    ret = ret.intersection(&tmp);
    if !(a[2] + C + -s[4] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + C * 2 + s[0] + l[2] + B <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1])
    );
    assert!(
        (l[2] == l[1])
            || (RealNumRep::new(0, 1) <= a[2] + -a[1] * 1 + -C * 1 + l[1] + -l[2] * 1 + -B * 1)
            || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1]))
    );
    assert!(a[2] + -C * 1 + -s[2] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_lower(l[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(a[2] + -C * 3 + -s[0] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -C * 1 + l[2]),
        Interval::interval_point(a[3] + -a[2] * 1 + -C * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!((l[2] == l[1]) || (-a[2] * 1 + -C * 2 + s[4] + l[2] + B <= RealNumRep::new(0, 1)));
    assert!((l[2] == l[1]) || (-a[2] * 1 + -C * 1 + s[3] + l[2] + B <= RealNumRep::new(0, 1)));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -C * 1 + -s[2] * 1 + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(l[2] + B),
        Interval::interval_upper(a[3] + -C * 2 + -s[1] * 1 + -B * 1),
        Interval::interval_upper(a[3] + -a[2] * 1 + -C * 1 + l[2] + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[2]),
        Interval::interval_upper(a[3] + -a[2] * 1 + -C * 1 + l[2] + -B * 1),
        Interval::interval_upper(a[3] + -C * 2 + -s[1] * 1 + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(l[2] + B),
        Interval::interval_upper(a[3] + -C * 3 + -s[0] * 1 + -B * 1),
        Interval::interval_upper(a[3] + -a[1] * 1 + -C * 2 + l[1] + -B * 1),
        Interval::interval_upper(a[3] + -a[2] * 1 + -C * 1 + l[2] + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[2]),
            Interval::interval_upper(a[3] + -C * 3 + -s[0] * 1 + -B * 1),
            Interval::interval_upper(a[3] + -a[2] * 1 + -C * 1 + l[2] + -B * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[2]),
            Interval::interval_upper(a[3] + -a[1] * 1 + -C * 2 + l[1] + -B * 1),
            Interval::interval_upper(a[3] + -a[2] * 1 + -C * 1 + l[2] + -B * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[3] + -C * 1 + -s[3] * 1 + -B * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[3] + -C * 4 + -s[0] * 1 + -B * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[3] + -C * 2 + -s[2] * 1 + -B * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[3] + -C * 3 + -s[1] * 1 + -B * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[3] + -a[0] * 1 + -C * 3 + -B * 1 + l[0],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(a[3] + -a[1] * 1 + l[1] + -C * 2 + -B * 1),
        Interval::interval_lower(a[3] + -a[1] * 1 + -C * 2 + l[1] + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (C + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (C + -s[3] * 1 + s[1] <= RealNumRep::new(0, 1))
    );
    assert!(-a[2] * 1 + l[2] + -C * 1 + s[3] <= RealNumRep::new(0, 1));
    assert!(-C * 2 + s[3] + -s[2] * 1 <= RealNumRep::new(0, 1));
    if !((a[2] + -l[2] * 1 + C + -s[4] * 1 <= RealNumRep::new(0, 1))
        || (C * 3 + -s[4] * 1 + s[0] <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1]))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !(C + -s[4] * 1 + s[2] <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !((a[1] + -l[1] * 1 + C * 2 + -s[4] * 1 <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + -l[1] * 1 + C + l[2])
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    if !((a[2] + -l[2] * 1 + C + -s[4] * 1 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + -l[1] * 1 + C + l[2]))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (a[1] + -l[1] * 1 + C + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (C * 2 + -s[3] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(-C * 3 + s[3] + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-a[2] * 1 + l[2] + -C * 2 + s[4] <= RealNumRep::new(0, 1));
    if !((a[2] + -l[2] * 1 + C + -s[4] * 1 <= RealNumRep::new(0, 1))
        || (C * 2 + -s[4] * 1 + s[1] <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(a[3] + -s[4] * 1)]);
        ret = ret.intersection(&tmp);
    }
    assert!(-a[0] * 1 + -C * 2 + s[2] + l[0] <= RealNumRep::new(0, 1));
    assert!(-C * 3 + s[2] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-C * 2 + s[2] + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + -C * 3 + s[3] + l[0] <= RealNumRep::new(0, 1));
    assert!(-C * 4 + s[3] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-C * 5 + s[4] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + -C * 4 + s[4] + l[0] <= RealNumRep::new(0, 1));
    assert!(-C * 3 + s[4] + -s[2] * 1 <= RealNumRep::new(0, 1));
    assert!(-C * 4 + s[4] + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(B >= RealNumRep::new(5, 1));
    assert!(C >= RealNumRep::new(5, 1));
    assert!(l[0] >= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[4] + -s[4] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[3] + C + -s[4] * 1)]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[3] + -s[3] * 1)]);
    ret = ret.intersection(&tmp);
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + l[1] + s[1] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + l[1] + -C * 1 + s[2] <= RealNumRep::new(0, 1));
    assert!(-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + l[1] + -C * 3 + s[4] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + l[1] + -C * 2 + s[3] <= RealNumRep::new(0, 1));
    assert!(-C * 2 + s[4] + -s[3] * 1 <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_l_4_t_5_l_4(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 4);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])));
    assert!((l[2] == l[1]) || (-a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(-5, 1)));
    assert!((!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)) || (l[2] == l[1]));
    assert!(
        (l[2] == l[1])
            || (l[3] == l[2])
            || (RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
            || (-a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2 + l[3]
                == RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_lower(l[3]),
        Interval::interval_point(l[3]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_point(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3),
            Interval::interval_upper(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (l[2] == l[1])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_point(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[2] + -a[1] * 2 + l[3] + s[0] + l[1] * 2 + -l[2] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_point(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3),
            Interval::interval_upper(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + -a[2] * 2 + a[1] + l[3] + s[3] + -l[1] * 1 + l[2] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_point(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3),
            Interval::interval_upper(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[1] == l[0])
            || (l[3] == l[2])
            || (-a[3] * 1 + a[2] * 2 + -a[1] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    );
    assert!((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)));
    if !((l[2] == l[1]) || (l[3] == l[2])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(a[4] + -a[3] * 2 + a[2] + -l[2] * 1 + l[3] * 2),
            Interval::interval_upper(l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (RealNumRep::new(0, 1) <= -a[4] * 1 + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 1))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(l[3])]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + s[4] + -s[3] * 1 + -l[2] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + s[3] + -s[1] * 1 + -l[1] * 3 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-s[4] * 1 + s[2] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[4] * 1 + s[2] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (-a[3] * 1 + -a[2] * 1 + a[1] + l[3] + s[4] + -l[1] * 1 + l[2]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] + s[3] + -l[1] * 1 + l[2] * 2 <= RealNumRep::new(-5, 1))
    );
    if !(a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 1 + -s[3] * 1 + s[1] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -s[4] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!((l[3] == l[2]) || (-a[3] * 1 + a[2] + -l[2] * 1 + l[3] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[2] == l[1])
            || (!(l[1] == l[0]))
            || (a[3] + -a[2] * 2 + a[1] + l[2] * 2 + -l[3] * 1 + -l[0] * 1
                <= RealNumRep::new(0, 1))
    );
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[3] * 2 + a[2] + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(-5, 1)));
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 2 + a[2] + l[3] * 2 + -l[2] * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(-a[1] * 1 + l[1] + s[1] <= RealNumRep::new(0, 1));
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + a[1] + -a[0] * 1 + s[1] + -l[1] * 1 + l[2] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[3] + -a[2] * 1 + -s[4] * 1 + s[2] + l[2] + -l[3] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 2 + s[0] + l[1] * 2 + -l[2] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] * 1 / 2 + -a[1] * 1 / 2 + -s[2] * 1 + s[0] + l[1] * 1 / 2 + -l[3] * 1 / 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_point(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[2] + l[2]),
            Interval::interval_upper(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_point(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3),
            Interval::interval_upper(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3),
            Interval::interval_upper(
                RealNumRep::new(-5, 1)
                    + a[4]
                    + -a[3] * 1
                    + -a[2] * 1
                    + a[1]
                    + l[3]
                    + -l[1] * 1
                    + l[2],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + -a[0] * 2 + s[2] * 2 + -l[1] * 2 + l[3] * 2 + l[0] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 1 + s[2] + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + a[2] + -s[3] * 2 + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[2] + l[2]),
        Interval::interval_upper(
            a[4] + -a[2] * 1 + a[0] * 2 / 3 + -s[3] * 2 / 3 + l[2] + -l[0] * 2 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[2] + l[2]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 2 / 3 + s[1] * 2 / 3 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + -a[0] * 1 + s[2] + -l[1] * 2 + l[2] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (a[3] + -a[2] * 1 + -s[2] * 1 + s[0] + l[2] + -l[3] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[3] + -s[2] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1))
            || (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 1 + s[3] + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (a[3] * 1 / 2 + -a[1] * 3 / 2 + s[0] + l[1] * 3 / 2 + -l[3] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + -a[0] * 1 + s[3] + -l[1] * 3 + l[2] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[1] * 1 + a[0] + -s[3] * 1 + l[1] + -l[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (-a[2] * 3 + a[1] * 3 + -a[0] * 1 + s[3] + -l[1] * 3 + l[2] * 3 + l[0]
                <= RealNumRep::new(0, 1))
            || (!(-a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2 + l[3]
                == RealNumRep::new(0, 1)))
    );
    assert!((l[3] == l[2]) || (-a[3] * 1 + s[3] + l[3] <= RealNumRep::new(-5, 1)));
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-10, 1)));
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (s[4] + -s[3] * 3 + s[1] * 2 <= RealNumRep::new(0, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-a[0] * 1 + -s[3] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + l[3]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (a[2] * 2 + -a[1] * 2 + -s[3] * 1 + s[0] + l[1] * 2 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    if !((l[2] == l[1]) || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[2] * 1 + -s[4] * 2 + s[2] * 2 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-s[4] * 3 + s[2] * 4 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[3] * 1 + s[1] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (a[2] * 3 + -a[1] * 3 + -s[4] * 1 + s[0] + l[1] * 3 + -l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[2] + -s[1] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[1] + l[1]),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + s[2] + -s[0] * 1 + -l[1] * 3 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[1] + -s[0] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (a[2] * 2 + -a[1] * 2 + -s[4] * 1 + s[1] + l[1] * 2 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (a[2] + -a[1] * 1 + -s[4] * 1 + s[2] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (RealNumRep::new(0, 1)
                <= -a[3] * 1 + a[2] * 2 + -a[1] * 1 + -l[2] * 2 + l[1] + l[3])
    );
    assert!(
        (l[1] == l[0])
            || (a[3] * 3 / 2 + -a[1] * 3 / 2 + -s[4] * 1 + s[0] + l[1] * 3 / 2 + -l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[1] * 1 + -s[4] * 1 + s[0] + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (RealNumRep::new(0, 1) <= -a[4] * 2 + a[3] * 3 + -a[1] * 1 + l[1] + -l[3] * 1))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[4] + -a[3] * 2 + a[2] + -l[1] * 1 + l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(
                a[4] + -a[3] * 3 / 2 + a[1] * 1 / 2 + -l[1] * 1 / 2 + l[3] * 3 / 2,
            ),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[2] + -s[4] * 1 + -l[1] * 1 + l[3]),
            Interval::interval_upper(l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[1] * 1 + -s[4] * 3 / 2 + s[1] * 3 / 2 + l[1]),
            Interval::interval_upper(a[4] + -a[2] * 3 + -a[1] * 1 + s[1] * 3 + l[1] + l[2] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[4] + -a[2] * 1 + -a[1] * 2 + l[2] + s[0] * 2 + l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
        || (a[2] * 2 + -l[2] * 2 + -s[4] * 1 + -s[1] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[2] * 3 + -a[1] * 1 + s[1] * 3 + l[1] + l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + s[4] + -s[2] * 1 + -l[1] * 3 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[3] * 3 / 2 + s[2] * 3 / 2 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (-a[2] * 4 + a[1] * 4 + -a[0] * 1 + s[4] + -l[1] * 4 + l[2] * 4 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-a[0] * 1 + -s[4] * 2 + s[2] * 3 + l[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] + -a[1] * 1 + -s[4] * 1 + s[1] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[0] + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + s[3] + -s[2] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (s[4] + -s[2] * 4 + s[0] * 3 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[4] + -s[3] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-a[3] * 1 + -a[1] * 1 + l[3] + s[4] + s[0] + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[2] * 3 + s[4] + -s[2] * 1 + -l[2] * 3 + l[3] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 4 + a[2] * 4 + s[4] + -s[1] * 1 + -l[2] * 4 + l[3] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[2] * 3 + -a[1] * 1 + l[1] + s[4] + -l[2] * 3 + l[3] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + -a[1] * 1 + l[1] + s[3] + -l[2] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] + -a[1] * 1 + -s[4] * 1 + s[1] + l[1] + -l[3] * 1 <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + a[2] + -s[3] * 1 + -l[1] * 1 + l[3]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (-a[2] * 4 + a[1] * 4 + s[3] + -s[0] * 1 + -l[1] * 4 + l[2] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-s[4] * 2 + s[2] * 3 + -s[1] * 1 <= RealNumRep::new(0, 1))
    );
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[1] + l[1]),
            Interval::interval_upper(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-a[1] * 1 + -s[4] * 1 + s[2] * 2 + l[1] <= RealNumRep::new(-5, 1))
    );
    if !((!(l[1] == l[0])) || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[1] * 1 + -s[4] * 3 / 2 + s[3] * 3 / 2 + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + l[3] + s[4] + -s[3] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    assert!(
        (l[1] == l[0])
            || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (a[3] * 1 / 2 + -a[1] * 1 / 2 + -s[4] * 1 + s[2] + l[1] * 1 / 2 + -l[3] * 1 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + -a[2] * 2 + a[1] + l[3] + s[2] + -l[1] * 1 + l[2] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 2 + s[4] + -l[1] * 2 + l[2] * 3 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (a[1] + -s[3] * 1 + -l[1] * 1 <= RealNumRep::new(-5, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-5, 1))
    );
    if !((l[3] == l[2]) || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 3 / 2 + a[1] * 1 / 2 + l[3] * 3 / 2 + -l[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + s[3] + -s[2] * 1 + -l[2] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[1] * 1 / 2
                + l[3]
                + s[0] * 1 / 2
                + l[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (a[3] + -a[1] * 1 + -s[3] * 1 + s[0] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))
    );
    if !((l[3] == l[2]) || (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + -s[2] * 1 + s[0] + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[1] * 1 + -s[3] * 3 / 4 + s[0] * 3 / 4 + l[1]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
        || (a[4] + -a[1] * 1 + -s[4] * 3 + s[2] * 3 + l[1] + -l[3] * 1 <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(l[3])]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (a[3] + -a[2] * 1 + -s[3] * 1 + s[1] + l[2] + -l[3] * 1 <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2]) || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + -s[3] * 1 + l[3] + s[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + a[0] + -s[1] * 1 + l[3] + -l[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (a[3] + -a[2] * 2 + s[1] + l[2] * 2 + -l[3] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + -a[0] * 1 + s[1] * 2 + l[2] + l[0] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (s[4] + -s[3] * 2 + s[0] <= RealNumRep::new(0, 1))
            || (a[1] * 2 + -l[1] * 2 + s[4] + -s[3] * 3 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[3] * 2 + -a[2] * 3 + s[0] + l[2] * 3 + -l[3] * 2 <= RealNumRep::new(-5, 1))
            || (a[3] + -a[2] * 2 + a[1] + -l[3] * 1 + -l[1] * 1 + l[2] * 2
                <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + a[1] + -s[3] * 1 + -l[1] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (a[3] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1] + -l[3] * 1
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -s[3] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (a[3] * 2 + -a[2] * 2 + -s[4] * 1 + s[1] + l[2] * 2 + -l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[4] + -a[3] * 2 + a[2] + -l[1] * 1 + l[3] * 2,
            ),
            Interval::interval_lower(
                a[4] + -a[3] * 3 / 2 + a[1] * 1 / 2 + l[3] * 3 / 2 + -l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]),
            Interval::interval_upper(l[3]),
            Interval::interval_lower(
                a[4] + -a[3] * 3 / 2 + a[1] * 1 / 2 + l[3] * 3 / 2 + -l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[1] + -a[0] * 2 + s[1] * 2 + -l[1] * 1 + l[3] + l[0] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 3 / 2 + a[1] * 1 / 2 + l[3] * 3 / 2 + -l[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 3 / 2 + a[1] * 1 / 2 + l[3] * 3 / 2 + -l[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                a[4] + -a[3] * 3 / 2 + a[1] * 1 / 2 + -l[1] * 1 / 2 + l[3] * 3 / 2,
            ),
            Interval::interval_upper(l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[2] * 2 + -s[1] * 2 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + a[2] + -s[4] * 1 + -l[1] * 1 + l[3]),
            Interval::interval_lower(
                a[4] + -a[3] * 3 / 2 + a[1] * 1 / 2 + l[3] * 3 / 2 + -l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[2] * 1 + -s[4] * 1 + s[1] + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[2] + l[2]),
        Interval::interval_upper(
            a[4] + -a[2] * 1 + a[0] * 1 / 2 + -s[4] * 1 / 2 + l[2] + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[3] * 1 + l[2] * 3 + -l[1] * 1,
        ),
        Interval::interval_upper(
            a[4] + -a[2] * 1 + a[1] * 2 / 3 + -l[1] * 2 / 3 + -s[4] * 2 / 3 + l[2],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[2] * 1 + a[0] * 1 / 2 + -s[4] * 1 / 2 + l[2] + -l[0] * 1 / 2,
        ),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[3] * 1 + l[2] * 3 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[2] * 1 + a[0] * 1 / 2 + -s[4] * 1 / 2 + l[2] + -l[0] * 1 / 2,
        ),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 2
                + a[0] * 1 / 2
                + l[3]
                + l[2] * 1 / 2
                + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(
            a[4] + -a[2] * 1 + a[0] * 1 / 2 + -s[4] * 1 / 2 + l[2] + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[3] * 1 + l[2] * 3 + -l[1] * 1,
        ),
        Interval::interval_upper(a[4] + -a[2] * 1 + a[1] * 2 + -l[1] * 2 + -s[2] * 2 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[3] * 1 + l[2] * 3 + -l[1] * 1,
        ),
        Interval::interval_upper(a[4] + -a[2] * 1 + a[0] + -s[2] * 1 + l[2] + -l[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (-a[2] * 4 + a[1] * 4 + s[4] + -s[1] * 1 + -l[1] * 4 + l[2] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + s[1] + -s[0] * 1 + -l[2] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                RealNumRep::new(-15, 2) + a[4] + a[1] * 1 / 2 + -s[3] * 3 / 2 + -l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + a[2] + -l[2] * 1 + -s[3] * 2),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (a[2] * 2 + -s[4] * 2 + -l[2] * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2]))
    );
    assert!(
        (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-s[4] * 1 + s[1] * 2 + -s[0] * 1 <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2])
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(a[4] + -a[2] * 1 + a[0] * 2 + -s[1] * 2 + l[2] + -l[0] * 2),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (-a[2] * 5 + a[1] * 5 + s[4] + -s[0] * 1 + -l[1] * 5 + l[2] * 5
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[3] * 1 / 2 + s[1] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] + -a[1] * 1 + -s[3] * 2 + s[1] * 2 + l[1] + -l[3] * 1
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    assert!(
        (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[2] * 1 + l[2] + s[3] + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-a[2] * 1 + -a[1] * 1 + l[2] + s[3] + s[0] + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-a[0] * 1 + -s[4] * 1 / 2 + s[1] * 3 / 2 + l[0] <= RealNumRep::new(0, 1))
            || (a[2] + -a[0] * 1 + -s[4] * 1 + -l[2] * 1 + s[1] + l[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[3] * 3 + -a[2] * 3 + -s[4] * 1 + s[0] + l[2] * 3 + -l[3] * 3
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1)
                <= a[3] * 2 + -a[2] * 2 + -a[1] * 2 + s[0] * 2 + l[1] * 2 + l[2] * 2 + -l[3] * 2)
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + a[0] * 1 / 3 + -s[3] * 1 / 3 + l[3] + -l[0] * 1 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -a[3] * 2 + a[2] + a[1] + -l[2] * 1 + -s[2] * 1 + -l[1] * 1 + l[3] * 2,
            ),
            Interval::interval_lower(
                a[4] + -a[3] * 3 / 2 + a[1] * 1 / 2 + l[3] * 3 / 2 + -l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(
            a[4] + -a[1] * 1 + a[0] * 3 / 2 + -s[2] * 3 / 2 + l[1] + -l[0] * 3 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[1] == l[0]) || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[1] * 1 + -s[3] * 3 + s[1] * 3 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1])
    );
    assert!(
        (l[2] == l[1])
            || (a[3] * 2 + -a[2] * 2 + a[1] + -l[1] * 1 + -s[4] * 1 + l[2] * 2 + -l[3] * 2
                <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1)
                <= a[3] + -a[2] * 1 + -a[1] * 1 + s[0] + l[1] + l[2] + -l[3] * 1))
    );
    assert!(
        (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-a[1] * 1 / 2 + -s[4] * 1 / 2 + l[1] * 1 / 2 + s[2] <= RealNumRep::new(0, 1))
    );
    if !(!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[1] * 1 / 2 + -l[1] * 1 / 2 + -s[3] * 1 / 2 + l[2],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[1] * 1 / 3 + -l[1] * 1 / 3 + -s[4] * 1 / 3 + l[2],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[1] + -l[3] * 1 + -s[2] * 1 + -l[1] * 1 + l[2] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[2] * 1 / 2 + l[2] * 1 / 2 + s[4] * 1 / 2 + -s[2] * 1 + s[0]
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                a[4] + -a[3] * 2 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + -s[2] * 1 + s[0] * 2 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] * 2 + a[1] + -s[4] * 1 + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2])
        || (-a[3] * 2
            + a[2] * 2
            + a[1] * 2
            + -l[2] * 2
            + -s[2] * 1
            + -s[0] * 1
            + -l[1] * 2
            + l[3] * 2
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 3 / 2 + a[1] * 1 / 2 + l[3] * 3 / 2 + -l[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[2] * 3 + -a[0] * 1 + s[3] + -l[2] * 3 + l[3] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(15, 1) + a[4] + -a[1] * 4 + s[0] * 3 + l[1] * 4,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
        || (!(a[2] * 2 + -l[2] * 2 + -s[4] * 1 + -s[1] * 1 <= RealNumRep::new(0, 1))))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + a[2] + -a[1] * 1 + -l[2] * 1 + -s[4] * 2 + s[1] + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[2] * 1 + a[0] * 2 + -s[1] * 2 + l[2] + -l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[3] * 1 + l[2] * 3 + -l[1] * 1,
        ),
        Interval::interval_upper(a[4] + -a[2] * 1 + a[0] * 2 + -s[1] * 2 + l[2] + -l[0] * 2),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-a[3] * 1 + l[3] + s[4] + -s[3] * 1 + s[1] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
    );
    assert!((l[3] == l[2]) || (-a[3] * 1 + s[2] + l[3] <= RealNumRep::new(-10, 1)));
    assert!((l[2] == l[1]) || (-a[2] * 3 + s[4] + s[1] * 2 + l[2] * 3 <= RealNumRep::new(-15, 1)));
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] + s[4] + -l[2] * 1 + l[3] * 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 4 + a[2] * 4 + -a[0] * 1 + s[4] + -l[2] * 4 + l[3] * 4 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + -a[0] * 1 + s[1] + -l[2] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
    );
    if !((l[3] == l[2])
        || (-a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3] * 2
            <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 3 / 2 + a[1] * 1 / 2 + l[3] * 3 / 2 + -l[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[2] * 2 + a[1] + -s[4] * 1 + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 3 / 2 + a[1] * 1 / 2 + l[3] * 3 / 2 + -l[1] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[3] == l[2]) || (-a[3] * 1 + a[1] + -l[1] * 1 + l[3] <= RealNumRep::new(-10, 1)));
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + -a[0] * 1 + -l[2] * 1 + s[1] + l[3] + l[0]
                <= RealNumRep::new(-5, 1))
            || (-a[3] * 1 + -a[0] * 2 + s[1] * 3 + l[3] + l[0] * 2 <= RealNumRep::new(-5, 1))
    );
    if !((l[2] == l[1])
        || (a[4] * 3 / 2 + -a[2] * 3 / 2 + -s[4] * 1 + s[0] + l[2] * 3 / 2 + -l[3] * 3 / 2
            <= RealNumRep::new(0, 1))
        || (a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3 + -l[3] * 1
            <= RealNumRep::new(-10, 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(l[3])]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] * 2 + a[1] + -s[4] * 1 + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] * 2 + a[1] + -s[4] * 1 + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (!(-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-5, 1)))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(-10, 1))
            || (-a[2] * 1 + s[0] + l[2] <= RealNumRep::new(-15, 1))
    );
    assert!(
        (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (-s[4] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (a[2] + -l[2] * 1 + -s[4] * 1 <= RealNumRep::new(-5, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[1] + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + a[0] * 1 / 4 + -s[4] * 1 / 4 + l[3] + -l[0] * 1 / 4,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -s[4] * 1 / 5 + s[0] * 1 / 5 + l[3]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + a[2] + -s[4] * 1 + -l[1] * 1 + l[3]),
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[4] * 1 / 2 + s[1] * 1 / 2 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + a[2] + -s[4] * 1 + -l[1] * 1 + l[3]),
            Interval::interval_lower(a[4] + -a[3] * 1 + -s[4] * 1 / 3 + s[0] * 1 / 3 + l[3]),
            Interval::interval_lower(
                a[4] + -a[3] * 1 + a[1] * 1 / 2 + -l[1] * 1 / 2 + -s[4] * 1 / 2 + l[3],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + a[1] * 1 / 3 + -l[1] * 1 / 3 + -s[4] * 1 / 3 + l[3],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -s[4] * 1 / 3 + s[2] * 1 / 3 + l[3]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -s[1] * 1 / 2 + s[0] * 1 / 2 + l[3]),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[1] == l[0]) || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[1] * 1 + -s[4] * 3 + s[2] * 3 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[1] + l[1]),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[2] * 3 / 2 + s[1] * 3 / 2 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    assert!((l[1] == l[0]) || (-a[1] * 4 + s[4] + s[0] * 3 + l[1] * 4 <= RealNumRep::new(-20, 1)));
    assert!(
        (l[1] == l[0])
            || (-a[2] * 1 / 2 + -a[1] * 1 + l[2] * 1 / 2 + s[4] * 1 / 2 + s[0] + l[1]
                <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + a[2] + -a[1] * 1 + -l[2] * 1 + -s[3] * 2 + s[2] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + l[3] + s[4] + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (a[1] * 1 / 2 + -s[4] * 1 / 2 + -l[1] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (-s[4] * 1 / 3 + s[0] * 1 / 3 <= RealNumRep::new(-5, 1))
            || (a[2] + -l[2] * 1 + -s[4] * 1 <= RealNumRep::new(-5, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[1] * 1 + -s[2] * 3 + s[0] * 3 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[2] * 3 + s[2] + -s[0] * 1 + -l[2] * 3 + l[3] * 3
                <= RealNumRep::new(0, 1))
    );
    if !(a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -a[1] * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -a[3] * 1 + l[3]),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -s[2] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!((l[3] == l[2]) || (-a[3] * 2 + s[4] + s[2] + l[3] * 2 <= RealNumRep::new(-10, 1)));
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[4] + -a[3] * 2 + s[2] + l[3] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[1] + l[2] <= RealNumRep::new(-10, 1)));
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[2] * 1 + -s[3] * 2 + s[1] * 2 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + -a[0] * 1 + s[2] + -l[2] * 2 + l[3] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + s[2] + -s[1] * 1 + -l[2] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[2] * 1 + -s[3] * 1 + s[0] + l[2]),
            Interval::interval_lower(a[4] + -a[2] * 1 + a[1] * 2 + -l[1] * 2 + -s[3] * 2 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] + -l[1] * 1 + s[3] + l[2] * 2 <= RealNumRep::new(-10, 1))
            || (-a[2] * 1 + s[3] * 2 / 3 + s[0] * 1 / 3 + l[2] <= RealNumRep::new(-5, 1))
    );
    if !((l[2] == l[1])
        || (a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3 + -l[3] * 1
            <= RealNumRep::new(-10, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[3]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[4] + -a[2] * 2 + s[0] + l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (a[3] * 2 + -a[2] * 2 + -s[3] * 1 + s[0] + l[2] * 2 + -l[3] * 2
                <= RealNumRep::new(0, 1))
            || (a[3] + -a[2] * 1 + a[1] + -l[3] * 1 + -s[3] * 1 + -l[1] * 1 + l[2]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] * 2 + -a[1] * 2 + -s[3] * 2 + s[0] * 2 + l[1] * 2 + -l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[1] * 3 + -a[0] * 2 + s[3] * 2 + -l[1] * 3 + l[3] * 3 + l[0] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(
            a[4] + -a[2] * 1 + a[0] * 2 / 3 + -s[3] * 2 / 3 + l[2] + -l[0] * 2 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + -a[1] * 1 + l[3] + s[2] + l[1] + -l[2] * 1
                <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[2] * 1 + -s[4] * 2 / 3 + s[0] * 2 / 3 + l[2]),
            Interval::interval_lower(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + l[3] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[2] * 1 + -s[4] * 2 / 3 + s[0] * 2 / 3 + l[2]),
            Interval::interval_lower(a[4] + -a[2] * 1 + a[1] + -s[4] * 1 + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1))) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[2] * 1 + -s[2] * 2 + s[0] * 2 + l[2],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                a[4] + -a[2] * 1 + a[0] * 1 / 2 + -s[4] * 1 / 2 + l[2] + -l[0] * 1 / 2,
            ),
            Interval::interval_upper(
                a[4] + -a[3] * 1
                    + -a[2] * 1
                    + a[0] * 1 / 2
                    + l[3]
                    + s[3] * 1 / 2
                    + l[1]
                    + -l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 1 / 2 + s[1] * 1 / 2 + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[3] * 1 / 2 + s[1] * 1 / 2 + l[2],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[2] * 1 + a[0] * 1 / 2 + -s[4] * 1 / 2 + l[2] + -l[0] * 1 / 2,
        ),
        Interval::interval_upper(
            a[4] + -a[3] * 1
                + -a[2] * 1
                + a[0] * 1 / 2
                + l[3]
                + s[3] * 1 / 2
                + l[2]
                + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[1] + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 1 / 2 + s[1] * 1 / 2 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 1 / 2 + s[1] * 1 / 2 + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 2
                + l[3]
                + s[1] * 1 / 2
                + l[2] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[1] == l[0])
            || (l[3] == l[2])
            || (-a[3] * 1 / 2 + -a[1] * 1 / 2 + s[2] + l[1] * 1 / 2 + l[3] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 5 + a[2] * 5 + s[4] + -s[0] * 1 + -l[2] * 5 + l[3] * 5
                <= RealNumRep::new(0, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[4] + -a[2] * 3 + s[1] * 2 + l[2] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 4 + a[1] * 4 + -a[0] * 2 + s[4] * 2 + -l[1] * 4 + l[3] * 4 + l[0] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(
            a[4] + -a[1] * 1 + a[0] * 3 / 4 + -s[4] * 3 / 4 + l[1] + -l[0] * 3 / 4,
        ),
        Interval::interval_upper(
            a[4] + -a[2] * 3 / 2 + -a[1] * 1 + a[0] * 3 / 2 + l[2] * 3 / 2 + l[1] + -l[0] * 3 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(
            a[4] + -a[2] * 1 / 2
                + -a[1] * 1
                + a[0]
                + l[2] * 1 / 2
                + -s[4] * 1 / 2
                + l[1]
                + -l[0] * 1,
        ),
        Interval::interval_lower(
            a[4] + -a[2] * 3 / 2 + -a[1] * 1 + a[0] * 3 / 2 + l[2] * 3 / 2 + l[1] + -l[0] * 3 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[3] * 1 + -s[4] * 1 / 2 + s[3] * 1 / 2 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-a[3] * 1 + l[3] + s[4] + -s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[1] + l[3] + s[4] + -s[3] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + a[2] * 1 / 2 + -l[2] * 1 / 2 + -s[4] * 1 / 2 + l[3],
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + a[3] + -a[1] * 1 + -l[3] * 1 + -s[4] * 2 + s[3] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1)
        <= -a[3] * 1 / 2 + -a[1] * 1 / 2 + s[2] + l[1] * 1 / 2 + l[3] * 1 / 2)
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                RealNumRep::new(-5, 1) + a[4] + a[1] * 2 + -l[1] * 2 + -s[2] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1)
        <= -a[3] * 1 / 2 + -a[1] * 1 / 2 + s[2] + l[1] * 1 / 2 + l[3] * 1 / 2))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                RealNumRep::new(-5, 1)
                    + a[4]
                    + -a[3] * 3 / 2
                    + a[1] * 1 / 2
                    + l[3] * 3 / 2
                    + -l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1)
        <= -a[3] * 1 / 2 + -a[1] * 1 / 2 + s[2] + l[1] * 1 / 2 + l[3] * 1 / 2))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + a[1] + l[3] + -s[2] * 1 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[1] * 1 + -s[4] * 3 / 2 + s[3] * 3 / 2 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[1] + l[1]),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[4] * 3 / 4 + s[1] * 3 / 4 + l[1]),
        Interval::interval_upper(
            a[4] + -a[2] * 1 / 2 + -a[1] * 1 + l[2] * 1 / 2 + -s[4] * 1 / 2 + s[1] + l[1],
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[4] * 1 / 2 + s[0] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
            || (-a[2] * 3 + a[1] * 2 + -l[1] * 2 + s[4] + l[2] * 3 <= RealNumRep::new(-15, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[3] * 1 + -a[2] * 1 + a[1] + l[3] + s[4] + -l[1] * 1 + l[2]
                <= RealNumRep::new(-5, 1))
            || (-a[3] * 2 + -a[2] * 1 + l[3] * 2 + s[4] * 2 + s[0] + l[2]
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[4] + -s[2] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1
                + a[2] * 1 / 2
                + a[1]
                + -l[2] * 1 / 2
                + s[4] * 1 / 2
                + -s[2] * 1
                + -l[1] * 1
                + l[3]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[1] * 3 + s[3] * 2 + -s[1] * 2 + -l[1] * 3 + l[3] * 3
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2
                + a[2] * 2
                + a[1] * 2
                + -l[2] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[2] * 3 + s[3] + -s[1] * 1 + -l[2] * 3 + l[3] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 4 + a[1] * 4 + s[4] * 2 + -s[1] * 2 + -l[1] * 4 + l[3] * 4
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 5 / 2 + a[1] * 5 / 2 + s[4] + -s[0] * 1 + -l[1] * 5 / 2 + l[3] * 5 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 5 / 2 + a[1] * 5 / 2 + s[4] + -s[0] * 1 + -l[1] * 5 / 2 + l[3] * 5 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 5 / 2 + a[1] * 5 / 2 + s[4] + -s[0] * 1 + -l[1] * 5 / 2 + l[3] * 5 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2
                + a[2] * 2
                + a[1] * 2
                + -l[2] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[1] * 3 / 2 + s[0] * 3 / 2 + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[1] * 1 / 2
                + l[3]
                + s[0] * 1 / 2
                + l[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 4 + a[2] * 4 + s[3] + -s[0] * 1 + -l[2] * 4 + l[3] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -l[2] * 1 + -s[1] * 1 + -l[1] * 1 + l[3]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3] * 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[2] * 1 + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(a[4] + -a[2] * 1 + a[0] + -s[2] * 1 + l[2] + -l[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + a[0] + -s[2] * 1 + l[2] + -l[0] * 1),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 2
                + a[0] * 1 / 2
                + l[3]
                + l[2] * 1 / 2
                + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[1] == l[0]) || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[1] * 1 + -s[3] * 3 / 2 + s[0] * 3 / 2 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + a[0] * 2 + -s[1] * 2 + l[2] + -l[0] * 2),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 2
                + a[0] * 1 / 2
                + l[3]
                + l[2] * 1 / 2
                + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 2 / 3 + s[1] * 2 / 3 + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[3] * 1 / 2 + s[1] * 1 / 2 + l[2],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 2 / 3 + s[1] * 2 / 3 + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[3] * 1 + l[2] * 3 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 1 + s[1] + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[3] * 1 + l[2] * 3 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -a[1] * 1 + l[1]),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -a[3] * 1 + l[3]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -a[1] * 1 + l[1]),
        Interval::interval_upper(
            RealNumRep::new(-10, 1) + a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[3] + l[1],
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[1] == l[0]) || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + -s[3] * 1 + s[1] * 2 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -a[3] * 1 + l[3]),
        Interval::interval_upper(RealNumRep::new(-20, 1) + a[4] + -s[1] * 1),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -a[2] * 1 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -s[1] * 5 / 2 + s[0] * 3 / 2),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + l[3] + -s[1] * 1 / 2 + s[0] * 1 / 2,
        ),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -a[2] * 3 + l[2] * 3 + s[1] * 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[1] * 1 + -s[1] * 3 / 2 + s[0] * 3 / 2 + l[1]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 2 / 3 + s[1] * 2 / 3 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                a[4] + -a[2] * 1 + a[0] * 2 / 3 + -s[3] * 2 / 3 + l[2] + -l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1
                + -a[2] * 1
                + a[0] * 1 / 2
                + l[3]
                + s[3] * 1 / 2
                + l[2]
                + -l[0] * 1 / 2,
        ),
        Interval::interval_upper(a[4] + -a[2] * 1 + a[0] + -s[2] * 1 + l[2] + -l[0] * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (-a[3] * 5 / 2 + a[1] * 5 / 2 + s[4] + -s[0] * 1 + -l[1] * 5 / 2 + l[3] * 5 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[2] * 2 + a[1] + -l[2] * 2 + -s[0] * 1 + -l[1] * 1 + l[3] * 2
                <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[3] * 1 + l[2] * 3 + -l[1] * 1,
        ),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[1] * 1 + s[0] + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + l[3] + -s[2] * 1 / 2 + s[1] * 1 / 2,
        ),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -s[2] * 2 + s[1]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (-a[3] * 5 / 2 + a[1] * 5 / 2 + s[4] + -s[0] * 1 + -l[1] * 5 / 2 + l[3] * 5 / 2
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
            || (-a[3] * 2
                + a[2] * 2
                + a[1] * 2
                + -l[2] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    if !(l[1] == l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                RealNumRep::new(-15, 1) + a[4] + a[1] * 2 + -s[2] * 3 + -l[1] * 2,
            ),
            Interval::interval_upper(
                RealNumRep::new(-10, 1) + a[4] + -a[3] * 1 + a[1] + l[3] + -s[2] * 1 + -l[1] * 1,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[2] * 1 + a[0] + -s[2] * 1 + l[2] + -l[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 1 + s[1] + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[3] * 1 / 2 + s[1] * 1 / 2 + l[2],
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[2] * 1 / 2 + s[0] * 1 / 2 + l[2],
            ),
            Interval::interval_lower(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + l[3] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 1 + s[1] + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-10, 3)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 3
                + l[3]
                + s[0] * 1 / 3
                + l[2] * 1 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[2] * 1 + -s[1] * 1 + s[0] + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1],
            ),
            Interval::interval_upper(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[4] * 3 / 5 + s[0] * 3 / 5 + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1],
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[1] * 1 + -s[1] * 3 / 2 + s[0] * 3 / 2 + l[1]),
            Interval::interval_upper(a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[1] * 1 + -s[3] * 3 / 4 + s[0] * 3 / 4 + l[1]),
            Interval::interval_upper(a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[1] + l[1]),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -a[1] * 1 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -a[1] * 1 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[3] * 3 / 4 + s[0] * 3 / 4 + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[3] * 3 / 4 + s[0] * 3 / 4 + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[1] * 1 / 2
                + l[3]
                + s[0] * 1 / 2
                + l[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[1] + l[1]),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[4] * 3 / 5 + s[0] * 3 / 5 + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -s[4] * 1 / 2 + s[3] * 1 / 2 + l[3]),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[3] == l[2]) || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 1 + l[3] + -s[3] * 1 / 2 + s[0] * 1 / 2),
            Interval::interval_lower(a[4] + -a[3] * 1 + a[1] + l[3] + -s[3] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(a[4] + -a[1] * 1 + a[0] * 3 + -s[1] * 3 + l[1] + -l[0] * 3),
        Interval::interval_upper(
            a[4] + -a[2] * 1 + -a[1] * 1 + a[0] * 2 + l[2] + -s[1] * 1 + l[1] + -l[0] * 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[1] * 3 / 2 + s[0] * 3 / 2 + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[2] + l[2]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-10, 3)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 3
                + l[3]
                + s[0] * 1 / 3
                + l[2] * 1 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[2] * 1 + a[0] * 2 / 3 + -s[3] * 2 / 3 + l[2] + -l[0] * 2 / 3,
        ),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 2
                + a[0] * 1 / 2
                + l[3]
                + l[2] * 1 / 2
                + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[2] * 1 + a[0] * 2 / 3 + -s[3] * 2 / 3 + l[2] + -l[0] * 2 / 3,
        ),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[3] * 1 + l[2] * 3 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[4] + -a[3] * 2 + -a[2] * 1 + l[3] * 2 + s[4] + s[0] + l[2]),
            Interval::interval_lower(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + l[3] + l[2] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1],
            ),
            Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -a[1] * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 1 / 2 + s[4] + -l[1] * 1 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(-5, 1))
            || (-a[3] * 1 + a[2] * 1 / 2 + -l[2] * 1 / 2 + s[4] * 1 / 2 + l[3]
                <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[1] + l[1]),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[3] * 3 / 4 + s[0] * 3 / 4 + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[2] + l[2]),
        Interval::interval_upper(a[4] + -a[2] * 1 + a[0] * 2 + -s[1] * 2 + l[2] + -l[0] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -s[3] * 3 / 2 + s[2] * 1 / 2),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3),
            Interval::interval_upper(
                RealNumRep::new(-5, 2)
                    + a[4]
                    + -a[3] * 1
                    + -a[1] * 1 / 2
                    + l[3]
                    + s[0] * 1 / 2
                    + l[1] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1],
            ),
            Interval::interval_upper(a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + -s[4] * 1 + s[2] + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[4] + -a[2] * 2 + s[0] + l[2] * 2),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + -a[2] * 3 + a[1] * 2 + -l[1] * 2 + l[2] * 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[1] * 1 + -s[4] * 3 / 5 + s[0] * 3 / 5 + l[1]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[4] * 3 / 5 + s[0] * 3 / 5 + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[1] * 1 / 2
                + l[3]
                + s[0] * 1 / 2
                + l[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[4] * 3 / 5 + s[0] * 3 / 5 + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + l[3] + -s[2] * 1 / 3 + s[0] * 1 / 3,
        ),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -s[2] * 5 / 3 + s[0] * 2 / 3),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -s[3] * 5 / 4 + s[0] * 1 / 4),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[3] * 2 / 3 + s[0] * 1 / 3 + l[2],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 2
                + l[3]
                + s[1] * 1 / 2
                + l[2] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 2
                + l[3]
                + s[1] * 1 / 2
                + l[2] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[3] * 1 + l[2] * 3 + -l[1] * 1,
        ),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[1] * 1 + s[0] + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-10, 3)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 3
                + l[3]
                + s[0] * 1 / 3
                + l[2] * 1 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + s[2] * 4 / 3 + -s[0] * 1 / 3 + l[3] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + -a[1] * 1 + l[1] + s[2] * 2 + l[3] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1
                + -a[2] * 1
                + a[0] * 1 / 2
                + l[3]
                + s[3] * 1 / 2
                + l[2]
                + -l[0] * 1 / 2,
        ),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[2] * 1 + a[0] * 2 / 3 + -s[3] * 2 / 3 + l[2] + -l[0] * 2 / 3,
        ),
        Interval::interval_upper(
            a[4] + -a[3] * 1
                + -a[2] * 1
                + a[0] * 1 / 2
                + l[3]
                + s[3] * 1 / 2
                + l[2]
                + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -a[1] * 1 + l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[1] * 1 / 2
                + l[3]
                + s[0] * 1 / 2
                + l[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1])
            || (-a[3] * 1 + -a[2] * 1 + l[3] + s[4] + s[1] + l[2] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-10, 3)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 3
                + l[3]
                + s[0] * 1 / 3
                + l[2] * 1 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + -l[2] * 1 + l[3] <= RealNumRep::new(-10, 1))
            || (-a[3] * 1 + s[1] + l[3] <= RealNumRep::new(-15, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[1] * 3 / 2 + s[0] * 3 / 2 + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[1] * 1 + -s[3] * 3 / 4 + s[0] * 3 / 4 + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -a[1] * 1 + l[2] + s[0] + l[1]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1],
        ),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -a[1] * 1 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -a[1] * 1 + l[1]),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[2] + l[1],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[2] + l[2]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 2 / 3 + s[2] * 2 / 3 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[2] + l[2]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 1 / 2 + s[1] * 1 / 2 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 2
                + a[0] * 1 / 2
                + l[3]
                + l[2] * 1 / 2
                + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[3] * 1 / 2 + s[1] * 1 / 2 + l[2],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 2
                + l[3]
                + s[1] * 1 / 2
                + l[2] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 1 / 2 + s[1] * 1 / 2 + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[3] * 1 + l[2] * 3 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[3] * 1 + l[2] * 3 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[3] * 2 / 3 + s[0] * 1 / 3 + l[2],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1
                + -a[2] * 1
                + a[0] * 1 / 2
                + l[3]
                + s[3] * 1 / 2
                + l[2]
                + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[2] == l[1])
        || (a[4] + -a[3] * 2 / 3 + -a[2] * 1 + -l[3] * 1 / 3 + s[0] * 2 / 3 + l[2]
            <= RealNumRep::new(0, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[3]),
            Interval::interval_lower(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + l[3] + l[2] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 1 + s[1] + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 2
                + l[3]
                + s[1] * 1 / 2
                + l[2] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[1] + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 1 + s[1] + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -s[4] * 1 / 4 + s[1] * 1 / 4 + l[3]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + s[2] * 3 / 2 + -s[1] * 1 / 2 + l[3] <= RealNumRep::new(-5, 1))
    );
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[2] + -a[1] * 2 + l[3] + s[0] + l[1] * 2 + -l[2] * 1,
            ),
            Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[2] + -a[1] * 2 + l[3] + s[0] + l[1] * 2 + -l[2] * 1,
            ),
            Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1
                + -a[2] * 1
                + a[0] * 1 / 2
                + l[3]
                + s[3] * 1 / 2
                + l[2]
                + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[2] * 1 + -s[1] * 1 + s[0] + l[2]),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + l[3] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1
                + -a[2] * 1
                + a[0] * 1 / 2
                + l[3]
                + s[3] * 1 / 2
                + l[2]
                + -l[0] * 1 / 2,
        ),
        Interval::interval_upper(a[4] + -a[2] * 1 + a[0] * 2 + -s[1] * 2 + l[2] + -l[0] * 2),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + a[0] + l[3] + l[1] + -l[0] * 1),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[1] * 1 + s[0] + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(a[1] + -l[1] * 1 + -s[2] * 1 <= RealNumRep::new(0, 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[2]),
            Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + l[3] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[0] * 1 / 2 + -s[2] * 1 / 2 + l[2] + -l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -s[3] * 1 / 2 + s[2] * 1 / 2 + l[3]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + a[0] + l[3] + -s[1] * 1 + -l[0] * 1,
        ),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + a[0] * 3 + -s[1] * 4 + -l[0] * 3),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + -a[2] * 1 + a[0] * 2 + l[2] + -s[1] * 2 + -l[0] * 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + a[0] * 1 / 2 + -s[2] * 1 / 2 + l[3] + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + a[1] + -l[1] * 1 + -s[2] * 1 + l[3]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[1] + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 2 / 3 + s[1] * 2 / 3 + l[2]),
        Interval::interval_upper(l[3]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[1] + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 + l[2]),
        Interval::interval_upper(l[3]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[1] + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[2]),
        Interval::interval_upper(l[3]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[1] + l[1]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[2]),
        Interval::interval_upper(l[3]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[2] + l[2]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2]))
            || (-a[3] * 1 + a[2] + -l[2] * 1 + s[1] * 1 / 2 + -s[0] * 1 / 2 + l[3]
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2])
            || (-a[3] * 1 + s[1] * 2 + -s[0] * 1 + l[3] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + -a[0] * 1 / 2 + s[2] * 3 / 2 + l[3] + l[0] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -s[2] * 1 / 3 + s[0] * 1 / 3 + l[3]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -s[2] * 1 / 2 + s[1] * 1 / 2 + l[3]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 2
                + a[0] * 1 / 2
                + l[3]
                + l[2] * 1 / 2
                + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + -l[3] * 1 + l[2] * 3 + -l[1] * 1,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 2
                + a[0] * 1 / 2
                + l[3]
                + l[2] * 1 / 2
                + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[1] * 1 + s[0] + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 2
                + a[0] * 1 / 2
                + l[3]
                + l[2] * 1 / 2
                + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[2] + l[2]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[1] * 1 + s[0] + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[3] * 2 / 3 + s[0] * 1 / 3 + l[2],
        ),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[1] * 1 + s[0] + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[2] + -a[1] * 2 + l[3] + s[0] + l[1] * 2 + -l[2] * 1,
            ),
            Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[3] * 1 / 2 + s[1] * 1 / 2 + l[2],
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[4] + -a[3] * 2 + a[2] + -l[1] * 1 + l[3] * 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2) + a[4] + -a[3] * 3 / 2 + s[1] * 1 / 2 + l[3] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 2 / 3 + s[1] * 2 / 3 + l[2]),
        Interval::interval_upper(l[3]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[2] * 1 / 2
                + l[3]
                + s[1] * 1 / 2
                + l[2] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-10, 1) + a[4] + -a[3] * 1 + l[3]),
        Interval::interval_upper(RealNumRep::new(-25, 1) + a[4] + -s[0] * 1),
        Interval::interval_upper(RealNumRep::new(-15, 1) + a[4] + -a[2] * 1 + l[2]),
        Interval::interval_upper(RealNumRep::new(-20, 1) + a[4] + -a[1] * 1 + l[1]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1
                + -a[2] * 1
                + a[0] * 1 / 2
                + l[3]
                + s[3] * 1 / 2
                + l[2]
                + -l[0] * 1 / 2,
        ),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[1] * 1 + s[0] + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + a[2] + -a[1] * 2 + l[3] + s[0] + l[1] * 2 + -l[2] * 1,
            ),
            Interval::interval_upper(a[4] + -a[2] * 1 + -s[1] * 1 + s[0] + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[3] * 2 / 3 + s[0] * 1 / 3 + l[2],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[2] * 1 + l[3] + s[3] * 1 / 2 + s[1] * 1 / 2 + l[2],
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[4] + -a[3] * 2 / 3 + -a[2] * 1 + l[3] * 2 / 3 + s[0] * 2 / 3 + l[2],
            ),
            Interval::interval_lower(a[4] + -a[3] * 1 + -a[2] * 1 + a[1] + l[3] + -l[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -s[3] * 1 / 4 + s[0] * 1 / 4 + l[3]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + a[1] * 1 / 2 + -l[1] * 1 / 2 + -s[3] * 1 / 2 + l[3],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -s[3] * 1 / 3 + s[1] * 1 / 3 + l[3]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + a[1] * 1 / 2 + -l[1] * 1 / 2 + -s[3] * 3 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + s[4] * 2 / 3 + s[1] * 1 / 3 + l[3] <= RealNumRep::new(-5, 1))
            || (-a[3] * 1 + a[2] * 1 / 2 + -l[2] * 1 / 2 + s[4] * 1 / 2 + l[3]
                <= RealNumRep::new(-5, 1))
    );
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[4] + -a[3] * 2 + a[2] + -l[1] * 1 + l[3] * 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 3) + a[4] + -a[3] * 4 / 3 + s[0] * 1 / 3 + l[3] * 4 / 3,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[4]
                    + -a[3] * 3 / 2
                    + a[1] * 1 / 2
                    + -l[1] * 1 / 2
                    + l[3] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                RealNumRep::new(-5, 1) + a[4] + -a[3] * 1 + l[3] + -s[1] * 1 / 2 + s[0] * 1 / 2,
            ),
            Interval::interval_upper(
                RealNumRep::new(-5, 1) + a[4] + -a[2] * 1 + l[2] + -s[1] * 1 + s[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + a[0] + -s[2] * 2 + -l[0] * 1),
        Interval::interval_upper(
            RealNumRep::new(-5, 1)
                + a[4]
                + -a[3] * 1
                + a[0] * 1 / 2
                + l[3]
                + -s[2] * 1 / 2
                + -l[0] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[3] == l[2])
        || (-a[3] * 3 + a[1] + -l[1] * 1 + s[4] * 2 + l[3] * 3 <= RealNumRep::new(-15, 1))
        || (-a[3] * 1 + s[4] * 3 / 4 + s[0] * 1 / 4 + l[3] <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[4] + -s[4] * 1),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[4] + -a[3] * 2 + a[2] + -l[2] * 1 + l[3] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            RealNumRep::new(-5, 1) + a[4] + a[0] * 1 / 3 + -s[3] * 4 / 3 + -l[0] * 1 / 3,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[1] * 1 + s[0] + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[1] * 1 / 2
                + l[3]
                + s[0] * 1 / 2
                + l[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1],
        ),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[1] * 1 + s[0] + l[2]),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + s[0] + l[3] <= RealNumRep::new(-20, 1))
            || (-a[3] * 1 + a[2] + -l[2] * 1 + l[3] <= RealNumRep::new(-10, 1))
            || (-a[3] * 1 + a[1] + -l[1] * 1 + l[3] <= RealNumRep::new(-15, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(RealNumRep::new(-5, 1) + a[4] + -s[3] * 4 / 3 + s[1] * 1 / 3),
    ]);
    ret = ret.intersection(&tmp);
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[2]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1],
            ),
            Interval::interval_upper(a[4] + -a[2] * 1 + -s[1] * 1 + s[0] + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 + l[2]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[2]),
            Interval::interval_upper(
                a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[3] * 1 / 3 + s[0] * 2 / 3 + l[1],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 + l[2]),
        Interval::interval_upper(
            a[4] + -a[3] * 1 + -a[1] * 1 + l[3] + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1],
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[4] * 2 / 5 + s[0] * 2 / 5 + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[1] * 1 / 2
                + l[3]
                + s[0] * 1 / 2
                + l[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[2] * 2 / 3 + s[0] * 2 / 3 + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[1] * 1 / 2
                + l[3]
                + s[0] * 1 / 2
                + l[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] * 1 / 2 + -l[2] * 1 / 2 + s[4] * 1 / 2 + l[3]
                <= RealNumRep::new(-5, 1))
            || (-a[3] * 3 + a[1] + -l[1] * 1 + s[4] * 2 + l[3] * 3 <= RealNumRep::new(-15, 1))
            || (-a[3] * 1 + s[4] * 3 / 4 + s[0] * 1 / 4 + l[3] <= RealNumRep::new(-5, 1))
    );
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[2] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 + l[2]),
        Interval::interval_upper(
            RealNumRep::new(-5, 2)
                + a[4]
                + -a[3] * 1
                + -a[1] * 1 / 2
                + l[3]
                + s[0] * 1 / 2
                + l[1] * 1 / 2,
        ),
    ]);
    ret = ret.intersection(&tmp);
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(-a[0] * 2 + s[0] * 2 + l[0] * 2 <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[4] + -s[4] * 1)]);
    ret = ret.intersection(&tmp);
    assert!(-a[3] * 1 + l[3] + s[3] <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_sim_l_4_t_5_l_4(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
    C: RealNumRep,
    B: RealNumRep,
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 4);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    assert!(a[4] >= a[3]);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[4] >= s[3]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])));
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] + B <= RealNumRep::new(0, 1)));
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[2] + l[2] + B <= RealNumRep::new(0, 1)));
    assert!(a[2] + -s[3] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[2] + -C * 1 + -s[2] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + C * 2 + s[0] + l[2] + B <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= a[2] + -a[1] * 1 + -C * 1 + l[1] + -l[2] * 1 + -B * 1)
    );
    assert!(a[2] + -C * 3 + -s[0] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[1] + -s[2] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[1] + -C * 2 + -s[0] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!((l[2] == l[1]) || (-a[2] * 1 + C + s[1] + l[2] + B <= RealNumRep::new(0, 1)));
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1)
            || (a[1] + C + -s[3] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[1] + C + -s[3] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1))
            || (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 1 + C + s[0] + l[1] + B <= RealNumRep::new(0, 1)));
    assert!(a[1] + -a[0] * 1 + -C * 1 + -l[1] * 1 + -B * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(a[1] + -C * 1 + -s[1] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    if !(l[3] == l[2]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[3] * 1 + l[3] + -C * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1])
            || (C + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(-a[0] * 1 + -C * 1 + s[1] + l[0] <= RealNumRep::new(0, 1));
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1]))
    );
    assert!((l[2] == l[1]) || (RealNumRep::new(0, 1) <= -a[3] * 1 + a[2] + -l[2] * 1 + C + l[3]));
    assert!(-a[0] * 1 + -C * 4 + s[4] + l[0] <= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[4] + -C * 1 + -s[4] * 1 + -B * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_lower(l[3]),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -C * 1 + -s[3] * 1 + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(!(RealNumRep::new(0, 1) <= -a[3] * 1 + a[2] + C + -l[2] * 1 + l[3] + -B * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[3] * 1 + -C * 1 + l[3] + -B * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)) || (l[2] == l[1]));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -s[4] * 1 + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + -C * 1 + l[3] + -B * 1),
        Interval::interval_upper(a[4] + -C * 2 + -s[2] * 1 + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -C * 3 + -s[1] * 1 + -B * 1),
        Interval::interval_upper(a[4] + -a[3] * 1 + -C * 1 + l[3] + -B * 1),
        Interval::interval_upper(a[4] + -a[2] * 1 + -C * 2 + l[2] + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !(!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[3] * 1 + -C * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[4] + -C * 2 + -s[3] * 1 + -B * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[4] + -C * 3 + -s[2] * 1 + -B * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(a[4] + -a[2] * 1 + l[2] + -C * 2 + -B * 1),
        Interval::interval_lower(a[4] + -a[2] * 1 + -C * 2 + l[2] + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[4] + -C * 5 + -s[0] * 1 + -B * 1,
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_point(a[4] + -a[3] * 1 + -C * 1 + l[3]),
        Interval::interval_upper(a[4] + -a[3] * 1 + l[3] + -C * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(
        (l[2] == l[1]) || (RealNumRep::new(0, 1) <= a[2] + -a[1] * 1 + -l[2] * 1 + -C * 1 + l[1])
    );
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= -a[3] * 1 + a[1] + C * 2 + -l[1] * 1 + l[3] + -B * 1)
        || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -l[3] * 1 + -C * 1 + l[2]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_point(a[4] + -a[1] * 1 + -C * 3 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_point(a[4] + -a[1] * 1 + -C * 3 + l[1]),
            Interval::interval_upper(a[4] + -a[3] * 1 + -C * 1 + l[3] + -B * 1),
            Interval::interval_upper(a[4] + -a[2] * 1 + -C * 2 + l[2] + -B * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)));
    assert!((l[1] == l[0]) || (-a[1] * 1 + -C * 1 + s[2] + l[1] + B <= RealNumRep::new(0, 1)));
    let tmp = IntervalList::new(vec![
        Interval::interval_point(a[4] + -a[3] * 1 + l[3] + -C * 1 + -B * 1),
        Interval::interval_lower(a[4] + -a[3] * 1 + -C * 1 + l[3] + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    if !((l[1] == l[0])
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[2] * 1 + -C * 2 + l[2] + -B * 1,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0]) || (a[2] + -a[1] * 1 + -l[2] * 1 + -C * 1 + l[1] <= RealNumRep::new(0, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1)
            || (a[1] + C * 2 + -s[4] * 1 + -l[1] * 1 + -B * 1 <= RealNumRep::new(0, 1))
            || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 1 + -C * 2 + s[3] + l[1] + B <= RealNumRep::new(0, 1)));
    assert!(-a[3] * 1 + l[3] + -C * 1 + s[4] <= RealNumRep::new(0, 1));
    if !((l[1] == l[0]) || (RealNumRep::new(0, 1) <= -a[4] * 1 + a[1] + C * 3 + -l[1] * 1 + l[3])) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(l[3])]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[3] == l[2]) || (-a[3] * 1 + s[3] + l[3] + B <= RealNumRep::new(0, 1)));
    assert!((l[1] == l[0]) || (-a[1] * 1 + -C * 3 + s[4] + l[1] + B <= RealNumRep::new(0, 1)));
    assert!(
        (l[1] == l[0])
            || (RealNumRep::new(0, 1) <= -a[3] * 1 + a[1] + C * 2 + -l[1] * 1 + l[2])
            || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))
    );
    assert!(
        (l[1] == l[0])
            || (-a[3] * 1 + a[1] + C * 2 + -l[1] * 1 + l[3] == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= a[3] + -a[1] * 1 + -l[3] * 1 + -C * 2 + l[1]))
    );
    assert!(
        (l[3] == l[2])
            || (a[2] + -a[1] * 1 + -C * 1 + -l[2] * 1 + l[1] + B <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= a[3] + -a[1] * 1 + -l[3] * 1 + -C * 2 + l[1])
    );
    assert!(a[3] + -s[4] * 1 + -l[3] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(
        (l[3] == l[2])
            || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1))
            || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1)
    );
    assert!((l[3] == l[2]) || (-a[3] * 1 + C + s[2] + l[3] + B <= RealNumRep::new(0, 1)));
    assert!(
        (!(RealNumRep::new(0, 1) <= -a[2] * 1 + a[1] + C + -l[1] * 1 + l[2] + -B * 1))
            || (a[2] + -s[4] * 1 + -l[2] * 1 + C <= RealNumRep::new(0, 1))
            || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[3] * 1 + a[2] + C + B)
            || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1))
    );
    if !(RealNumRep::new(0, 1) <= -a[3] * 1 + a[2] + C + -l[2] * 1 + l[3] + -B * 1) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_point(a[4] + -a[2] * 1 + -C * 2 + l[2]),
            Interval::interval_upper(a[4] + -a[2] * 1 + l[2] + -C * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (a[2] + C + -s[4] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1))
            || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
    );
    assert!((l[2] == l[1]) || (-a[2] * 1 + -C * 1 + s[3] + l[2] + B <= RealNumRep::new(0, 1)));
    assert!(
        (l[3] == l[2]) || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -l[3] * 1 + -C * 1 + l[2])
    );
    assert!((l[2] == l[1]) || (-a[2] * 1 + -C * 2 + s[4] + l[2] + B <= RealNumRep::new(0, 1)));
    if !(l[2] == l[1]) {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[4] + -a[2] * 1 + l[2] + -C * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(a[2] + -C * 2 + -s[1] * 1 + -l[2] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[2] + -a[0] * 1 + -C * 2 + -l[2] * 1 + -B * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(
        (!(RealNumRep::new(0, 1) <= a[2] + -a[1] * 1 + -C * 1 + l[1] + -l[2] * 1 + -B * 1))
            || (-a[2] * 1 + a[1] + -l[1] * 1 + C + l[2] + B == RealNumRep::new(0, 1))
    );
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[4] + -a[0] * 1 + -C * 4 + -B * 1 + l[0],
    )]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![
        Interval::interval_point(a[4] + -a[1] * 1 + l[1] + -C * 3 + -B * 1),
        Interval::interval_lower(a[4] + -a[1] * 1 + -C * 3 + l[1] + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    let tmp = IntervalList::new(vec![Interval::interval_lower(
        a[4] + -C * 4 + -s[1] * 1 + -B * 1,
    )]);
    ret = ret.intersection(&tmp);
    if !(!(l[1] == l[0])) {
        let tmp = IntervalList::new(vec![
            Interval::interval_point(l[3]),
            Interval::interval_upper(a[4] + -a[1] * 1 + -C * 3 + l[0]),
            Interval::interval_upper(a[4] + -a[3] * 1 + -C * 1 + l[3] + -B * 1),
            Interval::interval_upper(a[4] + -a[2] * 1 + -C * 2 + l[2] + -B * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    let tmp = IntervalList::new(vec![
        Interval::interval_point(l[3]),
        Interval::interval_upper(a[4] + -C * 4 + -s[0] * 1 + -B * 1),
        Interval::interval_upper(a[4] + -a[3] * 1 + -C * 1 + l[3] + -B * 1),
        Interval::interval_upper(a[4] + -a[2] * 1 + -C * 2 + l[2] + -B * 1),
        Interval::interval_upper(a[4] + -a[1] * 1 + -C * 3 + l[1] + -B * 1),
    ]);
    ret = ret.intersection(&tmp);
    assert!(-C * 2 + s[2] + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (C + -s[3] * 1 + s[1] <= RealNumRep::new(0, 1))
    );
    assert!((l[3] == l[2]) || (-a[3] * 1 + -C * 1 + s[4] + l[3] + B <= RealNumRep::new(0, 1)));
    assert!(-a[0] * 1 + -C * 2 + s[2] + l[0] <= RealNumRep::new(0, 1));
    assert!(a[3] + -C * 1 + -s[3] * 1 + -l[3] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[3] + -C * 2 + -s[2] * 1 + -l[3] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(a[3] + -a[0] * 1 + -C * 3 + -l[3] * 1 + -B * 1 + l[0] <= RealNumRep::new(0, 1));
    assert!(a[3] + -C * 3 + -s[1] * 1 + -l[3] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(
        (-a[3] * 1 + a[2] + -l[2] * 1 + C + l[3] + B == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1))
    );
    assert!(
        (a[2] + -a[1] * 1 + -l[2] * 1 + -C * 1 + l[1] <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1))
    );
    assert!(a[3] + -C * 4 + -s[0] * 1 + -l[3] * 1 + -B * 1 <= RealNumRep::new(0, 1));
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + C * 2 + s[1] + l[3] + B <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1)
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + C * 3 + s[0] + l[3] + B <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -C * 1 + l[2] + -l[3] * 1 + -B * 1)
            || (RealNumRep::new(0, 1) <= a[3] + -a[1] * 1 + -C * 2 + l[1] + -l[3] * 1 + -B * 1)
    );
    assert!(
        (-a[3] * 1 + a[1] + -l[1] * 1 + C * 2 + l[3] + B == RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= a[3] + -a[1] * 1 + -C * 2 + l[1] + -l[3] * 1 + -B * 1))
    );
    assert!(-C * 3 + s[2] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(
        (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (C + -s[4] * 1 + s[2] <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (C * 2 + -s[3] * 1 + s[0] <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1])
    );
    assert!(
        (a[2] + -s[3] * 1 + -l[2] * 1 <= RealNumRep::new(0, 1))
            || (a[1] + -l[1] * 1 + C + -s[3] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1]))
    );
    assert!(s[3] + -C * 2 + -s[2] * 1 <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + l[1] + -C * 2 + s[3] <= RealNumRep::new(0, 1));
    assert!(
        (a[2] + -s[4] * 1 + -l[2] * 1 + C <= RealNumRep::new(0, 1))
            || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (C * 3 + -s[4] * 1 + s[0] <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1])
    );
    assert!(
        (a[2] + -s[4] * 1 + -l[2] * 1 + C <= RealNumRep::new(0, 1))
            || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (C * 2 + -s[4] * 1 + s[1] <= RealNumRep::new(0, 1))
    );
    assert!(-a[1] * 1 + l[1] + -C * 3 + s[4] <= RealNumRep::new(0, 1));
    assert!(
        (a[2] + -s[4] * 1 + -l[2] * 1 + C <= RealNumRep::new(0, 1))
            || (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (!(a[2] + -a[1] * 1 + -l[2] * 1 + -C * 1 + l[1] <= RealNumRep::new(0, 1)))
            || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1]))
    );
    assert!(
        (a[3] + -l[3] * 1 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (a[2] + -a[1] * 1 + -l[2] * 1 + -C * 1 + l[1] <= RealNumRep::new(0, 1))
            || (a[1] + -l[1] * 1 + C * 2 + -s[4] * 1 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + C + s[0] + l[1]))
    );
    assert!(-C * 3 + s[4] + -s[2] * 1 <= RealNumRep::new(0, 1));
    assert!(-C * 4 + s[4] + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(s[3] + -C * 3 + -s[1] * 1 <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[3] + -C * 3 + l[0] <= RealNumRep::new(0, 1));
    assert!(s[3] + -C * 4 + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(-C * 5 + s[4] + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(B >= RealNumRep::new(5, 1));
    assert!(C >= RealNumRep::new(5, 1));
    assert!(l[0] >= RealNumRep::new(0, 1));
    let tmp = IntervalList::new(vec![Interval::interval_upper(a[4] + -s[4] * 1)]);
    ret = ret.intersection(&tmp);
    assert!(-C * 2 + s[4] + -s[3] * 1 <= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(0, 1));
    assert!(-a[2] * 1 + l[2] + s[2] <= RealNumRep::new(0, 1));
    assert!(-a[2] * 1 + s[3] + l[2] + -C * 1 <= RealNumRep::new(0, 1));
    assert!(-a[2] * 1 + l[2] + -C * 2 + s[4] <= RealNumRep::new(0, 1));
    assert!(-a[3] * 1 + l[3] + s[3] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + l[1] + -C * 1 + s[2] <= RealNumRep::new(0, 1));
    assert!(-C * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_a_4_3_t_5_l_1(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
    loss_rate_tol: RealNumRep,
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 1);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    let tmp = IntervalList::new(vec![Interval::interval_lower(a[3])]);
    ret = ret.intersection(&tmp);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!(a[1] >= a[0]);
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 3 + -s[2] * 2 + l[0]),
            Interval::interval_lower(s[3] + a[2] + -s[2] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 3 + -s[2] * 2 + l[0]),
            Interval::interval_lower(a[1] + s[3] * 3 / 2 + -s[2] * 3 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 7 / 3),
            Interval::interval_lower(s[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -s[3] * 1 / 3 + a[3] * 2 / 3 + -a[1] * 2 / 3 + s[0] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[0] * 6 + s[1] * 7 + l[0] * 7),
            Interval::interval_lower(a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -s[3] * 1 / 3 + a[3] * 2 / 3 + -a[1] * 2 / 3 + s[0] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -a[0] * 3 + s[1] * 3 + loss_rate_tol + l[0] * 3),
            Interval::interval_lower(-a[0] * 6 + s[1] * 7 + l[0] * 7),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 7 / 3 + -s[1] * 4 / 3 + l[0]),
            Interval::interval_lower(s[3] * 1 / 3 + a[3] + -s[1] * 1 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(l[0] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -s[3] * 1 / 3 + a[3] * 2 / 3 + -a[1] * 2 / 3 + s[0] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 4 + a[3] + -s[0] * 1 / 4 + loss_rate_tol),
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 7 / 3),
            Interval::interval_lower(
                s[3] * 1 / 3 + l[0] * 1 / 3 + a[3] + -a[0] * 1 / 3 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[0] * 7 / 2 + -a[0] * 5 / 2 + s[2] * 7 / 2),
            Interval::interval_lower(l[0] * 2 + a[3] + -a[0] * 2 + s[2] * 2),
            Interval::interval_lower(
                a[3] + -a[0] * 1 / 2 + s[2] * 1 / 2 + loss_rate_tol + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 3 + -s[2] * 2 + l[0]),
            Interval::interval_lower(s[3] * 1 / 2 + a[3] + -s[2] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + loss_rate_tol),
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[0]),
            Interval::interval_lower(s[3] + a[3] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[0]),
            Interval::interval_lower(a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(s[3] + a[3] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + loss_rate_tol),
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[0]),
            Interval::interval_lower(s[3] * 2 / 3 + a[3] + -s[0] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[0]),
            Interval::interval_lower(a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(s[3] * 2 / 3 + a[3] + -s[0] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(l[0] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[0] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -s[3] * 1 / 3 + a[3] * 2 / 3 + -a[1] * 2 / 3 + s[0] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[0] + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -s[3] * 1 / 3 + a[3] * 2 / 3 + -a[1] * 2 / 3 + s[0] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[0] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[1] + s[2] * 3 / 2 + -s[1] * 3 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -s[3] * 1 / 3 + a[3] * 2 / 3 + -a[1] * 2 / 3 + s[0] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[0]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -s[3] * 1 / 3 + a[3] * 2 / 3 + -a[1] * 2 / 3 + s[0] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[0] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[0]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(s[3] + a[3] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[0] * 7 / 2 + -a[0] * 5 / 2 + s[2] * 7 / 2),
            Interval::interval_lower(l[0] + a[2] + -a[0] * 1 + s[2] + loss_rate_tol),
            Interval::interval_lower(l[0] * 2 + a[3] + -a[0] * 2 + s[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[0] * 6 + s[1] * 7 + l[0] * 7),
            Interval::interval_lower(l[0] * 2 + a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol),
            Interval::interval_lower(l[0] * 4 + a[3] + -a[0] * 4 + s[1] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[0] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[3] * 1 / 2 + -a[0] * 1 + s[1] * 3 / 2 + l[0] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[0] * 4 + a[3] + -a[0] * 4 + s[1] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[0]),
            Interval::interval_lower(s[3] + a[3] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[0]),
            Interval::interval_lower(a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + loss_rate_tol),
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + loss_rate_tol),
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -s[3] * 1 / 3 + a[3] * 2 / 3 + -a[1] * 2 / 3 + s[0] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[0]),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(l[0] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -s[3] * 1 / 3 + a[3] * 2 / 3 + -a[1] * 2 / 3 + s[0] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[0] + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[0] + s[2]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[0] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[0] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
            Interval::interval_lower(a[1] + s[2] * 3 / 2 + -s[1] * 3 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 7 / 3 + -s[1] * 4 / 3 + l[0]),
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -s[3] * 1 / 3 + a[3] * 2 / 3 + -a[1] * 2 / 3 + s[0] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[0] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(s[3] + a[3] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[0]),
            Interval::interval_lower(s[3] + a[3] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(s[3] + a[3] + -s[1] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[0]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + s[3] + a[3] + -s[2] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + -a[0] * 3 + s[1] * 3 + loss_rate_tol + l[0] * 3),
            Interval::interval_lower(-a[0] * 6 + s[1] * 7 + l[0] * 7),
            Interval::interval_lower(s[3] + a[3] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[0] * 4 + a[3] + -a[0] * 4 + s[1] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                s[3] * 2 / 3 + l[0] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 7 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1) + s[3] + a[3] + -s[2] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[0]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2] + loss_rate_tol),
            Interval::interval_upper(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[0] + s[2]),
            Interval::interval_upper(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[0] * 7 / 2 + -a[0] * 5 / 2 + s[2] * 7 / 2),
            Interval::interval_lower(l[0] * 2 + a[3] + -a[0] * 2 + s[2] * 2),
            Interval::interval_lower(
                a[1] + l[0] * 3 / 2 + -a[0] * 3 / 2 + s[2] * 3 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 7 / 3 + -s[1] * 4 / 3 + l[0]),
            Interval::interval_lower(a[1] + s[3] + -s[1] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(s[3] + a[3] + -s[1] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -s[3] * 1 / 3 + a[3] * 2 / 3 + -a[1] * 2 / 3 + s[0] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[0] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 2 / 3 + a[3] + -s[0] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[0]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[0] + s[2]),
            Interval::interval_lower(s[3] * 2 / 3 + a[3] + -s[0] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(s[3] * 2 / 3 + a[3] + -s[0] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(s[3] + a[3] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[0] + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[0] + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[0]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + s[3] + a[3] + -s[2] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(s[3] * 2 / 3 + a[3] + -s[0] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(l[0] + -a[0] * 1 + s[0] <= RealNumRep::new(0, 1));
    assert!(!(-a[1] * 1 + s[3] + l[0] >= RealNumRep::new(0, 1)));
    assert!(-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1));
    assert!(-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1));
    assert!(s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1));
    assert!(-s[3] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 <= RealNumRep::new(0, 1));
    assert!(-s[3] * 1 + l[0] + -a[0] * 1 + s[1] * 2 <= RealNumRep::new(0, 1));
    assert!(-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1));
    ret
}

pub fn compute_a_4_3_t_5_l_2(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
    loss_rate_tol: RealNumRep,
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 2);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    let tmp = IntervalList::new(vec![Interval::interval_lower(a[3])]);
    ret = ret.intersection(&tmp);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])));
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(-5, 1)));
    assert!((l[1] == l[0]) || (-a[1] * 2 + s[2] + s[0] + l[1] * 2 <= RealNumRep::new(-10, 1)));
    assert!(
        (s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1))
            || (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= s[3] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1]))
    );
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 3 + -a[1] * 2 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 2 + a[3] + -s[2] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[3] + -s[2] * 1 / 2),
            Interval::interval_lower(s[3] * 2 + a[3] + -a[1] * 1 + -s[2] * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[3] + -s[2] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 3 + -s[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] + s[3] * 1 / 2 + -a[1] * 1 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
            || (RealNumRep::new(5, 1) <= s[3] + -a[1] * 1 + l[1])
    );
    assert!(
        (RealNumRep::new(0, 1) <= l[1] + s[3] * 1 / 2 + -a[1] * 1 + s[0] * 1 / 2)
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (!(l[1] + s[3] * 1 / 2 + -a[1] * 1 + s[0] * 1 / 2 <= RealNumRep::new(0, 1)))
            || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
            || (-l[1] * 1 + a[1] + -s[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (!(RealNumRep::new(-5, 1) <= s[3] + -a[1] * 2 + s[0] + l[1] * 2)));
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-10, 1)));
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -a[1] * 1 / 3 + -a[0] * 1 + s[1] * 4 / 3 + l[1] * 1 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[0] * 1 + s[1] + l[0]),
            Interval::interval_lower(a[3] + -a[1] * 1 + -a[0] * 4 + s[1] * 5 + l[1] + l[0] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + -a[0] * 1 + s[2] * 2 + l[1] + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[0] * 1 / 2 + s[2] * 1 / 2 + loss_rate_tol + l[0] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2]),
            Interval::interval_lower(RealNumRep::new(30, 1) + a[2] + -a[1] * 1 + s[0] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= s[3] + -a[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3] + -a[1] * 1 + s[1] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[1] + s[2]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[1] * 1 + -s[3] * 3 / 2 + a[3] + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] + -a[3] * 1 + a[1] + -s[2] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + l[1] + s[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
            Interval::interval_lower(a[1] + -a[0] * 3 + s[1] * 3 + loss_rate_tol + l[0] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[0] * 1 / 2 + s[2] * 1 / 2 + l[0] * 1 / 2),
            Interval::interval_lower(
                a[3] + -a[1] * 1 + -a[0] * 3 / 2 + s[2] * 5 / 2 + l[1] + l[0] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[3] * 3 + -s[2] * 2),
            Interval::interval_lower(s[3] * 3 / 2 + a[1] + -s[2] * 3 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(a[1] + s[2] * 3 / 2 + -s[1] * 3 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 3 + -a[1] * 2 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 3 / 2 + a[1] + -s[2] * 3 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 4 / 3),
            Interval::interval_lower(s[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= s[3] + -a[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[1] * 3 + -a[1] * 2 + s[2] * 3 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -a[1] * 1 + -a[0] * 2 + s[2] * 3 + l[1] + l[0] * 2),
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + loss_rate_tol + l[0]),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 2 + s[2] * 1 / 2 + l[1] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= l[1] + -a[3] * 1 + -a[0] * 2 + s[1] * 3 + l[0] * 2)
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 4 / 3),
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 2 + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 2 + a[2] + -a[1] * 1 + -a[0] * 1 + l[1] + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[1] + s[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[1] + s[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (-a[2] * 1 + a[1] <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + l[1] + s[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-20, 1) <= -a[1] * 1 + s[0] + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(30, 1) + l[1] + s[1]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + -a[0] * 1 + s[2] * 2 + l[1] + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + loss_rate_tol + l[0]),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[1] * 1 + s[1] * 3 + -s[0] * 2 + l[1]),
            Interval::interval_lower(a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[1] * 1 + s[2] * 2 + -s[0] * 1 + l[1]),
            Interval::interval_lower(a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 4 + -a[1] * 3 + -s[1] * 1 + l[1] * 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 3 + a[3] + -s[1] * 1 / 3 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-20, 1) <= -a[1] * 1 + s[0] + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 4 + -a[1] * 3 + -a[0] * 1 + l[1] * 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 3 + a[3] + -a[0] * 1 / 3 + loss_rate_tol + l[0] * 1 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 2 + a[3] * 3 + -s[1] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[1] * 4 + -s[0] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[1] + -a[3] * 1 + s[1] * 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[2] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= l[1] + -a[3] * 1 + -a[0] * 2 + s[1] * 3 + l[0] * 2)
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(a[1] + -a[0] * 3 + s[1] * 3 + loss_rate_tol + l[0] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[1] * 1 + -s[3] * 2 + a[3] + s[1] <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (-a[2] * 1 + a[1] <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + l[1] + s[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + l[1] + s[1]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[1] + s[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (-a[2] * 1 + a[1] <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(35, 1) + l[1] + s[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + l[1] + s[1]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[3] * 7 / 3 + -s[1] * 4 / 3),
            Interval::interval_lower(s[3] + a[1] + -s[1] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(a[2] + -a[1] * 1 + -a[0] * 5 + s[1] * 6 + l[1] + l[0] * 5),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= l[1] + -a[3] * 1 + -a[0] * 2 + s[1] * 3 + l[0] * 2))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[1] * 1 + s[2] * 5 / 2 + -s[1] * 3 / 2 + l[1]),
            Interval::interval_lower(a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[2] + -a[1] * 1 + s[2] * 7 / 3 + -s[0] * 4 / 3 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= s[3] + -a[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] * 2 + a[2] + s[3] * 2 + -a[1] * 2 + loss_rate_tol),
            Interval::interval_lower(s[3] + a[3] + -s[2] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[1] + s[3] + a[3] + -a[1] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= l[1] + -a[3] * 1 + -a[0] * 2 + s[1] * 3 + l[0] * 2))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= l[1] + -a[3] * 1 + -a[0] * 2 + s[1] * 3 + l[0] * 2))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + s[3] * 1 / 2
                    + a[3]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[3] + -a[1] * 1 + s[2] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] * 2 + a[2] + s[3] * 2 + -a[1] * 2 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + s[3] + a[3] + -a[1] * 1 + l[1] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[3] * 3 + -s[2] * 2),
            Interval::interval_lower(s[3] + a[2] + -s[2] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 4 / 3),
            Interval::interval_lower(
                s[3] * 1 / 3 + a[3] + -a[0] * 1 / 3 + loss_rate_tol + l[0] * 1 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 4 / 3),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 2 + s[2] * 1 / 2 + l[1] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[2] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + -a[1] * 1 + s[1] * 7 / 2 + -s[0] * 5 / 2 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + a[3] + -a[1] * 1 + s[0] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[1] + s[2]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[2] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 5 / 2 + a[2] + -a[1] * 1 + -s[2] * 3 / 2 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + l[1] + s[3]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(30, 1) + a[1]),
            Interval::interval_lower(RealNumRep::new(35, 1) + l[1] + s[0]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-20, 1) <= -a[1] * 1 + s[0] + l[1])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[2] + -a[1] * 1 + s[2] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[1] * 1 + -s[3] * 3 / 2 + a[3] + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (-a[2] * 1 + a[1] <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + l[1] + s[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[1] + s[2]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(15, 1) + l[1] + s[2] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= l[1] + -a[3] * 1 + -a[0] * 2 + s[1] * 3 + l[0] * 2)
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[1] + -a[0] * 3 + s[1] * 4 + loss_rate_tol + l[0] * 3,
            ),
            Interval::interval_lower(l[1] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (-l[1] * 1 + -s[3] * 2 + a[3] + s[1] <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -a[1] * 1 / 3 + -a[0] * 1 + s[1] * 4 / 3 + l[1] * 1 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + -a[0] * 3 + s[1] * 3 + loss_rate_tol + l[0] * 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2]),
            Interval::interval_lower(RealNumRep::new(25, 1) + a[2] + -a[1] * 1 + s[1] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(10, 1) + s[3] + a[3] + -a[1] * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2]),
            Interval::interval_lower(RealNumRep::new(15, 1) + s[3] + a[2] + -a[1] * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-20, 1) <= -a[1] * 1 + s[0] + l[1])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[2] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 7 / 3 + -s[1] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 4 / 3),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + s[3] * 1 / 2
                    + a[3]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= l[1] + -a[3] * 1 + -a[0] * 2 + s[1] * 3 + l[0] * 2)
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(l[1] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 2 + s[2] * 1 / 2 + l[1] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] * 2 + a[2] + s[3] * 2 + -a[1] * 2 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + s[3] + a[3] + -a[1] * 1 + l[1] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(l[1] + s[3] * 2 + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(30, 1) + l[1] + s[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[1] + s[3] + a[3] + -a[1] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[1] + s[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[1] + s[0] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= s[3] + -a[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 5 + -a[1] * 4 + -s[0] * 1 + l[1] * 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 4 + -a[1] * 3 + -a[0] * 1 + l[1] * 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 2 + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= s[3] + -a[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 4 + a[3] + -s[0] * 1 / 4),
            Interval::interval_lower(s[3] * 3 / 2 + a[3] + -a[1] * 1 + -s[0] * 1 / 2 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] * 2 + a[2] + s[3] * 2 + -a[1] * 2 + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 7 / 4 + a[2] + -a[1] * 1 + -s[0] * 3 / 4 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + -a[0] * 5 / 2 + s[2] * 7 / 2 + l[0] * 5 / 2),
            Interval::interval_lower(
                a[3] + -a[0] * 1 / 2 + s[2] * 1 / 2 + loss_rate_tol + l[0] * 1 / 2,
            ),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[1] + -a[0] * 5 / 2 + s[2] * 7 / 2 + l[0] * 5 / 2),
            Interval::interval_lower(
                a[1] + -a[0] * 3 / 2 + s[2] * 3 / 2 + loss_rate_tol + l[0] * 3 / 2,
            ),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[1] + -a[0] * 5 / 2 + s[2] * 7 / 2 + l[0] * 5 / 2),
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + loss_rate_tol + l[0]),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[1] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -a[1] * 1 / 3 + -a[0] * 1 + s[1] * 4 / 3 + l[1] * 1 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(l[1] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[1] + s[2] * 5 / 3 + -s[0] * 2 / 3 + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 2 + s[2] * 1 / 2 + l[1] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[1] + -a[0] * 3 / 2 + s[2] * 3 / 2 + loss_rate_tol + l[0] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + -a[0] * 5 / 2 + s[2] * 7 / 2 + l[0] * 5 / 2),
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + loss_rate_tol + l[0]),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 1)
                    + a[3]
                    + -a[0] * 1 / 2
                    + s[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] + -a[3] * 1 + a[1] + -s[2] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + l[1] + s[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + -s[3] * 1 + a[3] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 5 + -a[1] * 4 + -s[0] * 1 + l[1] * 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
            Interval::interval_lower(a[1] + s[2] * 3 / 2 + -s[1] * 3 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(a[1] + s[2] * 3 / 2 + -s[1] * 3 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -a[1] * 1 / 3 + -a[0] * 1 + s[1] * 4 / 3 + l[1] * 1 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[1] + -a[0] * 3 + s[1] * 3 + loss_rate_tol + l[0] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 5 + -a[1] * 4 + -s[0] * 1 + l[1] * 4)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 4 + a[3] + -s[0] * 1 / 4 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] * 2 + a[2] + s[3] * 2 + -a[1] * 2 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 2 + s[2] * 1 / 2 + l[1] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 2 + s[2] * 1 / 2 + l[1] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[1] + s[3]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] * 2 + a[2] + s[3] * 2 + -a[1] * 2 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] * 2 + a[2] + s[3] * 2 + -a[1] * 2 + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
            Interval::interval_lower(s[3] * 2 + a[2] + -a[1] * 1 + -a[0] * 1 + l[1] + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 4 + -a[1] * 3 + -a[0] * 1 + l[1] * 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[1] + -a[3] * 1 + -a[0] * 2 + s[1] * 3 + l[0] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(s[3] + a[3] + -a[1] * 1 + l[1] + loss_rate_tol),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 4 / 3),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
            Interval::interval_lower(s[3] + a[3] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + -a[0] * 5 / 2 + s[2] * 7 / 2 + l[0] * 5 / 2),
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + loss_rate_tol + l[0]),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + s[3] * 1 / 2
                    + a[3]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[1] + -a[0] * 3 / 2 + s[2] * 3 / 2 + loss_rate_tol + l[0] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + -a[0] * 1 + s[2] * 2 + l[1] + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[1] + -a[0] * 3 / 2 + s[2] * 3 / 2 + loss_rate_tol + l[0] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(25, 1) + l[1] + s[2]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + -s[3] * 1 + a[3] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-20, 1) <= -a[1] * 1 + s[0] + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + a[1] + -s[2] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(a[2] + -a[1] * 1 + s[2] * 3 + -s[1] * 2 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 2 + a[2] + -a[1] * 1 + -s[1] * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= s[3] + -a[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[2] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 4 + -a[1] * 3 + -s[1] * 1 + l[1] * 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 3 + -a[1] * 2 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] + a[2] + -s[2] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 3 + -a[1] * 2 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] + a[1] + -s[1] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 4 + -a[1] * 3 + -s[1] * 1 + l[1] * 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] + a[1] + -s[1] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 5 / 3 + a[3] + -a[1] * 1 + -s[1] * 2 / 3 + l[1]),
            Interval::interval_lower(s[3] * 1 / 3 + a[3] + -s[1] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + -s[3] * 1 + a[3] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 5 + -a[1] * 4 + -s[0] * 1 + l[1] * 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= s[3] + -a[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + a[1] + -s[2] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + l[1] + s[1]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + -s[3] * 1 + a[3] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[2] + -a[1] * 2 + s[2] * 2 + l[1] * 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + loss_rate_tol + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[1] + s[2]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[1] + s[1] * 5 / 2 + -s[0] * 3 / 2 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 5 + -a[1] * 4 + -s[0] * 1 + l[1] * 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + l[1] + s[1]),
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(30, 1) + l[1] + s[1]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(-5, 1) <= -a[2] * 1 + a[1]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + l[1] + s[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + -s[3] * 1 + a[3] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(-5, 1) <= -a[2] * 1 + a[1]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(RealNumRep::new(35, 1) + l[1] + s[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] + -a[3] * 1 + a[1] + -s[2] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + l[1] + s[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + a[1] + -s[2] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[1] + s[2]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + -a[0] * 5 / 2 + s[2] * 7 / 2 + l[0] * 5 / 2),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 1)
                    + a[3]
                    + -a[0] * 1 / 2
                    + s[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[1] + -a[0] * 1 + s[2] * 2 + loss_rate_tol + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                s[3] * 5 / 3 + a[3] + -a[1] * 1 + -a[0] * 2 / 3 + l[1] + l[0] * 2 / 3,
            ),
            Interval::interval_lower(s[3] * 1 / 3 + a[3] + -a[0] * 1 / 3 + l[0] * 1 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 4 + -a[1] * 3 + -a[0] * 1 + l[1] * 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 5 + -a[1] * 4 + -s[0] * 1 + l[1] * 4)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[1] + s[3] + a[3] + -a[1] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + -a[0] * 1 + s[2] * 2 + l[1] + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] * 2 + a[2] + s[3] * 2 + -a[1] * 2 + loss_rate_tol),
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] * 3 + s[3] * 3 + -a[1] * 2),
            Interval::interval_lower(l[1] + a[2] + s[3] + -a[1] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] * 2 + a[2] + s[3] * 2 + -a[1] * 2 + loss_rate_tol),
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(30, 1) + a[1]),
            Interval::interval_lower(RealNumRep::new(35, 1) + l[1] + s[0]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= s[3] * 4 + -a[1] * 3 + -s[1] * 1 + l[1] * 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
            Interval::interval_upper(-l[1] * 1 + a[3] + a[1] + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[1] + s[3]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + l[1] + s[3]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + a[1] + -s[2] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                l[1] * 1 / 2 + s[3] * 1 / 2 + a[3] + -a[1] * 1 / 2 + loss_rate_tol,
            ),
            Interval::interval_lower(l[1] * 3 + s[3] * 3 + -a[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 7 / 3 + -s[1] * 4 / 3),
            Interval::interval_lower(s[3] + a[3] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(25, 1) + l[1] + s[2]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[1] + s[2]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 2 + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 2 + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] * 6 + -a[1] * 5 + s[2] * 6),
            Interval::interval_lower(l[1] + a[3] + -a[1] * 1 + s[2] + loss_rate_tol),
            Interval::interval_lower(l[1] * 4 + a[3] + -a[1] * 4 + s[2] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(s[3] * 1 / 4 + a[3] + -s[0] * 1 / 4 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[3] * 7 / 3 + -s[1] * 4 / 3),
            Interval::interval_lower(s[3] * 1 / 3 + a[3] + -s[1] * 1 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
            Interval::interval_lower(a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
            Interval::interval_lower(a[1] + s[2] * 3 / 2 + -s[1] * 3 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(
                RealNumRep::new(10, 3) + s[3] * 1 / 3 + a[3] + -s[0] * 1 / 3 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(s[3] + a[3] + -a[1] * 1 + l[1] + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 2 + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] * 6 + -a[1] * 5 + s[2] * 6),
            Interval::interval_lower(l[1] * 2 + a[2] + -a[1] * 2 + s[2] * 2 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol,
            ),
            Interval::interval_lower(l[1] * 4 + a[3] + -a[1] * 4 + s[2] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[1] + s[3]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 2 + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(
                RealNumRep::new(10, 3) + s[3] * 1 / 3 + a[3] + -s[0] * 1 / 3 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(30, 1) + a[1]),
            Interval::interval_lower(RealNumRep::new(35, 1) + l[1] + s[0]),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[1] + s[0] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + l[1] + s[1]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + a[1] + -s[2] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + l[1] + s[1]),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + l[1] + s[1]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + l[1] + s[1]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 2 + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] * 6 + -a[1] * 5 + s[2] * 6),
            Interval::interval_lower(s[3] + a[3] + -a[1] * 1 + l[1] + loss_rate_tol),
            Interval::interval_lower(l[1] * 2 + a[2] + -a[1] * 2 + s[2] * 2 + loss_rate_tol),
            Interval::interval_lower(l[1] * 4 + a[3] + -a[1] * 4 + s[2] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[1] + s[2]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= l[1] + -a[3] * 1 + -a[0] * 2 + s[1] * 3 + l[0] * 2)
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + s[3] * 1 / 2
                    + a[3]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + s[3] * 1 / 2
                    + a[3]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[1] * 3 + -a[1] * 2 + s[2] * 3 + loss_rate_tol,
            ),
            Interval::interval_lower(l[1] * 6 + -a[1] * 5 + s[2] * 6),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol,
            ),
            Interval::interval_lower(l[1] * 4 + a[3] + -a[1] * 4 + s[2] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(s[3] + a[3] + -a[1] * 1 + l[1] + loss_rate_tol),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + s[3] * 1 / 2
                    + a[3]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= l[1] + -a[3] * 1 + -a[0] * 2 + s[1] * 3 + l[0] * 2)
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + l[1] + s[3]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[1] + s[3]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(l[1] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(-5, 1) <= -a[2] * 1 + a[1]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(35, 1) + l[1] + s[0]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(l[1] + s[3] * 2 + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 2 + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(l[1] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 7 / 3 + -s[1] * 4 / 3),
            Interval::interval_lower(
                RealNumRep::new(5, 2) + s[3] * 1 / 2 + a[3] + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] + a[3] + -a[1] * 1 + l[1] + loss_rate_tol),
            Interval::interval_lower(l[1] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 7 / 3 + -s[1] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[1] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[1] + s[2] * 2 + -s[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 2) + s[3] * 1 / 2 + a[3] + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + -a[0] * 5 / 2 + s[2] * 7 / 2 + l[0] * 5 / 2),
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + loss_rate_tol + l[0]),
            Interval::interval_lower(s[3] + a[3] + -a[1] * 1 + l[1] + loss_rate_tol),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + s[3] * 1 / 2
                    + a[3]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(10, 3) + s[3] * 1 / 3 + a[3] + -s[0] * 1 / 3 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 2 + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -a[0] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 2 + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(
                RealNumRep::new(5, 2) + s[3] * 1 / 2 + a[3] + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[1] * 1 + a[3] + a[1] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] + a[3] + -a[1] * 1 + l[1] + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[1] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(
                RealNumRep::new(5, 2) + s[3] * 1 / 2 + a[3] + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] + a[3] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(l[1] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(!(l[1] + -a[2] * 1 + s[3] >= RealNumRep::new(0, 1)));
    assert!(-s[3] * 1 + -a[0] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1));
    assert!(-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1));
    assert!(l[1] + -a[1] * 1 + s[1] <= RealNumRep::new(0, 1));
    assert!(-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1));
    ret
}

pub fn compute_a_4_3_t_5_l_3(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
    loss_rate_tol: RealNumRep,
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 3);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    let tmp = IntervalList::new(vec![Interval::interval_lower(a[3])]);
    ret = ret.intersection(&tmp);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])) || (l[1] == l[0]));
    assert!((l[2] == l[1]) || (l[2] + -a[2] * 1 + s[2] <= RealNumRep::new(-5, 1)));
    assert!((l[2] == l[1]) || (l[2] + -a[2] * 1 + a[1] + -l[1] * 1 <= RealNumRep::new(-5, 1)));
    assert!(
        (l[2] == l[1])
            || (l[2] * 2 + -a[2] * 2 + a[1] * 2 + -a[0] * 1 + s[2] + -l[1] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] * 2 + -a[2] * 2 + a[1] * 2 + s[2] + -s[1] * 1 + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] * 3 + -a[2] * 3 + a[1] * 3 + s[2] + -s[0] * 1 + -l[1] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + a[1] + -a[0] * 1 + s[1] + -l[1] * 1 + l[2] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] * 4 + s[3] + -a[2] * 4 + a[1] * 4 + -s[0] * 1 + -l[1] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-s[3] * 1 + a[2] + -a[1] * 1 + s[1] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[1] + -s[0] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-s[3] * 1 + a[2] * 2 + -a[1] * 2 + s[0] + l[1] * 2 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 2 + s[0] + l[1] * 2 + -l[2] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= a[2] * 4 + -a[1] * 5 + s[0] + l[1] * 5 + -l[2] * 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1]),
            Interval::interval_lower(a[3] + a[2] + -a[1] * 1 + l[1] + -l[2] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= s[3] + a[2] + -a[1] * 2 + l[1] * 2 + -l[2] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1]),
            Interval::interval_lower(a[3] + a[2] + -a[1] * 1 + l[1] + -l[2] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= a[2] * 3 + -a[1] * 4 + s[1] + l[1] * 4 + -l[2] * 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1]),
            Interval::interval_lower(a[3] + a[2] + -a[1] * 1 + l[1] + -l[2] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= a[2] * 2 + -a[1] * 3 + s[2] + l[1] * 3 + -l[2] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1]),
            Interval::interval_lower(a[3] + a[2] + -a[1] * 1 + l[1] + -l[2] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (l[2] * 2 + s[3] + -a[2] * 2 + a[1] * 2 + -s[2] * 1 + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] * 3 + s[3] + -a[2] * 3 + a[1] * 3 + -a[0] * 1 + -l[1] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] * 3 + s[3] + -a[2] * 3 + a[1] * 3 + -s[1] * 1 + -l[1] * 3
                <= RealNumRep::new(0, 1))
    );
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] * 4 + -a[1] * 5 + s[0] + l[1] * 5 + -l[2] * 4)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= a[2] * 4 + -a[1] * 5 + s[0] + l[1] * 5 + -l[2] * 4))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + a[2] * 5 + -a[1] * 6 + s[0] + l[1] * 6 + -l[2] * 5,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1]),
            Interval::interval_lower(a[3] + a[2] * 3 + -a[1] * 4 + s[2] + l[1] * 4 + -l[2] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1]),
            Interval::interval_lower(a[3] + a[2] * 4 + -a[1] * 5 + s[1] + l[1] * 5 + -l[2] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1]),
            Interval::interval_lower(s[3] + a[3] + a[2] * 2 + -a[1] * 3 + l[1] * 3 + -l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (l[2] * 2 + s[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(-5, 1))
    );
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= s[3] + a[2] + -a[1] * 2 + l[1] * 2 + -l[2] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2),
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + -l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= s[3] + a[2] + -a[1] * 2 + l[1] * 2 + -l[2] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2),
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + loss_rate_tol),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -s[2] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= s[3] + a[2] + -a[1] * 2 + l[1] * 2 + -l[2] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2),
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + loss_rate_tol),
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= s[3] + a[2] + -a[1] * 2 + l[1] * 2 + -l[2] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2),
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + loss_rate_tol),
            Interval::interval_lower(s[3] + a[3] + a[2] * 2 + -a[1] * 3 + l[1] * 3 + -l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + loss_rate_tol),
            Interval::interval_lower(s[3] + a[3] + a[2] * 2 + -a[1] * 3 + l[1] * 3 + -l[2] * 2),
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + -l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] + a[3] + a[2] * 2 + -a[1] * 3 + l[1] * 3 + -l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (l[2] + a[3] + -a[2] * 2 + a[1] * 2 + -s[2] * 1 + -l[1] * 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= a[2] * 3 + -a[1] * 4 + s[1] + l[1] * 4 + -l[2] * 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2),
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= a[2] * 3 + -a[1] * 4 + s[1] + l[1] * 4 + -l[2] * 3))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + a[3] + -a[2] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= a[2] * 2 + -a[1] * 3 + s[2] + l[1] * 3 + -l[2] * 2))
        || (RealNumRep::new(0, 1) <= a[2] * 4 + -a[1] * 5 + s[0] + l[1] * 5 + -l[2] * 4))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2),
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= a[2] * 4 + -a[1] * 5 + s[0] + l[1] * 5 + -l[2] * 4))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2),
            Interval::interval_lower(-l[2] * 4 + a[2] * 5 + -a[1] * 5 + s[2] + l[1] * 5),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (l[2] + a[3] + -a[2] * 2 + a[1] * 2 + -s[2] * 1 + -l[1] * 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 3 + s[3] + a[2] * 4 + -a[1] * 4 + l[1] * 4),
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (l[2] + a[3] + -a[2] * 2 + a[1] * 2 + -s[2] * 1 + -l[1] * 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2),
            Interval::interval_lower(-l[2] * 5 + a[2] * 6 + -a[1] * 6 + s[1] + l[1] * 6),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (l[2] + a[3] + -a[2] * 2 + a[1] * 2 + -s[2] * 1 + -l[1] * 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= a[2] * 4 + -a[1] * 5 + s[0] + l[1] * 5 + -l[2] * 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2),
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= a[2] * 4 + -a[1] * 5 + s[0] + l[1] * 5 + -l[2] * 4))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -l[2] * 6 + a[2] * 7 + -a[1] * 7 + s[0] + l[1] * 7,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (l[2] + a[3] + -a[2] * 2 + a[1] * 2 + -s[2] * 1 + -l[1] * 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] * 4 + -a[1] * 5 + s[0] + l[1] * 5 + -l[2] * 4)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] * 4 + -a[1] * 5 + s[0] + l[1] * 5 + -l[2] * 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -s[2] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] * 4 + -a[1] * 5 + s[0] + l[1] * 5 + -l[2] * 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2),
            Interval::interval_upper(s[3] + a[3] + a[2] * 2 + -a[1] * 3 + l[1] * 3 + -l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] * 4 + -a[1] * 5 + s[0] + l[1] * 5 + -l[2] * 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -l[2] * 2 + -s[3] * 1 + a[3] + a[2] * 2 + -a[1] * 1 + l[1] + loss_rate_tol,
            ),
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= -l[2] * 1 + l[1])));
    assert!(
        (RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] + l[1])
            || (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
            || (-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (-s[3] * 1 + a[1] + -l[1] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1]) || (l[2] * 2 + -a[2] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(-10, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] + -a[2] * 1 + -a[0] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(-5, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-10, 1)));
    assert!(
        (RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] + l[1])
            || (s[3] * 1 / 3 + -s[2] * 1 + s[0] * 2 / 3 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (l[2] + s[3] * 1 / 2 + -a[2] * 1 + s[1] * 1 / 2 <= RealNumRep::new(-5, 1))
    );
    assert!((l[2] == l[1]) || (l[2] + -a[2] * 1 + s[1] <= RealNumRep::new(-10, 1)));
    assert!(
        (RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
            || (-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
            || (-s[3] * 1 + -a[0] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1))
    );
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[2] + -a[1] * 1 + l[1] + -l[2] * 1 + loss_rate_tol),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + loss_rate_tol + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (s[3] * 2 / 3 + -a[2] * 1 + s[0] * 1 / 3 + l[2] <= RealNumRep::new(-5, 1))
            || (-l[1] * 1 + a[1] + s[3] + -a[2] * 2 + l[2] * 2 <= RealNumRep::new(-10, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] + l[1])
            || (l[2] + s[3] + -a[2] * 1 + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (s[3] * 1 / 3 + -a[1] * 1 + s[0] * 2 / 3 + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[0] + l[2] <= RealNumRep::new(-15, 1))
            || (-l[1] * 1 + a[1] + -a[2] * 1 + l[2] <= RealNumRep::new(-10, 1))
    );
    if !((l[2] == l[1]) || (!(RealNumRep::new(-5, 1) <= s[3] + -a[3] * 1 + l[2]))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_upper(-l[2] * 1 + a[3] + a[2] + -s[1] * 1),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (l[2] + s[3] + -a[2] * 1 + -a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-5, 1))
    );
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= s[3] + a[2] + -a[1] * 2 + l[1] * 2 + -l[2] * 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 3 + a[3] + -s[1] * 1 / 3 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + loss_rate_tol + l[0]),
            Interval::interval_lower(
                -l[2] * 1
                    + -s[3] * 1 / 2
                    + a[3]
                    + a[2]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-s[3] * 1 / 2 + s[1] + -s[0] * 1 / 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 3 + -s[1] * 2),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 3 + -a[1] * 2 + l[1] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 1)
                    + l[2]
                    + s[3] * 3 / 2
                    + -a[1] * 1 / 2
                    + l[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + s[3] * 1 / 2
                    + a[3]
                    + -a[1] * 1 / 2
                    + l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_upper(
                RealNumRep::new(-5, 1) + a[3] + a[2] + -s[1] * 1 + -l[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + -a[0] * 5 / 2 + s[2] * 7 / 2 + l[0] * 5 / 2),
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + l[0]),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                s[3] * 1 / 2 + a[3] + -a[1] * 1 / 2 + l[1] * 1 / 2 + loss_rate_tol,
            ),
            Interval::interval_lower(l[2] + s[3] * 3 + -a[1] * 2 + l[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                s[3] * 5 / 2 + a[3] + -a[2] * 1 + -a[1] * 3 / 2 + l[1] * 3 / 2 + l[2],
            ),
            Interval::interval_lower(s[3] * 1 / 2 + a[3] + -a[1] * 1 / 2 + l[1] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] * 2 + -a[1] * 3 + s[2] + l[1] * 3 + -l[2] * 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[2] + s[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 4 / 3),
            Interval::interval_lower(
                s[3] * 1 / 3 + a[3] + -a[0] * 1 / 3 + loss_rate_tol + l[0] * 1 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 3 + -s[2] * 2),
            Interval::interval_lower(s[3] + a[2] + -s[2] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[1] * 1 + -a[0] * 4 + s[1] * 5 + l[1] + l[0] * 4),
            Interval::interval_lower(a[3] + -a[0] * 1 + s[1] + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -s[1] * 4 / 3),
            Interval::interval_lower(l[2] + s[3] + a[1] + -s[1] * 1 + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + l[2] + s[3]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(35, 1) + l[2] + s[0]),
            Interval::interval_lower(RealNumRep::new(25, 1) + a[2]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(-5, 1) <= -a[3] * 1 + a[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[2] + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 4 / 3),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[2] + -a[1] * 1 + l[1] + -l[2] * 1),
            Interval::interval_lower(l[2] + -a[1] * 5 + l[1] * 5 + s[2] * 6),
            Interval::interval_lower(a[2] + -a[1] * 2 + l[1] * 2 + s[2] * 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 3 / 2 + s[3] * 5 / 2 + -a[2] * 3 / 2 + -a[0] * 1 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 1 + a[3] + a[2] + -s[1] * 1),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[3] + -s[2] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[3] * 3 + -s[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= l[2] * 1 / 2 + -a[2] * 1 / 2 + s[1] * 3 / 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_upper(-l[2] * 1 + a[3] + a[2] + -s[1] * 1),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 1 / 4 + -a[2] * 1 / 4 + -a[0] * 1 + s[1] * 5 / 4 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 1 / 4 + -a[2] * 1 / 4 + -a[0] * 1 + s[1] * 5 / 4 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_upper(-l[2] * 1 + a[3] + a[2] + -s[1] * 1),
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 1 / 4 + -a[2] * 1 / 4 + -a[0] * 1 + s[1] * 5 / 4 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 1 + a[3] + a[2] + -s[1] * 1),
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 1 / 3 + -a[2] * 1 / 3 + -a[1] * 1 + s[2] * 4 / 3 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 1 + a[3] + a[2] + -s[1] * 1),
            Interval::interval_lower(a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[2] + s[3] * 5 / 4 + -s[0] * 1 / 4 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 4 / 3),
            Interval::interval_lower(
                RealNumRep::new(5, 1)
                    + l[2]
                    + s[3] * 4 / 3
                    + -a[0] * 1 / 3
                    + loss_rate_tol
                    + l[0] * 1 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + l[2] + s[3]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] + s[3] * 2 + -a[2] * 1 + -s[2] * 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] + a[2] + -s[2] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 3 / 2 + s[3] * 5 / 2 + -a[2] * 3 / 2 + -a[0] * 1 + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 3 + a[3] + -a[0] * 1 / 3 + loss_rate_tol + l[0] * 1 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-25, 1) <= -a[2] * 1 + s[0] + l[2]))
        || (!(RealNumRep::new(-20, 1) <= -l[1] * 1 + a[1] + -a[2] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[2] + -a[1] * 1 + l[1] + -l[2] * 1),
            Interval::interval_lower(l[2] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(a[2] + -a[0] * 5 + s[1] * 5 + l[0] * 5),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + l[0] * 2),
            Interval::interval_lower(l[2] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0]),
            Interval::interval_lower(a[2] + -a[0] * 5 + s[1] * 5 + l[0] * 5),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 3 / 2 + s[3] * 5 / 2 + -a[2] * 3 / 2 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[2] + -a[1] * 1 + l[1] + -l[2] * 1),
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + a[3] + -a[2] * 1 + s[1] + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(15, 1) + s[3] + a[3] + -a[2] * 1 + l[2]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(25, 1) + -l[1] * 1 + a[1] + a[3] + -a[2] * 1 + l[2],
            ),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(30, 1) + a[3] + -a[2] * 1 + s[0] + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + l[2] + s[0]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2]),
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] + s[3] * 2 + -a[2] * 1 + -s[2] * 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3] + -a[1] * 1 + s[1] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(a[2] + s[1] * 5 / 2 + -s[0] * 5 / 2),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2]))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_upper(-l[2] * 1 + a[3] + a[2] + -s[1] * 1),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -s[1] * 4 / 3),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 1 / 2 + -a[2] * 1 / 2 + s[1] * 3 / 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= l[2] * 1 / 3 + -a[2] * 1 / 3 + s[2] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= l[2] * 1 / 2 + s[3] * 1 / 2 + -a[2] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + l[2] + s[3]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[2] + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -a[1] * 1 / 3 + -a[0] * 1 + s[1] * 4 / 3 + l[1] * 1 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                l[2] + a[1] + -a[0] * 3 + s[1] * 3 + -l[1] * 1 + loss_rate_tol + l[0] * 3,
            ),
            Interval::interval_lower(
                a[2] + a[1] + -a[0] * 2 + s[1] + -l[1] * 1 + loss_rate_tol + l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + -a[0] * 1 + s[2] * 2 + l[1] + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[2] + s[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (-s[3] * 1 + a[3] + -a[2] * 1 + a[1] + -l[1] * 1 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + s[3] * 3 + -a[2] * 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[2] + s[2]),
            Interval::interval_lower(RealNumRep::new(15, 1) + l[2] + s[2] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 1 / 4 + -a[2] * 1 / 4 + -a[0] * 1 + s[1] * 5 / 4 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 3 + a[3] + -a[0] * 1 / 3 + l[0] * 1 / 3),
            Interval::interval_lower(s[3] * 2 + a[3] + -a[2] * 1 + -a[0] * 1 + l[2] + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] * 5 + s[3] * 5 + -a[2] * 4),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[2] * 2 + s[3] * 2 + -a[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(a[3] + -a[2] * 1 + s[1] * 7 / 2 + -s[0] * 5 / 2 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[1] * 1 + s[1] * 3 + -s[0] * 2 + l[1]),
            Interval::interval_lower(a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(-5, 1) <= -a[3] * 1 + a[2]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + s[1]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3] + -a[2] * 1 + s[2] + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + s[1]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + a[2]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[2] * 2 + s[3] * 2 + -a[2] * 1 + a[1] + -s[2] * 1 + -l[1] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 3 + -a[1] * 2 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[2] + s[3] * 3 / 2 + a[1] + -s[2] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(-5, 1) <= -a[3] * 1 + a[2]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + s[1]),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[2] + s[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(10, 1) + s[3] + a[3] + -a[1] * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= l[2] * 1 / 4 + -a[2] * 1 / 4 + s[1] * 1 / 4)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[1] * 1 + s[2] + l[1]),
            Interval::interval_lower(l[1] * 4 + -a[1] * 4 + a[3] + -a[2] * 1 + s[2] * 5 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 4 / 3),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(-5, 1) <= -a[3] * 1 + a[2]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + l[2] + s[0]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(20, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + a[1] + -l[1] * 1),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[2] + s[0] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] * 5 + s[3] * 5 + -a[2] * 4),
            Interval::interval_lower(s[3] + a[3] + -a[2] * 1 + l[2] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 1 / 4 + -a[2] * 1 / 4 + -a[0] * 1 + s[1] * 5 / 4 + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= s[3] + a[2] + -a[1] * 2 + l[1] * 2 + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[2] + s[3] * 3 / 2 + -a[3] * 1 + -s[0] * 1 / 2))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[2] + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3 + loss_rate_tol,
            ),
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 3 / 2 + s[3] * 5 / 2 + -a[2] * 3 / 2 + -a[0] * 1 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1)
                    + a[3]
                    + -a[0] * 1 / 2
                    + s[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 4 + s[0] * 1 / 4 + l[1] * 1 / 4)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + a[3] + -a[1] * 1 + s[0] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(-5, 1) <= -a[3] * 1 + a[2]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + s[1]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + a[1] + -s[2] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + -a[1] * 2 + s[2] * 3 + l[1] * 2 + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-s[3] * 1 / 2 + a[3] + a[2] * 1 / 2 + -l[2] * 1 / 2),
            Interval::interval_lower(s[3] * 5 / 2 + a[3] + -a[2] * 1 + -s[2] * 3 / 2 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0]),
            Interval::interval_lower(a[3] + -a[2] * 1 + -a[0] * 5 + s[1] * 6 + l[2] + l[0] * 5),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 4 + a[3] + -s[0] * 1 / 4),
            Interval::interval_lower(s[3] * 7 / 4 + a[3] + -a[2] * 1 + -s[0] * 3 / 4 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-l[2] * 1 / 2 + -s[3] * 1 + a[3] * 1 / 2 + s[1] * 1 / 2 <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + loss_rate_tol + l[0]),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + -a[1] * 5 + l[1] * 5 + s[2] * 6),
            Interval::interval_lower(a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol),
            Interval::interval_lower(a[3] + -a[1] * 4 + s[2] * 4 + l[1] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                l[2] + a[3] + -a[2] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + -a[0] * 1 / 2 + s[2] * 1 / 2 + loss_rate_tol + l[0] * 1 / 2,
            ),
            Interval::interval_lower(a[3] + -a[2] * 1 + -a[0] * 2 + s[2] * 3 + l[2] + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 2 / 3 + -a[2] * 2 / 3 + -a[0] * 1 + s[2] * 5 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[0] * 1 / 2 + s[2] * 1 / 2 + loss_rate_tol + l[0] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 2 + s[2] * 1 / 2 + l[1] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 4 + a[3] + -s[0] * 1 / 4 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 3 + -a[1] * 2 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] + a[3] + -a[2] * 1 + l[2] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 3 / 2 + s[3] * 5 / 2 + -a[2] * 3 / 2 + -a[0] * 1 + l[0]))
        || (RealNumRep::new(0, 1) <= l[2] + s[3] * 3 / 2 + -a[3] * 1 + -s[0] * 1 / 2))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + loss_rate_tol + l[0]),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-25, 1) <= -a[2] * 1 + s[0] + l[2]))
        || (!(RealNumRep::new(-20, 1) <= -l[1] * 1 + a[1] + -a[2] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[2] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + l[2] * 2 + s[3] * 2 + -a[2] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 1 / 2 + -a[2] * 1 / 2 + s[1] * 3 / 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(-5, 1) <= -a[3] * 1 + a[2]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + s[1]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + -s[3] * 1 + a[3] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_upper(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(35, 1) + l[2] + s[0]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 3 + a[3] + -s[1] * 1 / 3 + loss_rate_tol),
            Interval::interval_lower(s[3] * 2 + a[3] + -a[2] * 1 + -s[1] * 1 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= l[2] * 1 / 4 + -a[2] * 1 / 4 + s[1] * 1 / 4)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[2] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[3] + -s[2] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(s[3] * 2 + a[3] + -a[1] * 1 + -s[2] * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(a[3] + -a[2] * 1 + s[2] * 3 + -s[1] * 2 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[3] + -a[1] * 1 + s[2] + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= s[3] + a[2] + -a[1] * 2 + l[1] * 2 + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(15, 2)
                + l[2]
                + s[3] * 3 / 2
                + -a[1] * 1 / 2
                + l[1] * 1 / 2
                + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                l[2] + a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + s[3] * 3 + -a[2] * 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                l[2] + a[3] + -a[2] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 1 / 2 + -a[2] * 1 / 2 + s[1] * 3 / 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 1 / 3 + -a[2] * 1 / 3 + -a[1] * 1 + s[2] * 4 / 3 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[2] + -a[1] * 1 + l[1] + -l[2] * 1),
            Interval::interval_lower(a[2] + -a[1] * 2 + l[1] * 2 + s[2] * 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3),
            Interval::interval_lower(a[3] + -a[2] * 1 + s[2] * 7 / 3 + -s[0] * 4 / 3 + l[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -s[1] * 4 / 3),
            Interval::interval_lower(s[3] * 1 / 3 + a[3] + -s[1] * 1 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= l[2] * 1 / 2 + s[3] * 1 / 2 + -a[2] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 2 + a[3] + -s[2] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + s[3] * 3 + -a[2] * 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 4 + a[3] + -s[0] * 1 / 4 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 1 / 3 + -a[2] * 1 / 3 + -a[1] * 1 + s[2] * 4 / 3 + l[1])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 4 / 3),
            Interval::interval_lower(
                l[2] + s[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 3 + -a[1] * 2 + l[1] * 2),
            Interval::interval_lower(s[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= l[2] * 1 / 3 + -a[2] * 1 / 3 + s[2] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[2] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= l[2] * 1 / 2 + s[3] * 1 / 2 + -a[2] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[2] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(10, 3)
                    + -l[2] * 1 / 3
                    + a[3]
                    + a[2] * 1 / 3
                    + -s[0] * 1 / 3
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + -a[0] * 1 + s[2] * 2 + l[1] + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                l[2] + a[1]
                    + -a[0] * 3 / 2
                    + s[2] * 3 / 2
                    + -l[1] * 1
                    + loss_rate_tol
                    + l[0] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= l[2] * 1 / 3 + -a[2] * 1 / 3 + s[2] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[2] + s[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 4 + -a[1] * 3 + -s[1] * 1 + l[1] * 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 3 + a[3] + -s[1] * 1 / 3 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + s[3] * 3 + -a[2] * 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -s[1] * 4 / 3),
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] * 5 + s[3] * 5 + -a[2] * 4),
            Interval::interval_lower(
                l[2] * 2 + s[3] * 2 + -a[2] * 1 + a[1] + -s[2] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(-5, 1) <= -a[3] * 1 + a[2]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + s[1]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 3 + -s[2] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[2] + s[3] * 3 / 2 + -s[2] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -s[1] * 4 / 3),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[2] + s[3] * 4 / 3 + -s[1] * 1 / 3 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                l[2] + a[3] + -a[2] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                l[2] + a[3] + -a[2] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 3 + -a[1] * 2 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 3 + a[3] + -a[0] * 1 / 3 + loss_rate_tol + l[0] * 1 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] + s[3] * 2 + -a[2] * 1 + -s[2] * 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 2 + a[3] + -s[2] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[2] + -a[1] * 1 + l[1] + -l[2] * 1),
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + -a[3] * 2 + s[2] * 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + l[2] + s[3]),
            Interval::interval_lower(RealNumRep::new(10, 1) + l[2] + s[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1)
                    + a[3]
                    + -a[0] * 1 / 2
                    + s[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
            Interval::interval_lower(l[2] + -a[0] * 5 / 2 + s[2] * 7 / 2 + l[0] * 5 / 2),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[2] + -a[0] * 1 + s[2] * 2 + loss_rate_tol + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(20, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[2] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[2] + s[2]),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[2] + s[0] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + -a[0] * 5 / 2 + s[2] * 7 / 2 + l[0] * 5 / 2),
            Interval::interval_lower(
                a[3] + -a[0] * 1 / 2 + s[2] * 1 / 2 + loss_rate_tol + l[0] * 1 / 2,
            ),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + -a[1] * 5 + l[1] * 5 + s[2] * 6),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
            Interval::interval_lower(a[3] + -a[1] * 4 + s[2] * 4 + l[1] * 4),
            Interval::interval_lower(a[2] + -a[1] * 2 + l[1] * 2 + s[2] * 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 4 + a[3] + -s[0] * 1 / 4 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + -a[0] * 1 + s[2] * 2 + l[1] + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[0] * 1 / 2 + s[2] * 1 / 2 + loss_rate_tol + l[0] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[2] + s[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[2] + s[3]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + s[1]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + a[2]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + l[2] * 2 + s[3] * 2 + -a[2] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(15, 2)
                + l[2]
                + s[3] * 3 / 2
                + -a[1] * 1 / 2
                + l[1] * 1 / 2
                + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + -a[3] * 2 + s[2] * 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 4 + a[3] * 5 + -s[2] * 4),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol,
            ),
            Interval::interval_lower(l[2] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[2] + s[2] * 2 + -s[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 4 + a[3] * 5 + -s[2] * 4),
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(
                l[2] + a[1] + s[2] * 3 / 2 + -s[1] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[2] + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 3 / 2 + s[3] * 5 / 2 + -a[2] * 3 / 2 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 3 + a[3] + -s[1] * 1 / 3 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -s[1] * 4 / 3),
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + s[1]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[2] + s[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= s[3] + a[2] + -a[1] * 2 + l[1] * 2 + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(
                l[2] + a[1] + -a[0] * 3 + s[1] * 3 + -l[1] * 1 + loss_rate_tol + l[0] * 3,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 1 / 3 + -a[2] * 1 / 3 + -a[1] * 1 + s[2] * 4 / 3 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -a[1] * 2 + l[1] * 2 + s[2] * 2 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 2 / 3 + -a[2] * 2 / 3 + -a[0] * 1 + s[2] * 5 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + loss_rate_tol + l[0]),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + -s[3] * 1 + a[3] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= s[3] + -a[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + a[1] + -s[2] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 4 + -a[1] * 3 + -a[0] * 1 + l[1] * 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[2] + s[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 2 + -a[2] * 1 + -a[1] * 1 + l[1] + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 1 / 4 + -a[2] * 1 / 4 + -a[0] * 1 + s[1] * 5 / 4 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] + s[3] * 2 + -a[2] * 1 + -s[2] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 1 / 2 + a[3] + a[2] + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 2 + s[2] * 1 / 2 + l[1] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(l[2] * 2 + s[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(-5, 1)))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 4 + -a[1] * 3 + -s[1] * 1 + l[1] * 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-a[3] * 1 + a[2] + -a[0] * 1 + s[1] + l[0] <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 1 / 2 + -a[3] * 1 / 2 + -a[0] * 1 + s[1] * 3 / 2 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(a[2] + -a[0] * 5 + s[1] * 5 + l[0] * 5),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (l[2] + a[3] + -a[2] * 2 + a[1] * 2 + -s[2] * 1 + -l[1] * 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 3 / 2 + s[3] * 5 / 2 + -a[2] * 3 / 2 + -a[0] * 1 + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 2 / 3 + a[3] + a[2] + -s[0] * 1 / 3 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 2 + -a[2] * 1 + -a[1] * 1 + l[1] + l[2])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + s[3] * 3 + -a[2] * 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol)) || (RealNumRep::new(0, 1) <= -l[2] * 1 + l[1]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 2 / 3 + a[3] + a[2] + -s[0] * 1 / 3 + loss_rate_tol,
            ),
            Interval::interval_upper(
                -l[2] * 1 / 3 + a[3] + a[2] * 1 / 3 + -s[0] * 1 / 3 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 1 / 3 + -a[2] * 1 / 3 + -a[1] * 1 + s[2] * 4 / 3 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 2 / 3 + a[3] + a[2] + -s[0] * 1 / 3 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + -a[1] * 2 + l[1] * 2 + s[2] * 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 3 / 2 + s[3] * 5 / 2 + -a[2] * 3 / 2 + -a[0] * 1 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_upper(-l[2] * 1 + a[3] + a[2] + -s[1] * 1),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= l[2] * 1 / 3 + -a[2] * 1 / 3 + s[2] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(-5, 1) <= -a[3] * 1 + a[2]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + s[1]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -a[1] * 1 / 3 + -a[0] * 1 + s[1] * 4 / 3 + l[1] * 1 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2]))
        || (RealNumRep::new(0, 1) <= l[2] + s[3] * 3 / 2 + -a[3] * 1 + -s[0] * 1 / 2))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 1 / 2 + -a[2] * 1 / 2 + s[1] * 3 / 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(
                -l[2] * 1
                    + -s[3] * 1 / 2
                    + a[3]
                    + a[2]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 1 / 4 + -a[2] * 1 / 4 + -a[0] * 1 + s[1] * 5 / 4 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(
                -l[2] * 1
                    + -s[3] * 1 / 2
                    + a[3]
                    + a[2]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(
                -l[2] * 1
                    + -s[3] * 1 / 2
                    + a[3]
                    + a[2]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 1 / 2 + -a[2] * 1 / 2 + s[1] * 3 / 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1
                    + -s[3] * 1 / 2
                    + a[3]
                    + a[2]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                l[2] + a[1]
                    + -a[0] * 3 / 2
                    + s[2] * 3 / 2
                    + -l[1] * 1
                    + loss_rate_tol
                    + l[0] * 3 / 2,
            ),
            Interval::interval_lower(l[2] + -a[0] * 5 / 2 + s[2] * 7 / 2 + l[0] * 5 / 2),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 3 / 2 + s[3] * 5 / 2 + -a[2] * 3 / 2 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 3 / 2 + s[3] * 5 / 2 + -a[2] * 3 / 2 + -s[1] * 1))
        || (RealNumRep::new(0, 1) <= l[2] + s[3] * 3 / 2 + -a[3] * 1 + -s[0] * 1 / 2))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 4 / 3),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + s[3] * 3 + -a[2] * 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 1 / 2 + a[3] + a[2] + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] + s[3] * 2 + -a[2] * 1 + -s[2] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + s[3] * 3 + -a[2] * 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1
                    + -s[3] * 1 / 2
                    + a[3]
                    + a[2]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 2)
                + s[3] * 1 / 2
                + a[3]
                + -a[1] * 1 / 2
                + l[1] * 1 / 2
                + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -s[1] * 1),
            Interval::interval_lower(
                l[2] + a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[1] * 5 / 2 + -s[0] * 5 / 2),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + -a[0] * 5 / 2 + s[2] * 7 / 2 + l[0] * 5 / 2),
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + loss_rate_tol + l[0]),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(-5, 1) <= -a[3] * 1 + a[2]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(35, 1) + l[2] + s[0]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + a[1] + -l[1] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                l[2] + a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[2] + s[3] * 3 / 2 + -a[3] * 1 + -s[0] * 1 / 2))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 3 / 2 + s[3] * 5 / 2 + -a[2] * 3 / 2 + -a[0] * 1 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                -l[2] * 1
                    + -s[3] * 1 / 2
                    + a[3]
                    + a[2]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 3 + -s[2] * 2),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 2 + a[1] + -s[2] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 3 + -a[1] * 2 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= s[3] * 5 + -a[1] * 4 + -s[0] * 1 + l[1] * 4))
        || (RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_upper(
                l[2] + a[1] + s[2] * 3 / 2 + -s[1] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] + l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(35, 1) + l[2] + s[0]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + a[2]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + s[3] * 3 + -a[2] * 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 4 + s[0] * 1 / 4 + l[1] * 1 / 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 1 / 2 + -a[2] * 1 / 2 + s[1] * 3 / 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1
                    + -s[3] * 1 / 2
                    + a[3]
                    + a[2]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 1 / 2 + -a[2] * 1 / 2 + s[1] * 3 / 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 2 + -a[2] * 1 + -a[1] * 1 + l[1] + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[2] + a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 1 / 3 + -a[2] * 1 / 3 + -a[1] * 1 + s[2] * 4 / 3 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
            Interval::interval_lower(a[2] + -a[1] * 2 + l[1] * 2 + s[2] * 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= s[3] + a[2] + -a[1] * 2 + l[1] * 2 + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                l[2] + a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3 + loss_rate_tol,
            ),
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[2] + s[2] * 5 / 3 + -s[0] * 2 / 3 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + a[1] + s[2] * 3 / 2 + -s[1] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[2] + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 3 + -a[1] * 2 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[2] + s[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + -a[3] * 2 + s[2] * 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 1 / 2 + a[3] + a[2] + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + s[3] * 3 + -a[2] * 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 2 / 3 + a[3] + a[2] + -s[0] * 1 / 3 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1
                    + -s[3] * 1 / 2
                    + a[3]
                    + a[2]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + s[3] * 3 + -a[2] * 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 1 / 2 + a[3] + a[2] + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 2 + -a[2] * 1 + -a[1] * 1 + l[1] + l[2])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 2 + a[3] + -a[1] * 1 / 2 + l[1] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + -a[0] * 1 / 2 + s[2] * 1 / 2 + loss_rate_tol + l[0] * 1 / 2,
            ),
            Interval::interval_lower(
                a[3] + -a[1] * 1 + -a[0] * 3 / 2 + s[2] * 5 / 2 + l[1] + l[0] * 3 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 4 + a[3] + -s[0] * 1 / 4 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                l[2] + a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[3] * 2 + a[2] * 2 + s[1] + -s[0] * 1))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                l[2] + a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(l[2] * 2 + s[3] + -a[2] * 2 + a[1] + -l[1] * 1 <= RealNumRep::new(-5, 1)))
        || (!(RealNumRep::new(0, 1) <= s[3] * 5 + -a[1] * 4 + -s[0] * 1 + l[1] * 4))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 4 + a[3] * 5 + -s[2] * 4),
            Interval::interval_lower(l[2] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 1 / 2 + a[3] + a[2] + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 4 + -a[1] * 3 + -s[1] * 1 + l[1] * 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[2] + s[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(-l[2] * 1 + -s[3] * 1 + a[2] <= RealNumRep::new(-5, 1))))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            l[2] * 2 + s[3] * 2 + -a[2] * 1 + a[1] + -s[2] * 1 + -l[1] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[2] + -a[0] * 5 / 2 + s[2] * 7 / 2 + l[0] * 5 / 2),
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + loss_rate_tol + l[0]),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + -a[0] * 5 / 2 + s[2] * 7 / 2 + l[0] * 5 / 2),
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + loss_rate_tol + l[0]),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + -a[0] * 5 / 2 + s[2] * 7 / 2 + l[0] * 5 / 2),
            Interval::interval_lower(a[2] + -a[0] * 1 + s[2] + loss_rate_tol + l[0]),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
            Interval::interval_lower(
                -l[2] * 1
                    + -s[3] * 1 / 2
                    + a[3]
                    + a[2]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -s[1] * 4 / 3),
            Interval::interval_lower(l[2] + s[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(a[3] + -a[1] * 1 + s[2] * 5 / 2 + -s[1] * 3 / 2 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 3 + -a[1] * 2 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -a[1] * 1 / 3 + -a[0] * 1 + s[1] * 4 / 3 + l[1] * 1 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(
                l[2] + a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 2)
                + s[3] * 1 / 2
                + a[3]
                + -a[1] * 1 / 2
                + l[1] * 1 / 2
                + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= s[3] + a[2] + -a[1] * 2 + l[1] * 2 + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= s[3] + -a[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 4 + -a[1] * 3 + -a[0] * 1 + l[1] * 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 4 + -a[1] * 3 + -a[0] * 1 + l[1] * 3 + l[0]))
        || (RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_upper(
                -l[2] * 1 + a[3] + a[2] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3),
            Interval::interval_lower(a[3] + -a[1] * 1 + s[2] * 2 + -s[0] * 1 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] + l[1])
        || (!(RealNumRep::new(-5, 1) <= -a[3] * 1 + a[2]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(35, 1) + l[2] + s[0]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + a[1] + -s[2] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[2] + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[2] + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[2] + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] + s[3] * 2 + -a[2] * 1 + -s[2] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[2] + a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)
        || (!(RealNumRep::new(0, 1) <= s[3] * 3 + -a[1] * 2 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 4 + a[3] + -s[0] * 1 / 4 + loss_rate_tol),
            Interval::interval_lower(s[3] * 3 / 2 + a[3] + -a[1] * 1 + -s[0] * 1 / 2 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 2 + a[2] * 3 + -a[1] * 2 + l[1] * 2 + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(a[2] + s[1] * 5 / 2 + -s[0] * 5 / 2),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(
                -l[2] * 1
                    + -s[3] * 1 / 2
                    + a[3]
                    + a[2]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(-5, 1) <= -a[3] * 1 + a[2]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + s[1]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[2] + s[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
            Interval::interval_lower(a[2] + s[1] * 5 / 2 + -s[0] * 5 / 2),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(a[2] + s[1] * 5 / 2 + -s[0] * 5 / 2),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[2] + -a[0] * 3 + s[1] * 4 + loss_rate_tol + l[0] * 3,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(a[2] + -a[0] * 5 + s[1] * 5 + l[0] * 5),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[2] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[2] + s[1] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[2] + s[2]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + -a[1] * 5 + l[1] * 5 + s[2] * 6),
            Interval::interval_lower(a[3] + -a[1] * 4 + s[2] * 4 + l[1] * 4),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[2] + -a[1] * 2 + l[1] * 2 + s[2] * 3 + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 3 + a[3] + -s[1] * 1 / 3 + loss_rate_tol),
            Interval::interval_lower(s[3] * 5 / 3 + a[3] + -a[1] * 1 + -s[1] * 2 / 3 + l[1]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 4 + -a[1] * 3 + -a[0] * 1 + l[1] * 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 3 + a[3] + -a[0] * 1 / 3 + loss_rate_tol + l[0] * 1 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 3 + a[3] + -a[0] * 1 / 3 + l[0] * 1 / 3),
            Interval::interval_lower(
                s[3] * 5 / 3 + a[3] + -a[1] * 1 + -a[0] * 2 / 3 + l[1] + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= s[3] + a[2] + -a[1] * 2 + l[1] * 2 + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= s[3] + -a[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[2] + s[2]),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + -s[3] * 1 + a[3] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 1 / 2 + -a[2] * 1 / 2 + s[1] * 3 / 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + -a[3] * 2 + s[2] * 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + a[1] + s[2] * 3 / 2 + -s[1] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(a[2] + s[1] * 5 / 2 + -s[0] * 5 / 2),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[2] + s[3]),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 4 / 3),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= s[3] + -a[1] * 1 + l[1]))
        || (RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= s[3] * 3 + -a[1] * 2 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 2 + a[3] + -s[2] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= s[3] * 5 + -a[1] * 4 + -s[0] * 1 + l[1] * 4))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[3] * 1 / 4 + a[3] + -s[0] * 1 / 4 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -s[1] * 4 / 3),
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= l[2] * 1 / 2 + s[3] * 1 / 2 + -a[2] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + l[2] * 2 + s[3] * 2 + -a[2] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
            Interval::interval_lower(a[2] + s[1] * 5 / 2 + -s[0] * 5 / 2),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= l[2] * 1 / 3 + -a[2] * 1 / 3 + s[2] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 1 + a[3] + a[2] + -s[1] * 1),
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1)
            <= l[2] * 2 / 3 + -a[2] * 2 / 3 + -a[0] * 1 + s[2] * 5 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 1 + a[3] + a[2] + -s[1] * 1),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= l[2] * 1 / 3 + -a[2] * 1 / 3 + s[2] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(a[2] + s[1] * 5 / 2 + -s[0] * 5 / 2),
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 2 / 3 + a[3] + a[2] + -s[0] * 1 / 3 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] * 5 + s[3] * 5 + -a[2] * 4),
            Interval::interval_lower(
                l[2] + s[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[2] + s[3]),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + s[1]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[2] + s[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + a[1] + -s[2] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] * 5 + s[3] * 5 + -a[2] * 4),
            Interval::interval_lower(l[2] + s[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
            Interval::interval_lower(a[2] + -a[0] * 5 + s[1] * 5 + l[0] * 5),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
            Interval::interval_lower(a[2] + -a[0] * 5 + s[1] * 5 + l[0] * 5),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[2] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(a[2] + -a[0] * 5 + s[1] * 5 + l[0] * 5),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= s[3] + -a[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -s[1] * 4 / 3),
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(10, 3)
                    + -l[2] * 1 / 3
                    + a[3]
                    + a[2] * 1 / 3
                    + -s[0] * 1 / 3
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-a[3] * 2 + a[2] * 2 + s[1] + -s[0] * 1 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(10, 3)
                    + -l[2] * 1 / 3
                    + a[3]
                    + a[2] * 1 / 3
                    + -s[0] * 1 / 3
                    + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -a[0] * 4 / 3 + l[0] * 4 / 3),
            Interval::interval_lower(
                s[3] * 2 / 3 + a[2] + -a[0] * 2 / 3 + loss_rate_tol + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                -l[2] * 1
                    + -s[3] * 1 / 2
                    + a[3]
                    + a[2]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] * 5 + s[3] * 5 + -a[2] * 4),
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                l[2] * 4 + s[3] * 3 + -a[2] * 3 + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[2] * 5 + s[3] * 5 + -a[2] * 4),
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] * 4 + s[3] * 3 + -a[2] * 3 + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] * 5 + s[3] * 5 + -a[2] * 4),
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(
                l[2] * 4 + s[3] * 3 + -a[2] * 3 + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + l[2] + s[1] * 5 / 2 + -s[0] * 3 / 2 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[1] * 5 / 2 + -s[0] * 5 / 2),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[2] + s[1] + -s[0] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + s[3] * 3 + -a[2] * 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(-l[2] * 1 + a[3] + a[2] + -s[1] * 1),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 1 / 2 + a[3] + a[2] + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(
                l[2] + s[3] * 3 / 4 + a[1] + -s[0] * 3 / 4 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] + l[1])
        || (!(RealNumRep::new(-5, 1) <= -a[3] * 1 + a[2]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(RealNumRep::new(35, 1) + l[2] + s[0]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] + l[1])
        || (!(RealNumRep::new(-5, 1) <= -a[3] * 1 + a[2]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(35, 1) + l[2] + s[0]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + -a[3] * 2 + s[2] * 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(a[2] + s[1] * 5 / 2 + -s[0] * 5 / 2),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 7 / 3 + -s[1] * 4 / 3),
            Interval::interval_lower(s[3] * 2 / 3 + a[2] + -s[1] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 1 / 2 + a[3] + a[2] + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 2 + s[1] * 2 + loss_rate_tol + l[0] * 2),
            Interval::interval_lower(a[2] + -a[0] * 5 + s[1] * 5 + l[0] * 5),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
            Interval::interval_lower(
                -l[2] * 1
                    + -s[3] * 1 / 2
                    + a[3]
                    + a[2]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= l[2] * 1 / 3 + -a[2] * 1 / 3 + s[2] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(10, 3)
                    + -l[2] * 1 / 3
                    + a[3]
                    + a[2] * 1 / 3
                    + -s[0] * 1 / 3
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 2 / 3 + a[3] + a[2] + -s[0] * 1 / 3 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1
                    + -s[3] * 1 / 2
                    + a[3]
                    + a[2]
                    + -a[0] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] + l[1])
        || (!(RealNumRep::new(-5, 1) <= -a[3] * 1 + a[2]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(35, 1) + l[2] + s[0]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + -s[3] * 1 + a[3] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + s[3] * 3 + -a[2] * 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(10, 3)
                    + -l[2] * 1 / 3
                    + a[3]
                    + a[2] * 1 / 3
                    + -s[0] * 1 / 3
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 1 / 2 + -a[2] * 1 / 2 + s[1] * 3 / 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(10, 3)
                    + -l[2] * 1 / 3
                    + a[3]
                    + a[2] * 1 / 3
                    + -s[0] * 1 / 3
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(
                l[2] + a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 1 / 2 + -a[2] * 1 / 2 + s[1] * 3 / 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 2 / 3 + a[3] + a[2] + -s[0] * 1 / 3 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + s[1]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + a[2]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[2] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[2] + s[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 + s[3] * 3 + -a[2] * 2 + -s[0] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[1] * 5 / 2 + -s[0] * 5 / 2),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] * 2 / 3 + -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 1 / 2 + a[3] + a[2] + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 4 + a[3] * 5 + -s[2] * 4),
            Interval::interval_lower(l[2] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + -l[2] * 1 / 2
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 4 + a[3] * 5 + -s[2] * 4),
            Interval::interval_lower(l[2] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -a[1] * 1 + l[1] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + l[2] + s[0]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(20, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(25, 1) + a[2]),
            Interval::interval_lower(RealNumRep::new(15, 1) + a[2] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(30, 1) + l[2] + a[1] + -l[1] * 1),
            Interval::interval_lower(RealNumRep::new(25, 1) + l[2] + s[0] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[2] + s[3] * 2 + -a[2] * 1 + -s[2] * 1)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + s[3] + a[3] + -a[2] * 1 + l[2] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-l[2] * 1 + a[3] + a[2] + -s[2] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 1 / 2 + a[3] + a[2] + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= s[3] + -a[2] * 1 + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(
                -s[3] * 1 / 3 + a[3] + a[1] + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(
                l[2] + a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[1] * 5 / 2 + -s[0] * 5 / 2),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[1] * 5 / 2 + -s[0] * 5 / 2),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] * 5 + s[3] * 5 + -a[2] * 4),
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] * 4 + s[3] * 3 + -a[2] * 3 + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[2] + s[1] * 4 + -s[0] * 3),
            Interval::interval_lower(l[2] + a[2] + a[1] + -l[1] * 2 + -s[0] * 1 + loss_rate_tol),
            Interval::interval_lower(
                l[2] + a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[1] * 5 / 2 + -s[0] * 5 / 2),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[3] * 2 + -s[0] * 1),
            Interval::interval_lower(s[3] * 1 / 2 + a[2] + -s[0] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(
                -l[2] * 1 + -s[3] * 1 / 2 + a[3] + a[2] + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(l[2] + -a[0] * 6 + s[1] * 7 + l[0] * 6),
            Interval::interval_lower(
                l[2] + a[1] + -a[0] * 3 + s[1] * 3 + -l[1] * 1 + loss_rate_tol + l[0] * 3,
            ),
            Interval::interval_lower(a[2] + -a[0] * 5 + s[1] * 5 + l[0] * 5),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
            Interval::interval_lower(
                a[2] + a[1] + -a[0] * 2 + s[1] + -l[1] * 1 + loss_rate_tol + l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + l[2] + a[1] + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(RealNumRep::new(20, 1) + l[2] + s[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(l[2] + s[2] * 7 / 2 + -s[1] * 5 / 2),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + loss_rate_tol),
            Interval::interval_upper(
                l[2] + a[1] + s[2] * 3 / 2 + -s[1] * 3 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(l[2] + s[2] * 8 / 3 + -s[0] * 5 / 3),
            Interval::interval_lower(a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(
                RealNumRep::new(10, 3)
                    + -l[2] * 1 / 3
                    + a[3]
                    + a[2] * 1 / 3
                    + -s[0] * 1 / 3
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(!(l[2] + s[3] + -a[3] * 1 >= RealNumRep::new(0, 1)));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(0, 1));
    assert!(l[2] + -a[2] * 1 + s[2] <= RealNumRep::new(0, 1));
    ret
}

pub fn compute_a_4_3_t_5_l_4(
    a: &[RealNumRep],
    l: &[RealNumRep],
    s: &[RealNumRep],
    loss_rate_tol: RealNumRep,
) -> IntervalList<RealNumRep> {
    assert!(l.len() == 4);
    let mut ret = IntervalList::new(vec![Interval::new(None, None)]);
    let tmp = IntervalList::new(vec![Interval::interval_lower(a[3])]);
    ret = ret.intersection(&tmp);
    assert!(a[3] >= a[2]);
    assert!(a[2] >= a[1]);
    assert!(a[1] >= a[0]);
    assert!(s[3] >= s[2]);
    assert!(s[2] >= s[1]);
    assert!(s[1] >= s[0]);
    assert!((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)));
    assert!((!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])) || (l[1] == l[0]));
    assert!((l[3] == l[2]) || (-a[3] * 1 + s[3] + l[3] <= RealNumRep::new(-5, 1)));
    assert!((l[2] == l[1]) || (-a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(-5, 1)));
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-s[3] * 1 + s[1] <= RealNumRep::new(-5, 1))
    );
    assert!((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)));
    assert!((l[3] == l[2]) || (-a[3] * 1 + a[2] + -l[2] * 1 + l[3] <= RealNumRep::new(-5, 1)));
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-a[0] * 1 + -s[3] * 1 + s[1] * 2 + l[0] <= RealNumRep::new(0, 1))
    );
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(-5, 1)));
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 1 + -s[3] * 1 + s[1] <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + -a[0] * 2 + s[2] * 2 + -l[1] * 2 + l[3] * 2 + l[0] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + -a[0] * 1 + s[2] + -l[1] * 2 + l[2] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 1 + -s[3] * 1 + s[1] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + a[1] + -a[0] * 1 + s[1] + -l[1] * 1 + l[2] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 1 + s[0] + l[1] <= RealNumRep::new(-10, 1)));
    assert!(
        (l[1] == l[0])
            || (a[3] * 1 / 2 + -a[1] * 3 / 2 + s[0] + l[1] * 3 / 2 + -l[3] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (a[3] + -a[1] * 1 + -s[3] * 2 + s[1] * 2 + l[1] + -l[3] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + s[3] + -s[2] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
            || (-a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 2 + l[3]
                == RealNumRep::new(0, 1))
            || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
    );
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 1 + -s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[1] + -s[0] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + -a[0] * 1 + s[3] + -l[1] * 3 + l[2] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[2] * 2 + -a[1] * 2 + -s[3] * 1 + s[0] + l[1] * 2 + -l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + s[2] + -s[0] * 1 + -l[1] * 3 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (RealNumRep::new(0, 1) <= -a[3] * 1 + a[2] * 2 + -a[1] * 1 + l[1] + -l[2] * 1)
            || (!(l[3] == l[2]))
    );
    assert!(
        (l[2] == l[1])
            || (!(l[1] == l[0]))
            || (a[3] + -a[2] * 2 + a[1] + l[2] * 2 + -l[3] * 1 + -l[0] * 1
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[2] * 2 + -s[1] * 2 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (-a[1] * 1 + s[2] * 1 / 2 + s[0] * 1 / 2 + l[1] <= RealNumRep::new(-5, 1))
    );
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] * 3 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] * 3 + -a[1] * 3 + s[1] + l[1] * 3 + -l[3] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (a[3] + -a[2] * 1 + -s[2] * 1 + s[0] + l[2] + -l[3] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + s[3] + -s[2] * 1 + -l[2] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-s[3] * 2 + s[1] * 3 + -s[0] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (s[3] + -s[2] * 3 + s[0] * 2 <= RealNumRep::new(0, 1))
    );
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (-s[2] * 1 + s[0] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] + s[3] + -l[1] * 1 + l[2] * 2 <= RealNumRep::new(-5, 1))
    );
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] * 2 + -a[1] * 3 + s[2] + l[1] * 3 + -l[2] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 4 + a[1] * 4 + s[3] + -s[0] * 1 + -l[1] * 4 + l[2] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[3] + -a[2] * 2 + s[1] + l[2] * 2 + -l[3] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 1 + -s[2] * 1 + s[0] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[2] + -a[1] * 2 + s[0] + l[1] * 2 + -l[2] * 1 <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[2] * 3 + s[3] + -s[1] * 1 + -l[2] * 3 + l[3] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + -a[0] * 1 + s[1] + -l[1] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
            || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[2] + -s[1] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[3] + -a[2] * 1 + -s[3] * 1 + s[1] + l[2] + -l[3] * 1 <= RealNumRep::new(0, 1))
    );
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= a[3] * 2 + -a[2] * 2 + -a[1] * 2 + s[0] * 2 + l[1] * 2 + l[2] * 2 + -l[3] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] * 2 + -a[2] * 1 + -l[3] * 1 + l[2]),
            Interval::interval_lower(
                a[3] * 6 + -a[2] * 6 + a[1] + -l[1] * 1 + l[2] * 6 + -l[3] * 5,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (a[3] * 2 + -a[2] * 2 + -s[3] * 1 + s[0] + l[2] * 2 + -l[3] * 2
                <= RealNumRep::new(0, 1))
            || (a[3] + -a[2] * 1 + a[1] + -l[1] * 1 + -s[3] * 1 + l[2] + -l[3] * 1
                <= RealNumRep::new(0, 1))
    );
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (RealNumRep::new(0, 1) <= a[3] + -a[2] * 1 + -a[1] * 1 + s[0] + l[2] + -l[3] * 1 + l[0]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] * 2 + -a[2] * 1 + -l[3] * 1 + l[2]),
            Interval::interval_lower(a[3] * 7 + -a[2] * 7 + s[0] + l[2] * 7 + -l[3] * 6),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (a[3] * 1 / 2 + -a[1] * 1 / 2 + -s[2] * 1 + s[0] + l[1] * 1 / 2 + -l[3] * 1 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + -a[0] * 2 + s[1] * 2 + -l[1] * 1 + l[3] + l[0] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[1] * 1 + -l[2] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] + -a[2] * 1 + -a[1] * 1 + -l[3] * 1 + l[2] + s[0] + l[1]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[1] == l[0])
            || (l[3] == l[2])
            || (RealNumRep::new(0, 1)
                <= a[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2 + -l[3] * 1)
    );
    assert!(
        (l[1] == l[0])
            || (l[3] == l[2])
            || (-a[3] * 1 / 2 + -a[1] * 1 / 2 + s[2] + l[1] * 1 / 2 + l[3] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[1] == l[0])
            || (a[3] * 2 + -a[1] * 2 + -s[3] * 2 + s[0] * 2 + l[1] * 2 + -l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 2 + a[1] * 2 + s[3] + -s[2] * 1 + -l[1] * 2 + l[2] * 2
                <= RealNumRep::new(0, 1))
    );
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= a[2] * 2 + -a[1] * 3 + s[2] + l[1] * 3 + -l[2] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + -a[2] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + l[2] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 3 + a[1] * 3 + s[3] + -s[1] * 1 + -l[1] * 3 + l[2] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!((l[1] == l[0]) || (-a[1] * 3 + s[3] + s[0] * 2 + l[1] * 3 <= RealNumRep::new(-15, 1)));
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[1] * 3 + -a[0] * 2 + s[3] * 2 + -l[1] * 3 + l[3] * 3 + l[0] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[1] * 1 + -l[2] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[2] * 2 + a[1] + l[3] * 2 + -l[2] * 2 + -s[0] * 1 + -l[1] * 1
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[1] * 1 + -l[2] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[1] * 1 + -l[2] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (-s[3] * 1 / 2 + s[0] * 1 / 2 <= RealNumRep::new(-5, 1))
            || (RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1])
    );
    if !((l[1] == l[0])
        || (a[3] * 1 / 2 + -s[3] * 1 + s[1] * 1 / 2 + -l[3] * 1 / 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] * 6 + -a[1] * 6 + s[1] + l[1] * 6 + -l[2] * 6 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (a[3] * 1 / 2 + -s[3] * 1 + s[1] * 1 / 2 + -l[3] * 1 / 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] * 3 + -a[1] * 4 + s[1] + l[1] * 4 + -l[2] * 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] * 2 + -a[1] * 3 + s[2] + l[1] * 3 + -l[2] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + a[2] + -a[1] * 1 + l[1] + -l[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] * 2 + -a[2] * 1 + -l[3] * 1 + l[2]),
            Interval::interval_lower(a[3] * 4 + -a[2] * 4 + s[3] + l[2] * 4 + -l[3] * 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + l[3] + -l[2] * 1 + s[1] * 1 / 2 + -s[0] * 1 / 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 4 + a[2] * 4 + s[3] + -s[0] * 1 + -l[2] * 4 + l[3] * 4
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + -a[1] * 1 + l[1] + s[3] + -l[2] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[2] * 3 + s[2] + -s[0] * 1 + -l[2] * 3 + l[3] * 3
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + -a[1] * 1 + l[1] + s[2] + -l[2] * 1 + l[3]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[2] == l[1])
            || (a[3] * 2 + -a[2] * 3 + s[0] + l[2] * 3 + -l[3] * 2 <= RealNumRep::new(-5, 1))
            || (a[3] + -a[2] * 2 + a[1] + -l[1] * 1 + l[2] * 2 + -l[3] * 1
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2
                + a[2] * 2
                + a[1] * 2
                + l[3] * 2
                + -l[2] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[2] * 2 + a[1] + l[3] * 2 + -l[2] * 2 + -s[0] * 1 + -l[1] * 1
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2 + a[2] * 2 + a[1] + l[3] * 2 + -l[2] * 2 + -s[0] * 1 + -l[1] * 1
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
            || (-a[3] * 2
                + a[2] * 2
                + a[1] * 2
                + l[3] * 2
                + -l[2] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] * 2 + -a[1] * 3 + s[2] + l[1] * 3 + -l[2] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[2] * 2 + -a[1] * 1 + -s[3] * 1 + l[1] + -l[2] * 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -a[0] * 1 + -l[1] * 1 + -l[2] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -l[1] * 1 + -s[1] * 1 + -l[2] * 1 + l[3]
                <= RealNumRep::new(0, 1))
    );
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= a[3] * 3 + -a[1] * 5 + s[1] * 2 + l[1] * 5 + -l[3] * 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] * 3 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2 + loss_rate_tol,
            ),
            Interval::interval_upper(a[3] * 3 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] * 4 + -a[1] * 4 + s[3] + l[1] * 4 + -l[2] * 4 + l[3]),
            Interval::interval_lower(a[3] + a[2] * 2 + -a[1] * 1 + -s[3] * 1 + l[1] + -l[2] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (a[3] + -l[3] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] * 7 + -a[1] * 7 + s[0] + l[1] * 7 + -l[2] * 7 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
            || (a[1] + -l[1] * 1 + -s[3] * 1 <= RealNumRep::new(-5, 1))
            || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1]))
    );
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] * 2 + -a[1] * 3 + s[2] + l[1] * 3 + -l[2] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (a[3] + -l[3] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] * 4 + -a[1] * 5 + s[0] + l[1] * 5 + -l[2] * 4)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= a[2] * 2 + -a[1] * 3 + s[2] + l[1] * 3 + -l[2] * 2))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] * 5 + -a[1] * 5 + s[2] + l[1] * 5 + -l[2] * 5 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + -a[0] * 1 + s[1] + -l[2] * 1 + l[3] + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -l[1] * 1 + -s[1] * 1 + -l[2] * 1 + l[3]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[3] + -s[1] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + a[2] + a[1] + -l[1] * 1 + -s[1] * 1 + -l[2] * 1 + l[3]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + -a[0] * 1 / 2 + s[2] * 3 / 2 + l[3] + l[0] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= a[3] * 4 + -a[1] * 6 + s[0] * 2 + l[1] * 6 + -l[3] * 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] * 3 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2 + loss_rate_tol,
            ),
            Interval::interval_upper(a[3] * 3 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= a[3] * 2 + -a[1] * 4 + s[2] * 2 + l[1] * 4 + -l[3] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] * 3 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2 + loss_rate_tol,
            ),
            Interval::interval_upper(a[3] * 3 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[1] == l[0])
            || (-a[2] * 1 + -a[1] * 1 + s[3] + l[2] + s[0] + l[1] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + s[2] + -s[1] * 1 + -l[2] * 2 + l[3] * 2
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 + a[2] * 3 + -a[0] * 1 + s[3] + -l[2] * 3 + l[3] * 3 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 2 + a[2] * 2 + -a[0] * 1 + s[2] + -l[2] * 2 + l[3] * 2 + l[0]
                <= RealNumRep::new(0, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
                <= RealNumRep::new(0, 1))
            || (-a[3] * 2
                + a[2] * 2
                + a[1] * 2
                + l[3] * 2
                + -l[2] * 2
                + -s[2] * 1
                + -s[0] * 1
                + -l[1] * 2
                <= RealNumRep::new(0, 1))
    );
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] * 5 / 2 + -a[1] * 5 / 2 + s[2] + l[1] * 5 / 2 + -l[3] * 3 / 2,
            ),
            Interval::interval_lower(a[3] * 3 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] * 5 + -a[2] * 5 + s[2] + l[2] * 5 + -l[3] * 4),
            Interval::interval_lower(a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= a[3] + -a[1] * 3 + s[3] * 2 + l[1] * 3 + -l[3] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] * 3 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2 + loss_rate_tol,
            ),
            Interval::interval_upper(a[3] * 3 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[1] + l[1]))
        || (!(RealNumRep::new(0, 1)
            <= a[3] * 4 + -a[2] * 5 + a[1] + -l[1] * 1 + l[2] * 5 + -l[3] * 4)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] * 6 + -a[2] * 6 + s[1] + l[2] * 6 + -l[3] * 5),
            Interval::interval_lower(a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= a[3] * 4 + -a[2] * 5 + s[1] + l[2] * 5 + -l[3] * 4)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= a[3] * 3 + -a[2] * 4 + s[2] + l[2] * 4 + -l[3] * 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= a[3] * 2 + -a[2] * 3 + s[3] + l[2] * 3 + -l[3] * 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= a[3] * 5 + -a[2] * 6 + s[0] + l[2] * 6 + -l[3] * 5))
        || (!(RealNumRep::new(0, 1)
            <= a[3] * 4 + -a[2] * 5 + a[1] + -l[1] * 1 + l[2] * 5 + -l[3] * 4)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] * 4 + -a[1] * 5 + s[0] + l[1] * 5 + -l[2] * 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + a[2] + -s[2] * 1 + -l[2] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!((l[3] == l[2]) || (-a[3] * 1 + s[2] + l[3] <= RealNumRep::new(-10, 1)));
    assert!((l[2] == l[1]) || (-a[2] * 1 + s[1] + l[2] <= RealNumRep::new(-10, 1)));
    assert!((l[2] == l[1]) || (-a[2] * 2 + s[3] + s[1] + l[2] * 2 <= RealNumRep::new(-10, 1)));
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 / 2 + a[1] * 1 / 2 + l[3] * 1 / 2 + -l[1] * 1 / 2
                <= RealNumRep::new(-5, 1))
    );
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[1] + -a[0] * 1 + s[3] + -l[1] * 1 + l[3] + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(-a[0] * 4 / 3 + s[3] * 7 / 3 + l[3] + l[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[3]),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[2] + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] * 2 + -a[1] * 3 + s[2] + l[1] * 3 + -l[2] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] * 7 / 2 + -a[1] * 7 / 2 + s[0] + l[1] * 7 / 2 + -l[3] * 5 / 2,
            ),
            Interval::interval_lower(a[3] * 3 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 3 / 2 + a[1] * 3 / 2 + s[2] + -s[0] * 1 + -l[1] * 3 / 2 + l[3] * 3 / 2
            <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 1 + a[1] + s[1] + -s[0] * 1 + -l[1] * 1 + l[3] <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1)
            <= -a[1] * 1 / 3 + -a[0] * 1 + s[1] * 4 / 3 + l[1] * 1 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[1] + -a[0] * 3 + s[1] * 3 + -l[1] * 1 + l[3] + loss_rate_tol + l[0] * 3,
            ),
            Interval::interval_upper(a[3] + a[1] + -s[0] * 1 + -l[1] * 1),
            Interval::interval_lower(
                a[2] + a[1]
                    + -a[0] * 2
                    + -l[2] * 1
                    + s[1]
                    + -l[1] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (!(RealNumRep::new(0, 1) <= -a[2] * 2 + s[1] * 3 + -s[0] * 1 + l[2] * 2))
            || (-a[3] * 1 + a[2] + -l[2] * 1 + s[1] * 1 / 2 + -s[0] * 1 / 2 + l[3]
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
            || (-a[2] * 1 + s[3] + l[2] + -s[2] * 1 + s[0] <= RealNumRep::new(0, 1))
    );
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[0] * 5 / 2 + s[2] * 7 / 2 + l[3] + l[0] * 5 / 2),
            Interval::interval_lower(
                a[3] + -a[0] * 1 / 2 + s[2] * 1 / 2 + loss_rate_tol + l[0] * 1 / 2,
            ),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + s[2] * 4 / 3 + -s[0] * 1 / 3 + l[3] <= RealNumRep::new(-5, 1))
    );
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] * 2 + -a[1] * 2 + s[3] + l[1] * 2 + -l[3] * 1),
            Interval::interval_lower(a[3] * 3 / 2 + -a[1] * 1 / 2 + l[1] * 1 / 2 + -l[3] * 1 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[1] * 3 / 2 + -s[0] * 1 / 2 + l[2] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + -a[1] * 1 + l[1] + s[2] * 2 + l[3] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + -a[0] * 1 + s[1] * 2 + l[2] + l[0] <= RealNumRep::new(-5, 1))
    );
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] + -a[1] * 2 + s[3] + l[1] * 2 + -l[2] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + a[2] + -s[2] * 1 + -l[2] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + s[3] * 2 / 3 + s[0] * 1 / 3 + l[2] <= RealNumRep::new(-5, 1))
            || (-a[2] * 1 + a[1] * 1 / 2 + -l[1] * 1 / 2 + s[3] * 1 / 2 + l[2]
                <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[2] == l[1])
            || (-a[2] * 1 + a[1] + -l[1] * 1 + l[2] <= RealNumRep::new(-10, 1))
            || (-a[2] * 1 + s[0] + l[2] <= RealNumRep::new(-15, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + a[2] + -a[0] * 1 + -l[2] * 1 + s[1] + l[3] + l[0]
                <= RealNumRep::new(-5, 1))
            || (-a[3] * 1 + -a[0] * 2 + s[1] * 3 + l[3] + l[0] * 2 <= RealNumRep::new(-5, 1))
    );
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] * 3 + -a[1] * 3 + s[1] + l[1] * 3 + -l[3] * 2),
            Interval::interval_lower(
                a[3] * 2 + -a[2] * 1 + -a[1] * 1 + l[2] + s[1] + l[1] + -l[3] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[3] * 1 / 2 + -s[3] * 1 + s[1] * 1 / 2 + -l[3] * 1 / 2 <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (-a[3] * 2 + a[1] * 2 + s[3] + -s[0] * 1 + -l[1] * 2 + l[3] * 2
            <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2]) || (!(RealNumRep::new(0, 1) <= loss_rate_tol))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + s[2] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(RealNumRep::new(-5, 1) <= -a[3] * 1 / 3 + s[3] * 1 / 3 + l[3] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(5, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (a[2] + -l[2] * 1 + -s[1] * 3 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
            || (-a[3] * 1 + s[1] * 2 + -s[0] * 1 + l[3] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + s[1] + l[3] <= RealNumRep::new(-15, 1))
            || (-a[3] * 1 + a[2] + l[3] + -l[2] * 1 <= RealNumRep::new(-10, 1))
    );
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[3]),
            Interval::interval_lower(RealNumRep::new(10, 1) + s[3] + l[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((-a[3] * 1 + a[2] + -a[0] * 1 + s[1] + -l[1] * 1 + l[3] + l[0] <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
            Interval::interval_lower(-a[0] * 6 + s[1] * 7 + l[3] + l[0] * 6),
            Interval::interval_lower(
                a[2] + -a[0] * 2 + s[1] * 2 + -l[2] * 1 + l[3] + loss_rate_tol + l[0] * 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[3] * 3 / 4 + s[2] * 7 / 4 + -s[0] * 1 + l[3] * 3 / 4)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] + -a[1] * 2 + s[3] + l[1] * 2 + -l[2] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + s[2] * 3 / 2 + -s[1] * 1 / 2 + l[3] <= RealNumRep::new(-5, 1))
    );
    assert!(
        (l[3] == l[2])
            || (-a[3] * 1 + s[0] + l[3] <= RealNumRep::new(-20, 1))
            || (-a[3] * 1 + a[2] + l[3] + -l[2] * 1 <= RealNumRep::new(-10, 1))
            || (-a[3] * 1 + a[1] + -l[1] * 1 + l[3] <= RealNumRep::new(-15, 1))
    );
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + -a[1] * 2 + s[2] * 3 + l[1] * 2 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= a[3] * 3 + -a[1] * 5 + s[1] * 2 + l[1] * 5 + -l[3] * 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(-5, 1) + a[3] * 2 + -a[2] * 1 + l[2] + -l[3] * 1,
            ),
            Interval::interval_lower(
                a[3] * 2 + -a[2] * 1 + -a[1] * 1 + l[2] + s[1] + l[1] + -l[3] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
            Interval::interval_lower(-a[0] * 6 + s[1] * 7 + l[3] + l[0] * 6),
            Interval::interval_lower(a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0]),
            Interval::interval_lower(a[2] + -a[0] * 5 + -l[2] * 1 + s[1] * 5 + l[3] + l[0] * 5),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -a[3] * 1 / 3 + -a[2] * 1 + s[3] * 4 / 3 + l[2] + l[3] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[2] * 1 + s[3] + l[2] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + -a[0] * 1 + s[2] * 2 + l[1] + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[1] + -a[0] * 3 / 2
                    + s[2] * 3 / 2
                    + -l[1] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 3 / 2,
            ),
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(25, 1) + s[2] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1)
            <= -a[2] * 1 / 4 + -a[0] * 1 + s[1] * 5 / 4 + l[2] * 1 / 4 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[2] + -a[0] * 2 + s[1] * 2 + -l[2] * 1 + l[3] + loss_rate_tol + l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol)) || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[2] + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[0] * 4 / 3 + s[3] * 7 / 3 + l[3] + l[0] * 4 / 3),
            Interval::interval_lower(
                a[2] + -a[0] * 2 / 3
                    + s[3] * 2 / 3
                    + -l[2] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[2] * 4 + l[2] * 4 + s[3] * 5 + l[3]),
            Interval::interval_lower(a[3] + -a[2] * 1 + s[3] + l[2] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 5 / 2 + -s[0] * 5 / 2 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -a[3] * 1 / 2 + -a[0] * 1 + s[2] * 3 / 2 + l[3] * 1 / 2 + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[0] * 1 / 2 + s[2] * 1 / 2 + loss_rate_tol + l[0] * 1 / 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(-25, 1) <= -a[2] * 1 + s[0] + l[2])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[2] + -l[2] * 1 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= -a[3] * 3 / 4 + s[2] * 7 / 4 + -s[0] * 1 + l[3] * 3 / 4))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol)) || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + -a[2] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + l[2] + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 1) + -a[2] * 1 + l[2] + s[3] * 2 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(-a[2] * 4 + l[2] * 4 + s[3] * 5 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(a[3] + s[3] * 1 / 4 + -s[0] * 1 / 4 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(30, 1) + a[1] + -l[1] * 1 + l[3]),
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[3]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[2] + l[3] + -l[2] * 1),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (a[2] + -l[2] * 1 + -s[0] * 1 <= RealNumRep::new(10, 1))
        || (RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[3]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + -a[0] * 1 + s[2] * 2 + l[1] + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + -a[0] * 1 + s[3] + -l[1] * 1 + l[3] + loss_rate_tol + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (a[3] + -l[3] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (RealNumRep::new(0, 1) <= a[2] + -s[2] * 2 + -l[2] * 1 + s[0]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1)
            <= -a[2] * 3 / 2 + -a[0] * 1 + s[3] * 5 / 2 + l[2] * 3 / 2 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (RealNumRep::new(0, 1) <= a[2] + -s[2] * 2 + -l[2] * 1 + s[0]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[2] + -a[0] * 2 / 3
                    + s[3] * 2 / 3
                    + -l[2] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)
        || (!(RealNumRep::new(-20, 1) <= -a[3] * 1 + s[2] + l[3])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_upper(RealNumRep::new(5, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -a[3] * 1 / 4 + -a[1] * 1 + s[2] * 5 / 4 + l[1] + l[3] * 1 / 4)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + a[2] + -l[2] * 1 + l[3]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 + s[3] * 3 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[2] * 2 + s[1] * 3 + -s[0] * 1 + l[2] * 2))
        || (!(RealNumRep::new(0, 1) <= -a[3] * 1 + a[2] + -l[2] * 1 + s[1] * 2 + -s[0] * 2 + l[3])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + -a[0] * 1 / 3 + s[3] * 1 / 3 + loss_rate_tol + l[0] * 1 / 3,
            ),
            Interval::interval_lower(-a[0] * 4 / 3 + s[3] * 7 / 3 + l[3] + l[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1)
            <= -a[2] * 2 / 3 + -a[0] * 1 + s[2] * 5 / 3 + l[2] * 2 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(
                a[2] + -a[0] * 1 + s[2] + -l[2] * 1 + l[3] + loss_rate_tol + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= a[3] * 2 + -a[2] * 3 + s[3] + l[2] * 3 + -l[3] * 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + s[3] + -s[2] * 1 + -l[2] * 1 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 3 + -s[2] * 2 + l[3]),
            Interval::interval_lower(a[2] * 2 + -s[3] * 1 + -l[2] * 2 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] * 2 + -s[2] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + s[3] + -s[2] * 1 + -l[2] * 1 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol)) || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(25, 1) + s[2] + l[3]),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[2] + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] * 2 + -s[3] * 1 + -l[3] * 1),
            Interval::interval_lower(-a[0] * 5 / 2 + s[2] * 7 / 2 + l[3] + l[0] * 5 / 2),
            Interval::interval_lower(
                a[2] + -a[0] * 1 + s[2] + -l[2] * 1 + l[3] + loss_rate_tol + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(-5, 1) <= -a[2] * 1 / 3 + s[2] * 1 / 3 + l[2] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[2] + -l[2] * 1 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[2] + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[1] + s[2] * 3 / 2 + -s[1] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 + s[3] * 3 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 + s[3] * 3 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + s[3] + -s[1] * 1 + -l[1] * 1 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + l[0]),
            Interval::interval_lower(
                a[1] + -a[0] * 3 + s[1] * 3 + -l[1] * 1 + l[3] + loss_rate_tol + l[0] * 3,
            ),
            Interval::interval_lower(-a[0] * 6 + s[1] * 7 + l[3] + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 5 + -l[2] * 1 + s[1] * 5 + l[3] + l[0] * 5),
            Interval::interval_lower(
                a[2] + a[1]
                    + -a[0] * 2
                    + -l[2] * 1
                    + s[1]
                    + -l[1] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 7 / 3 + -s[1] * 4 / 3 + l[3]),
            Interval::interval_lower(
                a[2] + s[3] * 2 / 3 + -s[1] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= -a[3] * 2 + -a[0] * 1 + s[2] * 3 + l[3] * 2 + l[0]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[1] + -a[0] * 3 / 2
                    + s[2] * 3 / 2
                    + -l[1] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 3 / 2,
            ),
            Interval::interval_lower(-a[0] * 5 / 2 + s[2] * 7 / 2 + l[3] + l[0] * 5 / 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[1] + s[3] * 3 / 2 + -s[2] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(s[3] * 3 + -s[2] * 2 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[1] + -a[0] * 3 + s[1] * 3 + -l[1] * 1 + l[3] + loss_rate_tol + l[0] * 3,
            ),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
            Interval::interval_lower(-a[0] * 6 + s[1] * 7 + l[3] + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 5 + -l[2] * 1 + s[1] * 5 + l[3] + l[0] * 5),
            Interval::interval_lower(
                a[2] + a[1]
                    + -a[0] * 2
                    + -l[2] * 1
                    + s[1]
                    + -l[1] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 + s[3] * 3 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + -a[0] * 1 + s[2] * 2 + l[1] + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[1] * 5 + l[1] * 5 + s[2] * 6 + l[3]),
            Interval::interval_lower(a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= -a[2] * 2 + s[1] * 3 + -s[0] * 1 + l[2] * 2)
        || (!(RealNumRep::new(0, 1) <= -a[3] * 1 + s[1] * 7 / 2 + -s[0] * 5 / 2 + l[3])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[1] * 2 + l[1] * 3 + s[3] * 3 + l[3] + -l[0] * 1),
            Interval::interval_lower(
                a[3] + -a[1] * 1 / 2 + l[1] * 1 / 2 + s[3] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[3] * 1 / 2 + -s[3] * 1 + s[1] * 1 / 2 + -l[3] * 1 / 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1)
            <= -a[2] * 1 / 4 + -a[0] * 1 + s[1] * 5 / 4 + l[2] * 1 / 4 + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + -a[0] * 2 + s[1] * 2 + -l[2] * 1 + l[3] + loss_rate_tol + l[0] * 2,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1)
            <= -a[2] * 3 / 2 + -a[0] * 1 + s[3] * 5 / 2 + l[2] * 3 / 2 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[2] + -s[2] * 1 + -l[2] * 1 + loss_rate_tol),
            Interval::interval_upper(-a[0] * 4 / 3 + s[3] * 7 / 3 + l[3] + l[0] * 4 / 3),
            Interval::interval_lower(
                a[2] + -a[0] * 2 / 3
                    + s[3] * 2 / 3
                    + -l[2] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(a[2] * 2 + -s[3] * 1 + -l[2] * 2 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (-a[2] * 1 + a[1] <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + a[2] + -l[2] * 1 + l[3]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 + s[3] * 3 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -a[1] * 1 / 3 + -a[0] * 1 + s[1] * 4 / 3 + l[1] * 1 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[1] + -a[0] * 3 + s[1] * 3 + -l[1] * 1 + l[3] + loss_rate_tol + l[0] * 3,
            ),
            Interval::interval_lower(
                a[2] + a[1]
                    + -a[0] * 2
                    + -l[2] * 1
                    + s[1]
                    + -l[1] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 + s[3] * 3 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + s[3] * 3 / 2 + -s[2] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -a[3] * 2 / 3 + -a[1] * 1 + s[3] * 5 / 3 + l[1] + l[3] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[1] * 1 / 2 + l[1] * 1 / 2 + s[3] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[1] * 2 + l[1] * 3 + s[3] * 3 + l[3] + -l[0] * 1),
            Interval::interval_lower(
                a[2] + -a[1] * 1 + s[3] + l[1] + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[1] * 2 + l[1] * 3 + s[3] * 3 + l[3] + -l[0] * 1),
            Interval::interval_lower(
                RealNumRep::new(5, 1)
                    + -a[1] * 1 / 2
                    + s[3] * 3 / 2
                    + l[1] * 1 / 2
                    + l[3]
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[1] + s[2] * 3 / 2 + -s[1] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(s[2] * 7 / 2 + -s[1] * 5 / 2 + l[3]),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[3] * 1 / 2 + s[2] * 3 / 2 + -s[1] * 1 + l[3] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2),
            Interval::interval_lower(s[2] * 7 / 2 + -s[1] * 5 / 2 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-25, 1) <= -a[3] * 1 + s[1] + l[3]))
        || (!(RealNumRep::new(-5, 1)
            <= -a[3] * 1 / 4 + a[2] * 1 / 4 + -l[2] * 1 / 4 + l[3] * 1 / 4)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + a[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= l[2] + -l[3] * 1)
        || (!(RealNumRep::new(-30, 1) <= -a[3] * 1 + s[0] + l[3]))
        || (!(RealNumRep::new(-50, 1) <= -a[3] * 2 + a[1] * 2 + -l[1] * 2 + l[3] * 2))
        || (!(RealNumRep::new(-5, 1)
            <= -a[3] * 1 / 4 + a[2] * 1 / 4 + -l[2] * 1 / 4 + l[3] * 1 / 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(5, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + a[2] + -l[2] * 1 + l[3]),
            Interval::interval_lower(RealNumRep::new(30, 1) + a[1] + -l[1] * 1 + l[3]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[3] * 2 / 3 + s[3] * 5 / 3 + -s[2] * 1 + l[3] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[3] * 1 / 2 + -s[2] * 1 / 2 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 + s[3] * 3 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + -a[0] * 1 + s[3] + -l[1] * 1 + l[3] + loss_rate_tol + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -a[3] * 1 + a[2] + -a[0] * 4 + -l[2] * 1 + s[1] * 4 + l[3] + l[0] * 4))
        || (!(RealNumRep::new(0, 1) <= -a[3] * 1 + -a[0] * 5 + s[1] * 6 + l[3] + l[0] * 5)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1)
            <= -a[2] * 3 / 2 + -a[0] * 1 + s[3] * 5 / 2 + l[2] * 3 / 2 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[2] + -s[2] * 1 + -l[2] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[2] + -a[0] * 2 / 3
                    + s[3] * 2 / 3
                    + -l[2] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (RealNumRep::new(0, 1) <= a[2] + -s[2] * 2 + -l[2] * 1 + s[0]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + a[1] + -s[2] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + -a[1] * 1 + s[3] * 2 + l[1] + l[2])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + -a[1] * 1 + s[3] + l[1] + -l[2] * 1 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(-5, 1) <= -a[2] * 1 / 4 + s[1] * 1 / 4 + l[2] * 1 / 4)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[2] + -l[2] * 1 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(-5, 1) <= -a[2] * 1 / 3 + s[2] * 1 / 3 + l[2] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 3)
                    + a[3]
                    + a[2] * 1 / 3
                    + -s[0] * 1 / 3
                    + -l[2] * 1 / 3
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[3] + -l[3] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 / 2 + s[1] * 3 / 2 + -s[0] * 1 + l[2] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((a[3] + -l[3] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 7 / 3 + -s[1] * 4 / 3 + l[3]),
            Interval::interval_lower(a[3] + s[3] * 1 / 3 + -s[1] * 1 / 3 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 3 + -s[2] * 2 + l[3]),
            Interval::interval_lower(a[3] + s[3] * 1 / 2 + -s[2] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 + -a[0] * 1 + s[3] * 4 + l[1] * 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + -a[0] * 1 + s[3] + -l[1] * 1 + l[3] + loss_rate_tol + l[0],
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[3] * 1 + -a[0] * 1 + s[3] * 2 + l[3] + l[0])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[0] * 1 / 3 + s[3] * 1 / 3 + loss_rate_tol + l[0] * 1 / 3,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + a[2] + -l[2] * 1 + l[3]),
            Interval::interval_lower(RealNumRep::new(30, 1) + a[1] + -l[1] * 1 + l[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + s[0] + l[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[3]),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[2] + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(20, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1)
            <= -a[2] * 1 / 3 + -a[1] * 1 + s[2] * 4 / 3 + l[1] + l[2] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(
                a[2] + -a[1] * 2 + s[2] * 2 + l[1] * 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + a[2] + -l[2] * 1 + l[3]),
            Interval::interval_lower(RealNumRep::new(20, 1) + s[1] + l[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[3]),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[2] + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[2] * 7 / 2 + -s[1] * 5 / 2 + l[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol),
            Interval::interval_lower(s[2] * 7 / 2 + -s[1] * 5 / 2 + l[3]),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[3] * 4 / 3 + s[3] * 7 / 3 + -s[0] * 1 + l[3] * 4 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[3] * 1 / 4 + -s[0] * 1 / 4 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 3)
                    + a[3]
                    + a[2] * 1 / 3
                    + -s[0] * 1 / 3
                    + -l[2] * 1 / 3
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[3] + -l[3] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(a[3] + -l[3] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1)))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[2] + -s[2] * 1 + -l[2] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[2] + -a[0] * 2 + s[1] * 2 + -l[2] * 1 + l[3] + loss_rate_tol + l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[3] == l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[3] * 1 + s[3] * 2 + -s[1] * 1 + l[3])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + s[3] * 1 / 3 + -s[1] * 1 / 3 + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[2] + -s[2] * 1 + -l[2] * 1 + loss_rate_tol),
            Interval::interval_lower(-a[1] * 5 + l[1] * 5 + s[2] * 6 + l[3]),
            Interval::interval_lower(
                a[2] + -a[1] * 2 + s[2] * 2 + l[1] * 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + -a[1] * 4 + s[2] * 4 + l[1] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(-5, 1) <= -a[2] * 1 / 2 + s[3] * 1 / 2 + l[2] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[2] + -l[2] * 1 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + -a[2] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + l[2] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1)
            <= -a[2] * 1 / 4 + -a[0] * 1 + s[1] * 5 / 4 + l[2] * 1 / 4 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(
                a[2] + -a[0] * 2 + s[1] * 2 + -l[2] * 1 + l[3] + loss_rate_tol + l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(-5, 1) <= -a[2] * 1 / 4 + s[1] * 1 / 4 + l[2] * 1 / 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + -a[0] * 2 + s[1] * 2 + -l[2] * 1 + l[3] + loss_rate_tol + l[0] * 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[1] * 5 + l[1] * 5 + s[2] * 6 + l[3]),
            Interval::interval_lower(a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol),
            Interval::interval_lower(a[3] + -a[1] * 4 + s[2] * 4 + l[1] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1 + l[2] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[2] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1 + l[2] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] * 2 + -s[2] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(a[3] + a[2] + -s[2] * 1 + -l[2] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + s[2] + l[3]),
            Interval::interval_lower(RealNumRep::new(15, 1) + s[2] + l[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + s[3] + -s[1] * 1 + -l[1] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(s[3] * 7 / 3 + -s[1] * 4 / 3 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 / 2 + s[1] * 3 / 2 + -s[0] * 1 + l[2] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[2] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + -a[2] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + l[2] + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 3 / 2 + s[3] * 5 / 2 + -s[1] * 1 + l[2] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[2] + -s[2] * 1 + -l[2] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[2] + s[3] * 2 / 3 + -s[1] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[2] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1)
            <= -a[2] * 1 / 4 + -a[0] * 1 + s[1] * 5 / 4 + l[2] * 1 / 4 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[2]
                    + -a[0] * 1 / 2
                    + -s[3] * 1 / 2
                    + -l[2] * 1
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[3] + -l[3] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
        || (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(5, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(25, 1) + s[2] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[3] * 2 + -a[0] * 1 + s[2] * 3 + l[3] * 2 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[3] + a[1] + -s[3] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[3] * 1 / 2 + -s[3] * 1 + s[1] * 1 / 2 + -l[3] * 1 / 2 <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1)
            <= -a[2] * 1 / 4 + -a[0] * 1 + s[1] * 5 / 4 + l[2] * 1 / 4 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + -a[0] * 2 + s[1] * 2 + -l[2] * 1 + l[3] + loss_rate_tol + l[0] * 2,
            ),
            Interval::interval_lower(
                a[3] + a[2]
                    + -a[0] * 1 / 2
                    + -s[3] * 1 / 2
                    + -l[2] * 1
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + -a[2] * 1 + a[1] * 2 + -s[0] * 1 + -l[1] * 2 + l[2] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol)) || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[2] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1)
            <= -a[2] * 2 / 3 + -a[0] * 1 + s[2] * 5 / 3 + l[2] * 2 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + -a[0] * 2 / 3
                    + s[3] * 2 / 3
                    + -l[2] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(-5, 1) <= -a[2] * 1 / 3 + s[2] * 1 / 3 + l[2] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + -a[0] * 2 / 3
                    + s[3] * 2 / 3
                    + -l[2] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1)
            <= -a[2] * 2 / 3 + -a[0] * 1 + s[2] * 5 / 3 + l[2] * 2 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + -a[0] * 1 + s[2] + -l[2] * 1 + l[3] + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(
                a[3] + a[2]
                    + -a[0] * 1 / 2
                    + -s[3] * 1 / 2
                    + -l[2] * 1
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1)
            <= -a[2] * 2 / 3 + -a[0] * 1 + s[2] * 5 / 3 + l[2] * 2 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[2] + -a[0] * 1 + s[2] + -l[2] * 1 + l[3] + loss_rate_tol + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1 + l[2] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[2]
                    + -a[0] * 1 / 2
                    + -s[3] * 1 / 2
                    + -l[2] * 1
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 3 / 2 + s[3] * 5 / 2 + -s[1] * 1 + l[2] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 3)
                    + a[3]
                    + a[2] * 1 / 3
                    + -s[0] * 1 / 3
                    + -l[2] * 1 / 3
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 2 + s[3] * 3 + -s[0] * 1 + l[2] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[2] + -s[2] * 1 + -l[2] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[2] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 / 2 + s[1] * 3 / 2 + -s[0] * 1 + l[2] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(10, 3)
                    + a[3]
                    + a[2] * 1 / 3
                    + -s[0] * 1 / 3
                    + -l[2] * 1 / 3
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 + s[3] * 4 + -s[1] * 1 + l[1] * 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[1] + s[3] + -s[1] * 1 + -l[1] * 1 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + -a[0] * 1 + s[1] * 2 + l[2] + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
            Interval::interval_lower(a[2] + -a[0] * 5 + -l[2] * 1 + s[1] * 5 + l[3] + l[0] * 5),
            Interval::interval_lower(
                RealNumRep::new(5, 1)
                    + a[2]
                    + -a[0] * 2
                    + -l[2] * 1
                    + s[1] * 2
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(-25, 1) <= -a[2] * 1 + s[0] + l[2]))
        || (!(RealNumRep::new(-20, 1) <= -a[2] * 1 + a[1] + -l[1] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + a[2] + -l[2] * 1 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol)) || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[2] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[2] * 1 + loss_rate_tol,
            ),
            Interval::interval_upper(
                a[3] + a[2] * 1 / 3 + l[3] * 2 / 3 + -s[0] * 1 / 3 + -l[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 3 / 2 + s[3] * 5 / 2 + -s[1] * 1 + l[2] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + s[3] * 2 / 3 + -s[1] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[2] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1)
            <= -a[2] * 2 / 3 + -a[0] * 1 + s[2] * 5 / 3 + l[2] * 2 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + -a[0] * 2 / 3
                    + s[3] * 2 / 3
                    + -l[2] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                a[3] + a[2]
                    + -a[0] * 1 / 2
                    + -s[3] * 1 / 2
                    + -l[2] * 1
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 3 / 2 + s[3] * 5 / 2 + -s[1] * 1 + l[2] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[2] + s[3] * 2 / 3 + -s[1] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 3 / 2 + s[3] * 5 / 2 + -s[1] * 1 + l[2] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + s[3] * 2 / 3 + -s[1] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 3 / 2 + s[3] * 5 / 2 + -s[1] * 1 + l[2] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(
                a[2] + -a[0] * 2 / 3
                    + s[3] * 2 / 3
                    + -l[2] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 3 / 2 + s[3] * 5 / 2 + -s[1] * 1 + l[2] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[2] + -a[0] * 2 / 3
                    + s[3] * 2 / 3
                    + -l[2] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(5, 1) + -a[2] * 1 + l[2] + s[3] * 2 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0]) || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1]))) {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[3] + a[1] + -s[0] * 1 + -l[1] * 1),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + -a[2] * 1 + l[2] + s[3] * 2 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 + s[3] * 3 + -s[2] * 1 + l[1] * 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            -a[2] * 1 + a[1] + l[2] + s[3] * 2 + -s[2] * 1 + -l[1] * 1 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -a[1] * 1 / 3 + -a[0] * 1 + s[1] * 4 / 3 + l[1] * 1 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[3] + a[1] + -s[3] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + s[2] + l[3]),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[2] + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 2 / 3 + s[2] * 5 / 3 + -s[1] * 1 + l[2] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 + s[3] + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_upper(a[3] + a[1] + -s[0] * 1 + -l[1] * 1),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 2 + s[3] * 3 + -s[0] * 1 + l[2] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[2]
                    + -a[0] * 1 / 2
                    + -s[3] * 1 / 2
                    + -l[2] * 1
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[2]
                    + -a[0] * 1 / 2
                    + -s[3] * 1 / 2
                    + -l[2] * 1
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[0] * 5 / 2 + s[2] * 7 / 2 + l[3] + l[0] * 5 / 2),
            Interval::interval_lower(
                a[2] + -a[0] * 1 + s[2] + -l[2] * 1 + l[3] + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
            Interval::interval_lower(
                a[3] + a[2]
                    + -a[0] * 1 / 2
                    + -s[3] * 1 / 2
                    + -l[2] * 1
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (a[3] + -l[3] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 4 + s[0] * 1 / 4 + l[1] * 1 / 4)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (a[3] + -l[3] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 2 + s[2] * 1 / 2 + l[1] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 2 + s[2] * 1 / 2 + l[1] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[3] + -l[3] * 1 + -s[3] * 3 / 2 + s[0] * 1 / 2 <= RealNumRep::new(0, 1))
        || (a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(5, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3 + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 2 / 3 + s[1] * 5 / 3 + -s[0] * 1 + l[1] * 2 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 4 + s[3] * 5 + -s[0] * 1 + l[1] * 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 5 / 2 + -s[0] * 5 / 2 + l[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + s[1] * 5 / 2 + -s[0] * 3 / 2 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[2] + -l[2] * 1 + s[1] + -s[0] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 2 + s[3] * 3 + -s[0] * 1 + l[2] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= -a[3] * 1 + -a[1] * 1 + s[3] * 2 + l[1] + l[3]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 7 / 3 + -s[1] * 4 / 3 + l[3]),
            Interval::interval_lower(
                a[2] + s[3] * 2 / 3 + -s[1] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 3 + -s[2] * 2 + l[3]),
            Interval::interval_lower(a[2] + s[3] + -s[2] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 + s[3] + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(a[2] + -a[1] * 1 + -s[3] * 1 + s[2] + l[1] + -l[2] * 1 <= RealNumRep::new(0, 1)))
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[1] * 5 + l[1] * 5 + s[2] * 6 + l[3]),
            Interval::interval_lower(a[3] + -a[1] * 4 + s[2] * 4 + l[1] * 4),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + -a[1] * 2 + l[1] * 2 + s[2] * 3 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(15, 2)
                + -a[1] * 1 / 2
                + s[3] * 3 / 2
                + l[1] * 1 / 2
                + l[3]
                + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + -a[1] * 2 + s[2] * 3 + l[1] * 2 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[3] + -a[1] * 1 + s[2] + l[1] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= a[2] * 2 + -a[1] * 3 + s[2] + l[1] * 3 + -l[2] * 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[3] + a[1] + -s[0] * 1 + -l[1] * 1),
            Interval::interval_lower(a[3] + -a[2] * 1 + s[3] + l[2] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 2 + s[2] * 1 / 2 + l[1] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            a[3] + -a[2] * 1 + s[3] + l[2] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= -a[1] * 4 + s[3] * 5 + -s[0] * 1 + l[1] * 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(a[3] + a[1] + -s[0] * 1 + -l[1] * 1),
            Interval::interval_lower(a[3] + -a[2] * 1 + s[3] + l[2] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1)
            <= -a[2] * 2 / 3 + -a[0] * 1 + s[2] * 5 / 3 + l[2] * 2 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + -a[0] * 1 + s[2] + -l[2] * 1 + l[3] + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1)
            <= -a[2] * 2 / 3 + -a[0] * 1 + s[2] * 5 / 3 + l[2] * 2 / 3 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + -a[0] * 2 + s[1] * 2 + -l[2] * 1 + l[3] + loss_rate_tol + l[0] * 2,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 / 2 + s[1] * 3 / 2 + -s[0] * 1 + l[2] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[3] * 2 + -a[0] * 1 + s[2] * 3 + l[3] * 2 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[2] == l[1])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[2] * 3 / 2 + s[3] * 5 / 2 + -s[1] * 1 + l[2] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(10, 1) + -a[2] * 1 + s[3] * 2 + l[2] + l[3] + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(a[3] + a[2] + -s[2] * 1 + -l[2] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 3)
                    + a[3]
                    + a[2] * 1 / 3
                    + -s[0] * 1 / 3
                    + -l[2] * 1 / 3
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 5 / 2 + -s[0] * 5 / 2 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 + s[3] + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + l[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(RealNumRep::new(0, 1) <= -l[1] * 1 + l[0]) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_upper(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_upper(a[3] + a[1] + -s[0] * 1 + -l[1] * 1),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 5 / 2 + -s[0] * 5 / 2 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 2 + s[2] * 1 / 2 + l[1] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 4 + s[0] * 1 / 4 + l[1] * 1 / 4)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 5 / 2 + -s[0] * 5 / 2 + l[3]),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[2]
                    + -a[0] * 1 / 2
                    + -s[3] * 1 / 2
                    + -l[2] * 1
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 / 2 + s[1] * 3 / 2 + -s[0] * 1 + l[2] * 1 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(25, 1) + s[2] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 3 / 2 + s[3] * 5 / 2 + -s[1] * 1 + l[2] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(
                a[2] + s[3] * 2 / 3 + -s[1] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(s[3] * 7 / 3 + -s[1] * 4 / 3 + l[3]),
            Interval::interval_lower(
                a[2] + s[3] * 2 / 3 + -s[1] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 5 / 2 + -s[0] * 5 / 2 + l[3]),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[2] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[0] * 4 / 3 + s[3] * 7 / 3 + l[3] + l[0] * 4 / 3),
            Interval::interval_lower(
                a[2] + -a[0] * 2 / 3
                    + s[3] * 2 / 3
                    + -l[2] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2 / 3,
            ),
            Interval::interval_lower(
                a[3] + a[2]
                    + -a[0] * 1 / 2
                    + -s[3] * 1 / 2
                    + -l[2] * 1
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[0] * 5 / 2 + s[2] * 7 / 2 + l[3] + l[0] * 5 / 2),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + -a[0] * 1 + s[2] * 2 + l[3] + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 1)
                    + a[3]
                    + -a[0] * 1 / 2
                    + s[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((l[1] == l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 3 / 2 + s[2] * 5 / 2 + -s[0] * 1 + l[1] * 3 / 2)))
    {
        let tmp = IntervalList::new(vec![Interval::interval_lower(
            RealNumRep::new(15, 2)
                + -a[1] * 1 / 2
                + s[3] * 3 / 2
                + l[1] * 1 / 2
                + l[3]
                + loss_rate_tol,
        )]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[1] * 1 + s[2] * 2 + -s[1] * 1 + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)
        || (!(RealNumRep::new(0, 1) <= -a[2] * 1 + s[2] * 2 + -s[0] * 1 + l[2])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= a[2] + -a[1] * 2 + s[3] + l[1] * 2 + -l[2] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] * 3 + -a[1] * 2 + l[1] * 2 + -l[2] * 3 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 / 3 + s[1] * 1 / 3 + l[1] * 1 / 3)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(30, 1) + a[1] + -l[1] * 1 + l[3]),
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[3]),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[2] + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1)
            <= -a[3] * 1 + a[2] + -l[2] * 1 + s[1] * 1 / 2 + -s[0] * 1 / 2 + l[3]))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 + s[3] + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 + s[3] + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -l[1] * 1 + l[0])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-5, 1) <= -a[1] * 1 + s[3] + l[1])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(-a[0] * 4 / 3 + s[3] * 7 / 3 + l[3] + l[0] * 4 / 3),
            Interval::interval_lower(
                a[2] + -a[0] * 2 / 3
                    + s[3] * 2 / 3
                    + -l[2] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 3)
                    + a[3]
                    + a[2] * 1 / 3
                    + -s[0] * 1 / 3
                    + -l[2] * 1 / 3
                    + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[0] * 5 / 2 + s[2] * 7 / 2 + l[3] + l[0] * 5 / 2),
            Interval::interval_lower(
                a[2] + -a[0] * 1 + s[2] + -l[2] * 1 + l[3] + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[1] + -a[0] * 1 + s[3] + -l[1] * 1 + l[3] + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(-a[2] * 4 + l[2] * 4 + s[3] * 5 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + s[3] + -s[1] * 1 + -l[1] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(-a[2] * 4 + l[2] * 4 + s[3] * 5 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[3] + -l[3] * 1 + -s[0] * 1 <= RealNumRep::new(15, 1))
        || (a[2] + -l[2] * 1 + -s[0] * 1 <= RealNumRep::new(10, 1))
        || (RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(15, 1) + a[1] + l[3] + -l[0] * 1),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[3] + a[1] + -s[3] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[3]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(
                a[3] + a[2] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(
                a[3] + a[2] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(
                a[3] + a[2]
                    + -a[0] * 1 / 2
                    + -s[3] * 1 / 2
                    + -l[2] * 1
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
            Interval::interval_lower(-a[0] * 6 + s[1] * 7 + l[3] + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 5 + -l[2] * 1 + s[1] * 5 + l[3] + l[0] * 5),
            Interval::interval_lower(
                a[2] + -a[0] * 2 + s[1] * 2 + -l[2] * 1 + l[3] + loss_rate_tol + l[0] * 2,
            ),
            Interval::interval_lower(
                a[3] + a[2]
                    + -a[0] * 1 / 2
                    + -s[3] * 1 / 2
                    + -l[2] * 1
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[3] + a[1] + -s[3] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(25, 1) + s[2] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(-15, 1) <= -a[3] * 1 + s[0] + l[3])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(10, 1) + a[3] + a[1] + -s[3] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 7 / 3 + -s[1] * 4 / 3 + l[3]),
            Interval::interval_lower(
                a[2] + s[3] * 2 / 3 + -s[1] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[2] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + a[1] + -s[2] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[3] + -l[3] * 1 + -s[0] * 1 <= RealNumRep::new(15, 1))
        || (a[2] + -l[2] * 1 + -s[0] * 1 <= RealNumRep::new(10, 1))
        || (RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_upper(RealNumRep::new(15, 1) + a[1] + l[3] + -l[0] * 1),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (-a[3] * 1 + a[2] <= RealNumRep::new(-5, 1))
        || (!(RealNumRep::new(-15, 1) <= -a[3] * 1 + s[0] + l[3])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(25, 1) + s[2] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 5 / 2 + -s[0] * 5 / 2 + l[3]),
            Interval::interval_lower(a[3] + s[1] * 1 / 2 + -s[0] * 1 / 2 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[2] * 4 + l[2] * 4 + s[3] * 5 + l[3]),
            Interval::interval_lower(
                -a[2] * 1 + a[1] + l[2] + s[3] * 2 + -s[2] * 1 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 3 + -s[2] * 2 + l[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + s[3] * 3 / 2 + -s[2] * 1 / 2 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (RealNumRep::new(0, 1) <= -a[2] * 1 + -a[0] * 1 + s[1] * 2 + l[2] + l[0]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + -a[0] * 3 + s[1] * 4 + l[3] + loss_rate_tol + l[0] * 3,
            ),
            Interval::interval_lower(-a[0] * 6 + s[1] * 7 + l[3] + l[0] * 6),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + -a[0] * 1 + s[1] + loss_rate_tol + l[0],
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(25, 1) + s[2] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(25, 1) + s[2] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + s[2] * 5 / 3 + -s[0] * 2 / 3 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + s[2] * 1 / 3 + -s[0] * 1 / 3 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(-a[1] * 5 + l[1] * 5 + s[2] * 6 + l[3]),
            Interval::interval_lower(
                a[2] + -a[1] * 2 + s[2] * 2 + l[1] * 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + -a[1] * 4 + s[2] * 4 + l[1] * 4),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= -a[3] * 2 + -a[0] * 1 + s[2] * 3 + l[3] * 2 + l[0])))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[2] + -l[1] * 2 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
            Interval::interval_lower(-a[0] * 6 + s[1] * 7 + l[3] + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 5 + -l[2] * 1 + s[1] * 5 + l[3] + l[0] * 5),
            Interval::interval_lower(
                a[2] + -a[0] * 2 + s[1] * 2 + -l[2] * 1 + l[3] + loss_rate_tol + l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[2] + -s[3] * 2 / 3 + -s[0] * 1 / 3 + -l[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(-a[0] * 4 / 3 + s[3] * 7 / 3 + l[3] + l[0] * 4 / 3),
            Interval::interval_lower(
                a[2] + -a[0] * 2 / 3
                    + s[3] * 2 / 3
                    + -l[2] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[2] + -s[2] * 1 + -l[2] * 1 + loss_rate_tol),
            Interval::interval_lower(-a[0] * 4 / 3 + s[3] * 7 / 3 + l[3] + l[0] * 4 / 3),
            Interval::interval_lower(
                a[2] + -a[0] * 2 / 3
                    + s[3] * 2 / 3
                    + -l[2] * 1
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 2 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[2] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[2] * 7 / 2 + -s[1] * 5 / 2 + l[3]),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
            Interval::interval_lower(
                a[3] + a[2] + -s[3] * 1 / 2 + -s[1] * 1 / 2 + -l[2] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((RealNumRep::new(0, 1) <= -a[2] * 1 + s[3] + l[2])
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[3] * 1 / 3 + -s[0] * 2 / 3 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(20, 1) + s[3] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(0, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (-a[3] * 1 + a[2] <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[1] + -s[2] * 1 + -l[1] * 1 <= RealNumRep::new(5, 1))
        || (!(RealNumRep::new(0, 1) <= loss_rate_tol)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + a[1] + -s[2] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 7 / 3 + -s[1] * 4 / 3 + l[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + s[3] * 4 / 3 + -s[1] * 1 / 3 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[2] * 7 / 2 + -s[1] * 5 / 2 + l[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + s[2] * 2 + -s[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + s[2] * 1 / 2 + -s[1] * 1 / 2 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(-a[0] * 4 / 3 + s[3] * 7 / 3 + l[3] + l[0] * 4 / 3),
            Interval::interval_lower(
                RealNumRep::new(5, 1)
                    + -a[0] * 1 / 3
                    + s[3] * 4 / 3
                    + l[3]
                    + loss_rate_tol
                    + l[0] * 1 / 3,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 5 / 2 + -s[0] * 5 / 2 + l[3]),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(10, 3)
                    + a[3]
                    + a[2] * 1 / 3
                    + -s[0] * 1 / 3
                    + -l[2] * 1 / 3
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 5 / 2 + -s[0] * 5 / 2 + l[3]),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 5 / 2 + -s[0] * 5 / 2 + l[3]),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(a[3] + a[2] + -s[2] * 1 + -l[2] * 1 + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (!(RealNumRep::new(0, 1) <= l[1] + -l[2] * 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[2] + -l[1] * 2 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 5 / 2 + -s[0] * 5 / 2 + l[3]),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
            Interval::interval_lower(-a[0] * 6 + s[1] * 7 + l[3] + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 5 + -l[2] * 1 + s[1] * 5 + l[3] + l[0] * 5),
            Interval::interval_lower(a[3] + a[2] + -s[2] * 1 + -l[2] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[2] + -a[0] * 2 + s[1] * 2 + -l[2] * 1 + l[3] + loss_rate_tol + l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + s[3] * 5 / 4 + -s[0] * 1 / 4 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[3] + -l[3] * 1 + -s[0] * 1 <= RealNumRep::new(15, 1))
        || (a[2] + -l[2] * 1 + -s[0] * 1 <= RealNumRep::new(10, 1))
        || (RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(5, 1) + a[3] + -l[2] * 1 + l[3]),
            Interval::interval_lower(RealNumRep::new(5, 1) + a[3] + loss_rate_tol),
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[1] + s[2] + -s[0] * 1 + -l[1] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (-a[3] * 1 + a[2] <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (-a[3] * 1 + a[2] <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(RealNumRep::new(25, 1) + a[2] + -l[2] * 1 + l[3]),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[3]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(-a[0] * 5 / 2 + s[2] * 7 / 2 + l[3] + l[0] * 5 / 2),
            Interval::interval_lower(
                a[2] + -a[0] * 1 + s[2] + -l[2] * 1 + l[3] + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 7 / 3 + -s[1] * 4 / 3 + l[3]),
            Interval::interval_lower(
                a[2] + s[3] * 2 / 3 + -s[1] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[2] + -s[2] * 1 + -l[2] * 1 + loss_rate_tol),
            Interval::interval_lower(s[3] * 7 / 3 + -s[1] * 4 / 3 + l[3]),
            Interval::interval_lower(
                a[2] + s[3] * 2 / 3 + -s[1] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(25, 1) + s[2] + l[3]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(-a[2] * 4 + l[2] * 4 + s[3] * 5 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -a[0] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol
                    + l[0] * 1 / 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[2] + s[3] * 1 / 2 + -s[0] * 1 / 2 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[3] + -a[0] * 4 + s[1] * 4 + l[0] * 4),
            Interval::interval_lower(-a[0] * 6 + s[1] * 7 + l[3] + l[0] * 6),
            Interval::interval_lower(a[2] + -a[0] * 5 + -l[2] * 1 + s[1] * 5 + l[3] + l[0] * 5),
            Interval::interval_lower(
                a[2] + -a[0] * 2 + s[1] * 2 + -l[2] * 1 + l[3] + loss_rate_tol + l[0] * 2,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(s[2] * 7 / 2 + -s[1] * 5 / 2 + l[3]),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[3] + a[2] + -a[1] * 1 + l[3] * 2 + -l[2] * 3 + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(s[2] * 7 / 2 + -s[1] * 5 / 2 + l[3]),
            Interval::interval_lower(a[2] + s[2] + -s[1] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
            Interval::interval_lower(a[3] + s[2] * 2 + -s[1] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[2] * 1 / 2
                    + -s[1] * 1 / 2
                    + -l[2] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((a[3] + -l[3] * 1 + -s[0] * 1 <= RealNumRep::new(15, 1))
        || (a[2] + -l[2] * 1 + -s[0] * 1 <= RealNumRep::new(10, 1))
        || (RealNumRep::new(-5, 1) <= -a[1] * 1 + s[0] + l[1]))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_upper(RealNumRep::new(15, 1) + a[1] + l[3] + -l[0] * 1),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(35, 1) + s[0] + l[3]),
            Interval::interval_lower(RealNumRep::new(10, 1) + a[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (-a[3] * 1 + a[2] <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !((!(RealNumRep::new(0, 1) <= loss_rate_tol))
        || (-a[3] * 1 + a[2] <= RealNumRep::new(-5, 1)))
    {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(RealNumRep::new(20, 1) + a[3]),
            Interval::interval_lower(
                RealNumRep::new(15, 1) + a[1] + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(RealNumRep::new(30, 1) + s[1] + l[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 1) + a[3] + a[1] + -s[2] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(-a[0] * 5 / 2 + s[2] * 7 / 2 + l[3] + l[0] * 5 / 2),
            Interval::interval_lower(
                a[2] + -a[0] * 1 + s[2] + -l[2] * 1 + l[3] + loss_rate_tol + l[0],
            ),
            Interval::interval_lower(a[3] + -a[0] * 2 + s[2] * 2 + l[0] * 2),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(s[3] * 2 + -s[0] * 1 + l[3]),
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(
                a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(-a[2] * 4 + l[2] * 4 + s[3] * 5 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(
                a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(-a[2] * 4 + l[2] * 4 + s[3] * 5 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(
                RealNumRep::new(5, 2)
                    + a[3]
                    + a[1] * 1 / 2
                    + -s[0] * 1 / 2
                    + -l[1] * 1 / 2
                    + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 5 / 2 + -s[0] * 5 / 2 + l[3]),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 5 / 2 + -s[0] * 5 / 2 + l[3]),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + a[1] + -a[0] * 1 + -l[1] * 1 + loss_rate_tol + l[0]),
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(
                a[1] + s[1] * 3 / 2 + -s[0] * 3 / 2 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 5 / 2 + -s[0] * 5 / 2 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(
                a[2] + a[1] + l[3] + -l[2] * 1 + -s[0] * 1 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(
                a[1] + s[3] * 3 / 4 + -s[0] * 3 / 4 + -l[1] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(-a[2] * 4 + l[2] * 4 + s[3] * 5 + l[3]),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + s[1] * 2 + -s[0] * 2),
            Interval::interval_lower(s[1] * 4 + -s[0] * 3 + l[3]),
            Interval::interval_lower(
                a[3] + a[1] + -s[2] * 1 / 2 + -s[0] * 1 / 2 + -l[1] * 1 + loss_rate_tol,
            ),
            Interval::interval_lower(a[2] + -l[2] * 1 + s[1] * 5 / 2 + -s[0] * 5 / 2 + l[3]),
            Interval::interval_lower(a[2] + s[1] + -s[0] * 1 + -l[2] * 1 + l[3] + loss_rate_tol),
        ]);
        ret = ret.intersection(&tmp);
    }
    if !(!(RealNumRep::new(0, 1) <= loss_rate_tol)) {
        let tmp = IntervalList::new(vec![
            Interval::interval_lower(a[3] + a[1] + -s[1] * 1 + -l[1] * 1 + loss_rate_tol),
            Interval::interval_lower(s[2] * 8 / 3 + -s[0] * 5 / 3 + l[3]),
            Interval::interval_lower(
                a[2] + s[2] * 2 / 3 + -s[0] * 2 / 3 + -l[2] * 1 + l[3] + loss_rate_tol,
            ),
            Interval::interval_lower(a[3] + s[2] * 4 / 3 + -s[0] * 4 / 3),
        ]);
        ret = ret.intersection(&tmp);
    }
    assert!(l[0] >= RealNumRep::new(0, 1));
    assert!(-a[0] * 1 + s[0] + l[0] <= RealNumRep::new(0, 1));
    assert!(-a[2] * 1 + s[2] + l[2] <= RealNumRep::new(0, 1));
    assert!(-a[3] * 1 + l[3] + s[3] <= RealNumRep::new(0, 1));
    assert!(-a[1] * 1 + s[1] + l[1] <= RealNumRep::new(0, 1));
    ret
}

lazy_static! {
    pub static ref COMPUTE_C: HashMap<(i32, i32), QeFun> = HashMap::from([
        ((5, 1), compute_c_t_5_l_1 as QeFun),
        ((5, 2), compute_c_t_5_l_2 as QeFun),
        ((5, 3), compute_c_t_5_l_3 as QeFun),
        ((5, 4), compute_c_t_5_l_4 as QeFun),
        ((5, 5), compute_c_t_5_l_5 as QeFun),
    ]);
    pub static ref COMPUTE_B: HashMap<(i32, i32), QeFun> = HashMap::from([
        ((5, 1), compute_b_t_5_l_1 as QeFun),
        ((5, 2), compute_b_t_5_l_2 as QeFun),
        ((5, 3), compute_b_t_5_l_3 as QeFun),
        ((5, 4), compute_b_t_5_l_4 as QeFun),
        ((5, 5), compute_b_t_5_l_5 as QeFun),
    ]);
    pub static ref COMPUTE_Q_4: HashMap<(i32, i32), QeFun> = HashMap::from([
        ((5, 1), compute_q_4_t_5_l_1 as QeFun),
        ((5, 2), compute_q_4_t_5_l_2 as QeFun),
        ((5, 3), compute_q_4_t_5_l_3 as QeFun),
        ((5, 4), compute_q_4_t_5_l_4 as QeFun),
        ((5, 5), compute_q_4_t_5_l_5 as QeFun),
    ]);
    pub static ref COMPUTE_S_4: HashMap<(i32, i32), QeFun> = HashMap::from([
        ((5, 1), compute_s_4_t_5_l_1 as QeFun),
        ((5, 2), compute_s_4_t_5_l_2 as QeFun),
        ((5, 3), compute_s_4_t_5_l_3 as QeFun),
        ((5, 4), compute_s_4_t_5_l_4 as QeFun),
        ((5, 5), compute_s_4_t_5_l_5 as QeFun),
    ]);
    pub static ref COMPUTE_SIM_S_4: HashMap<(i32, i32), QeFunSim> = HashMap::from([
        ((5, 1), compute_sim_s_4_t_5_l_1 as QeFunSim),
        ((5, 2), compute_sim_s_4_t_5_l_2 as QeFunSim),
        ((5, 3), compute_sim_s_4_t_5_l_3 as QeFunSim),
        ((5, 4), compute_sim_s_4_t_5_l_4 as QeFunSim),
        ((5, 5), compute_sim_s_4_t_5_l_5 as QeFunSim),
    ]);
    pub static ref COMPUTE_L_1: HashMap<(i32, i32), QeFun> =
        HashMap::from([((5, 1), compute_l_1_t_5_l_1 as QeFun),]);
    pub static ref COMPUTE_SIM_L_1: HashMap<(i32, i32), QeFunSim> =
        HashMap::from([((5, 1), compute_sim_l_1_t_5_l_1 as QeFunSim),]);
    pub static ref COMPUTE_L_2: HashMap<(i32, i32), QeFun> =
        HashMap::from([((5, 2), compute_l_2_t_5_l_2 as QeFun),]);
    pub static ref COMPUTE_SIM_L_2: HashMap<(i32, i32), QeFunSim> =
        HashMap::from([((5, 2), compute_sim_l_2_t_5_l_2 as QeFunSim),]);
    pub static ref COMPUTE_L_3: HashMap<(i32, i32), QeFun> =
        HashMap::from([((5, 3), compute_l_3_t_5_l_3 as QeFun),]);
    pub static ref COMPUTE_SIM_L_3: HashMap<(i32, i32), QeFunSim> =
        HashMap::from([((5, 3), compute_sim_l_3_t_5_l_3 as QeFunSim),]);
    pub static ref COMPUTE_L_4: HashMap<(i32, i32), QeFun> =
        HashMap::from([((5, 4), compute_l_4_t_5_l_4 as QeFun),]);
    pub static ref COMPUTE_SIM_L_4: HashMap<(i32, i32), QeFunSim> =
        HashMap::from([((5, 4), compute_sim_l_4_t_5_l_4 as QeFunSim),]);
    pub static ref COMPUTE_A_4_3: HashMap<(i32, i32), QeFunRate> = HashMap::from([
        ((5, 1), compute_a_4_3_t_5_l_1 as QeFunRate),
        ((5, 2), compute_a_4_3_t_5_l_2 as QeFunRate),
        ((5, 3), compute_a_4_3_t_5_l_3 as QeFunRate),
        ((5, 4), compute_a_4_3_t_5_l_4 as QeFunRate),
    ]);
}
