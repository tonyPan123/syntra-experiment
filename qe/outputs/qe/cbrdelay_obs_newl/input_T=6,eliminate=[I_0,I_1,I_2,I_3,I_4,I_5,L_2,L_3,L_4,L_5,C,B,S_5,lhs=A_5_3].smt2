; benchmark generated from python API
(set-info :status unknown)
(declare-fun S_4 () Real)
(declare-fun L_1 () Real)
(declare-fun A_1 () Real)
(declare-fun A_2 () Real)
(declare-fun A_5 () Real)
(declare-fun loss_rate_tol () Real)
(declare-fun A_4 () Real)
(declare-fun A_3 () Real)
(declare-fun A_0 () Real)
(declare-fun S_3 () Real)
(declare-fun S_2 () Real)
(declare-fun S_1 () Real)
(declare-fun S_0 () Real)
(declare-fun L_0 () Real)
(declare-fun a () Real)
(assert
 (exists ((I_0 Real) (I_1 Real) (I_2 Real) (I_3 Real) (I_4 Real) (I_5 Real) (L_2 Real) (L_3 Real) (L_4 Real) (L_5 Real) (C Real) (B Real) (S_5 Real) )(let ((?x100 (- A_1 L_1)))
 (let (($x148 (<= ?x100 S_4)))
 (let (($x180 (and (<= (- L_5 L_4) loss_rate_tol) (<= (- (- A_5 L_5) I_5) (* C 3.0)))))
 (let (($x146 (>= A_5 A_4)))
 (let (($x145 (>= A_4 A_3)))
 (let (($x144 (>= A_3 A_2)))
 (let (($x143 (>= A_2 A_1)))
 (let (($x142 (>= A_1 A_0)))
 (let (($x137 (>= S_4 S_3)))
 (let (($x134 (>= S_3 S_2)))
 (let (($x131 (>= S_2 S_1)))
 (let (($x128 (>= S_1 S_0)))
 (let ((?x175 (- A_5 L_5)))
 (let ((?x194 (* C 1.0)))
 (let ((?x197 (+ I_4 ?x194)))
 (let (($x205 (= I_4 (ite (< (+ I_3 ?x194) (- A_4 L_4)) (+ I_3 ?x194) (- A_4 L_4)))))
 (let (($x210 (= I_3 (ite (< (+ I_2 ?x194) (- A_3 L_3)) (+ I_2 ?x194) (- A_3 L_3)))))
 (let (($x214 (= I_2 (ite (< (+ I_1 ?x194) (- A_2 L_2)) (+ I_1 ?x194) (- A_2 L_2)))))
 (let (($x219 (= L_5 L_4)))
 (let (($x224 (=> (not (> (- (- A_5 L_4) I_5) B)) $x219)))
 (let (($x222 (> (- (- A_5 L_4) I_5) B)))
 (let (($x228 (=> $x222 (= L_5 (- (- A_5 I_5) B)))))
 (let (($x229 (= L_4 L_3)))
 (let (($x234 (=> (not (> (- (- A_4 L_3) I_4) B)) $x229)))
 (let (($x232 (> (- (- A_4 L_3) I_4) B)))
 (let (($x238 (=> $x232 (= L_4 (- (- A_4 I_4) B)))))
 (let (($x239 (= L_3 L_2)))
 (let (($x244 (=> (not (> (- (- A_3 L_2) I_3) B)) $x239)))
 (let (($x242 (> (- (- A_3 L_2) I_3) B)))
 (let (($x248 (=> $x242 (= L_3 (- (- A_3 I_3) B)))))
 (let (($x249 (= L_2 L_1)))
 (let (($x253 (=> (not (> (- (- A_2 L_1) I_2) B)) $x249)))
 (let (($x251 (> (- (- A_2 L_1) I_2) B)))
 (let (($x257 (=> $x251 (= L_2 (- (- A_2 I_2) B)))))
 (let (($x56 (= L_1 L_0)))
 (let (($x261 (=> (not (> (- (- A_1 L_0) I_1) B)) $x56)))
 (let (($x259 (> (- (- A_1 L_0) I_1) B)))
 (let (($x265 (=> $x259 (= L_1 (- (- A_1 I_1) B)))))
 (let (($x47 (= a 1.0)))
 (let (($x39 (>= L_0 0.0)))
 (and $x39 (<= I_0 (- A_0 L_0)) (>= C (* 5.0 a)) (>= B (* 5.0 a)) $x47 $x265 $x261 $x257 $x253 $x248 $x244 $x238 $x234 $x228 $x224 $x265 $x261 $x257 $x253 $x248 $x244 $x238 $x234 $x228 $x224 (= I_1 (ite (< (+ I_0 ?x194) ?x100) (+ I_0 ?x194) ?x100)) $x214 $x210 $x205 (= I_5 (ite (< ?x197 ?x175) ?x197 ?x175)) (>= S_0 (- I_0 ?x194)) (<= S_0 I_0) (>= S_1 I_0) $x128 (<= S_1 I_1) (>= S_2 I_1) $x131 (<= S_2 I_2) (>= S_3 I_2) $x134 (<= S_3 I_3) (>= S_4 I_3) $x137 (<= S_4 I_4) (>= S_5 I_4) (>= S_5 S_4) (<= S_5 I_5) $x142 $x143 $x144 $x145 $x146 (not $x180) (> (- A_2 L_2) S_4) $x148))))))))))))))))))))))))))))))))))))))))))
 )
(check-sat)
