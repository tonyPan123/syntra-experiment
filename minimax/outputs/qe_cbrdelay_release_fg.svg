<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="13319"><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="0.0150%" y="181" width="0.0150%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="2"/><text x="0.2650%" y="191.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (19 samples, 0.14%)</title><rect x="0.0300%" y="181" width="0.1427%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="19"/><text x="0.2800%" y="191.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (14 samples, 0.11%)</title><rect x="0.0676%" y="165" width="0.1051%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="14"/><text x="0.3176%" y="175.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (4 samples, 0.03%)</title><rect x="0.2102%" y="165" width="0.0300%" height="15" fill="rgb(248,212,6)" fg:x="28" fg:w="4"/><text x="0.4602%" y="175.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="0.2403%" y="149" width="0.0150%" height="15" fill="rgb(208,68,35)" fg:x="32" fg:w="2"/><text x="0.4903%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="0.2403%" y="133" width="0.0150%" height="15" fill="rgb(232,128,0)" fg:x="32" fg:w="2"/><text x="0.4903%" y="143.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (3 samples, 0.02%)</title><rect x="0.2403%" y="165" width="0.0225%" height="15" fill="rgb(207,160,47)" fg:x="32" fg:w="3"/><text x="0.4903%" y="175.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (13 samples, 0.10%)</title><rect x="0.1877%" y="181" width="0.0976%" height="15" fill="rgb(228,23,34)" fg:x="25" fg:w="13"/><text x="0.4377%" y="191.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="0.2853%" y="165" width="0.0150%" height="15" fill="rgb(218,30,26)" fg:x="38" fg:w="2"/><text x="0.5353%" y="175.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (4 samples, 0.03%)</title><rect x="0.2853%" y="181" width="0.0300%" height="15" fill="rgb(220,122,19)" fg:x="38" fg:w="4"/><text x="0.5353%" y="191.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (16 samples, 0.12%)</title><rect x="0.3153%" y="181" width="0.1201%" height="15" fill="rgb(250,228,42)" fg:x="42" fg:w="16"/><text x="0.5653%" y="191.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_l_4_t_5_l_4 (59 samples, 0.44%)</title><rect x="0.0075%" y="197" width="0.4430%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="59"/><text x="0.2575%" y="207.50"></text></g><g><title>cc`network_model_nc::NetworkModelNC::compute_loss_observations (63 samples, 0.47%)</title><rect x="0.0000%" y="213" width="0.4730%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="63"/><text x="0.2500%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="0.4580%" y="197" width="0.0150%" height="15" fill="rgb(206,188,39)" fg:x="61" fg:w="2"/><text x="0.7080%" y="207.50"></text></g><g><title>cc`&lt;network_model_nc::NetworkModelNC as cc_common::NetworkModel&gt;::compute_feasible_network_moves (65 samples, 0.49%)</title><rect x="0.0000%" y="229" width="0.4880%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="65"/><text x="0.2500%" y="239.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_s_4_t_5_l_4 (2 samples, 0.02%)</title><rect x="0.4730%" y="213" width="0.0150%" height="15" fill="rgb(231,73,38)" fg:x="63" fg:w="2"/><text x="0.7230%" y="223.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_c_t_5_l_5 (2 samples, 0.02%)</title><rect x="0.4880%" y="197" width="0.0150%" height="15" fill="rgb(225,20,46)" fg:x="65" fg:w="2"/><text x="0.7380%" y="207.50"></text></g><g><title>cc`cc::CongCtrlState&lt;NM&gt;::compute_belief_bounds (6 samples, 0.05%)</title><rect x="0.4880%" y="229" width="0.0450%" height="15" fill="rgb(210,31,41)" fg:x="65" fg:w="6"/><text x="0.7380%" y="239.50"></text></g><g><title>cc`&lt;network_model_nc::NetworkModelNC as cc_common::NetworkModel&gt;::compute_belief_bounds (6 samples, 0.05%)</title><rect x="0.4880%" y="213" width="0.0450%" height="15" fill="rgb(221,200,47)" fg:x="65" fg:w="6"/><text x="0.7380%" y="223.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_q_4_t_5_l_5 (4 samples, 0.03%)</title><rect x="0.5030%" y="197" width="0.0300%" height="15" fill="rgb(226,26,5)" fg:x="67" fg:w="4"/><text x="0.7530%" y="207.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (4 samples, 0.03%)</title><rect x="0.5406%" y="181" width="0.0300%" height="15" fill="rgb(249,33,26)" fg:x="72" fg:w="4"/><text x="0.7906%" y="191.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (4 samples, 0.03%)</title><rect x="0.5406%" y="165" width="0.0300%" height="15" fill="rgb(235,183,28)" fg:x="72" fg:w="4"/><text x="0.7906%" y="175.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (2 samples, 0.02%)</title><rect x="0.5706%" y="181" width="0.0150%" height="15" fill="rgb(221,5,38)" fg:x="76" fg:w="2"/><text x="0.8206%" y="191.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (2 samples, 0.02%)</title><rect x="0.5706%" y="165" width="0.0150%" height="15" fill="rgb(247,18,42)" fg:x="76" fg:w="2"/><text x="0.8206%" y="175.50"></text></g><g><title>cc`cc::CongCtrlState&lt;NM&gt;::compute_cca_moves (9 samples, 0.07%)</title><rect x="0.5331%" y="229" width="0.0676%" height="15" fill="rgb(241,131,45)" fg:x="71" fg:w="9"/><text x="0.7831%" y="239.50"></text></g><g><title>cc`&lt;network_model_nc::NetworkModelNC as cc_common::NetworkModel&gt;::compute_max_allowed_rate (9 samples, 0.07%)</title><rect x="0.5331%" y="213" width="0.0676%" height="15" fill="rgb(249,31,29)" fg:x="71" fg:w="9"/><text x="0.7831%" y="223.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_a_4_3_t_5_l_4 (9 samples, 0.07%)</title><rect x="0.5331%" y="197" width="0.0676%" height="15" fill="rgb(225,111,53)" fg:x="71" fg:w="9"/><text x="0.7831%" y="207.50"></text></g><g><title>cc`&lt;cc::CongCtrlState&lt;NM&gt; as minimax::State&gt;::make_move (81 samples, 0.61%)</title><rect x="0.0000%" y="245" width="0.6082%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="81"/><text x="0.2500%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="0.6157%" y="229" width="0.0150%" height="15" fill="rgb(214,148,48)" fg:x="82" fg:w="2"/><text x="0.8657%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.02%)</title><rect x="0.6307%" y="229" width="0.0150%" height="15" fill="rgb(232,36,49)" fg:x="84" fg:w="2"/><text x="0.8807%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.02%)</title><rect x="0.6307%" y="213" width="0.0150%" height="15" fill="rgb(209,103,24)" fg:x="84" fg:w="2"/><text x="0.8807%" y="223.50"></text></g><g><title>cc`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="0.6082%" y="245" width="0.0450%" height="15" fill="rgb(229,88,8)" fg:x="81" fg:w="6"/><text x="0.8582%" y="255.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_c_t_5_l_5 (2 samples, 0.02%)</title><rect x="0.6607%" y="213" width="0.0150%" height="15" fill="rgb(213,181,19)" fg:x="88" fg:w="2"/><text x="0.9107%" y="223.50"></text></g><g><title>cc`cc::CongCtrlState&lt;NM&gt;::compute_belief_bounds (8 samples, 0.06%)</title><rect x="0.6607%" y="245" width="0.0601%" height="15" fill="rgb(254,191,54)" fg:x="88" fg:w="8"/><text x="0.9107%" y="255.50"></text></g><g><title>cc`&lt;network_model_nc::NetworkModelNC as cc_common::NetworkModel&gt;::compute_belief_bounds (8 samples, 0.06%)</title><rect x="0.6607%" y="229" width="0.0601%" height="15" fill="rgb(241,83,37)" fg:x="88" fg:w="8"/><text x="0.9107%" y="239.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_q_4_t_5_l_5 (5 samples, 0.04%)</title><rect x="0.6832%" y="213" width="0.0375%" height="15" fill="rgb(233,36,39)" fg:x="91" fg:w="5"/><text x="0.9332%" y="223.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (4 samples, 0.03%)</title><rect x="0.7358%" y="197" width="0.0300%" height="15" fill="rgb(226,3,54)" fg:x="98" fg:w="4"/><text x="0.9858%" y="207.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (3 samples, 0.02%)</title><rect x="0.7433%" y="181" width="0.0225%" height="15" fill="rgb(245,192,40)" fg:x="99" fg:w="3"/><text x="0.9933%" y="191.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (7 samples, 0.05%)</title><rect x="0.7733%" y="197" width="0.0526%" height="15" fill="rgb(238,167,29)" fg:x="103" fg:w="7"/><text x="1.0233%" y="207.50"></text></g><g><title>cc`cc::CongCtrlState&lt;NM&gt;::compute_cca_moves (15 samples, 0.11%)</title><rect x="0.7208%" y="245" width="0.1126%" height="15" fill="rgb(232,182,51)" fg:x="96" fg:w="15"/><text x="0.9708%" y="255.50"></text></g><g><title>cc`&lt;network_model_nc::NetworkModelNC as cc_common::NetworkModel&gt;::compute_max_allowed_rate (15 samples, 0.11%)</title><rect x="0.7208%" y="229" width="0.1126%" height="15" fill="rgb(231,60,39)" fg:x="96" fg:w="15"/><text x="0.9708%" y="239.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_a_4_3_t_5_l_4 (14 samples, 0.11%)</title><rect x="0.7283%" y="213" width="0.1051%" height="15" fill="rgb(208,69,12)" fg:x="97" fg:w="14"/><text x="0.9783%" y="223.50"></text></g><g><title>cc`log::__private_api::log (2 samples, 0.02%)</title><rect x="0.8409%" y="245" width="0.0150%" height="15" fill="rgb(235,93,37)" fg:x="112" fg:w="2"/><text x="1.0909%" y="255.50"></text></g><g><title>cc`&lt;env_logger::logger::Logger as log::Log&gt;::log (2 samples, 0.02%)</title><rect x="0.8409%" y="229" width="0.0150%" height="15" fill="rgb(213,116,39)" fg:x="112" fg:w="2"/><text x="1.0909%" y="239.50"></text></g><g><title>cc`&lt;env_logger::logger::Logger as log::Log&gt;::log::_{{closure}} (2 samples, 0.02%)</title><rect x="0.8409%" y="213" width="0.0150%" height="15" fill="rgb(222,207,29)" fg:x="112" fg:w="2"/><text x="1.0909%" y="223.50"></text></g><g><title>cc`env_logger::fmt::Builder::build::_{{closure}} (2 samples, 0.02%)</title><rect x="0.8409%" y="197" width="0.0150%" height="15" fill="rgb(206,96,30)" fg:x="112" fg:w="2"/><text x="1.0909%" y="207.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (6 samples, 0.05%)</title><rect x="0.8634%" y="165" width="0.0450%" height="15" fill="rgb(218,138,4)" fg:x="115" fg:w="6"/><text x="1.1134%" y="175.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (4 samples, 0.03%)</title><rect x="0.8784%" y="149" width="0.0300%" height="15" fill="rgb(250,191,14)" fg:x="117" fg:w="4"/><text x="1.1284%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="0.9310%" y="149" width="0.0150%" height="15" fill="rgb(239,60,40)" fg:x="124" fg:w="2"/><text x="1.1810%" y="159.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (5 samples, 0.04%)</title><rect x="0.9160%" y="165" width="0.0375%" height="15" fill="rgb(206,27,48)" fg:x="122" fg:w="5"/><text x="1.1660%" y="175.50"></text></g><g><title>cc`&lt;cc::CongCtrlState&lt;NM&gt; as minimax::State&gt;::reset_moves (16 samples, 0.12%)</title><rect x="0.8559%" y="229" width="0.1201%" height="15" fill="rgb(225,35,8)" fg:x="114" fg:w="16"/><text x="1.1059%" y="239.50"></text></g><g><title>cc`cc::CongCtrlState&lt;NM&gt;::compute_cca_moves (16 samples, 0.12%)</title><rect x="0.8559%" y="213" width="0.1201%" height="15" fill="rgb(250,213,24)" fg:x="114" fg:w="16"/><text x="1.1059%" y="223.50"></text></g><g><title>cc`&lt;network_model_nc::NetworkModelNC as cc_common::NetworkModel&gt;::compute_max_allowed_rate (16 samples, 0.12%)</title><rect x="0.8559%" y="197" width="0.1201%" height="15" fill="rgb(247,123,22)" fg:x="114" fg:w="16"/><text x="1.1059%" y="207.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_a_4_3_t_5_l_4 (16 samples, 0.12%)</title><rect x="0.8559%" y="181" width="0.1201%" height="15" fill="rgb(231,138,38)" fg:x="114" fg:w="16"/><text x="1.1059%" y="191.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (2 samples, 0.02%)</title><rect x="0.9610%" y="165" width="0.0150%" height="15" fill="rgb(231,145,46)" fg:x="128" fg:w="2"/><text x="1.2110%" y="175.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="0.9760%" y="165" width="0.0150%" height="15" fill="rgb(251,118,11)" fg:x="130" fg:w="2"/><text x="1.2260%" y="175.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="1.0887%" y="149" width="0.0150%" height="15" fill="rgb(217,147,25)" fg:x="145" fg:w="2"/><text x="1.3387%" y="159.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (46 samples, 0.35%)</title><rect x="1.1037%" y="149" width="0.3454%" height="15" fill="rgb(247,81,37)" fg:x="147" fg:w="46"/><text x="1.3537%" y="159.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (37 samples, 0.28%)</title><rect x="1.1713%" y="133" width="0.2778%" height="15" fill="rgb(209,12,38)" fg:x="156" fg:w="37"/><text x="1.4213%" y="143.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="1.4641%" y="133" width="0.0150%" height="15" fill="rgb(227,1,9)" fg:x="195" fg:w="2"/><text x="1.7141%" y="143.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.02%)</title><rect x="1.4866%" y="133" width="0.0225%" height="15" fill="rgb(248,47,43)" fg:x="198" fg:w="3"/><text x="1.7366%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="1.4941%" y="117" width="0.0150%" height="15" fill="rgb(221,10,30)" fg:x="199" fg:w="2"/><text x="1.7441%" y="127.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (3 samples, 0.02%)</title><rect x="1.5091%" y="133" width="0.0225%" height="15" fill="rgb(210,229,1)" fg:x="201" fg:w="3"/><text x="1.7591%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="1.5166%" y="117" width="0.0150%" height="15" fill="rgb(222,148,37)" fg:x="202" fg:w="2"/><text x="1.7666%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="1.5392%" y="133" width="0.0225%" height="15" fill="rgb(234,67,33)" fg:x="205" fg:w="3"/><text x="1.7892%" y="143.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (18 samples, 0.14%)</title><rect x="1.4491%" y="149" width="0.1351%" height="15" fill="rgb(247,98,35)" fg:x="193" fg:w="18"/><text x="1.6991%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="1.5692%" y="133" width="0.0150%" height="15" fill="rgb(247,138,52)" fg:x="209" fg:w="2"/><text x="1.8192%" y="143.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (2 samples, 0.02%)</title><rect x="1.6142%" y="133" width="0.0150%" height="15" fill="rgb(213,79,30)" fg:x="215" fg:w="2"/><text x="1.8642%" y="143.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="1.6142%" y="117" width="0.0150%" height="15" fill="rgb(246,177,23)" fg:x="215" fg:w="2"/><text x="1.8642%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="1.6293%" y="133" width="0.0225%" height="15" fill="rgb(230,62,27)" fg:x="217" fg:w="3"/><text x="1.8793%" y="143.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (11 samples, 0.08%)</title><rect x="1.5842%" y="149" width="0.0826%" height="15" fill="rgb(216,154,8)" fg:x="211" fg:w="11"/><text x="1.8342%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="1.6518%" y="133" width="0.0150%" height="15" fill="rgb(244,35,45)" fg:x="220" fg:w="2"/><text x="1.9018%" y="143.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (26 samples, 0.20%)</title><rect x="1.6668%" y="149" width="0.1952%" height="15" fill="rgb(251,115,12)" fg:x="222" fg:w="26"/><text x="1.9168%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="1.8620%" y="149" width="0.0150%" height="15" fill="rgb(240,54,50)" fg:x="248" fg:w="2"/><text x="2.1120%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="1.8770%" y="149" width="0.0150%" height="15" fill="rgb(233,84,52)" fg:x="250" fg:w="2"/><text x="2.1270%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.04%)</title><rect x="1.8920%" y="149" width="0.0375%" height="15" fill="rgb(207,117,47)" fg:x="252" fg:w="5"/><text x="2.1420%" y="159.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_l_4_t_5_l_4 (125 samples, 0.94%)</title><rect x="1.0061%" y="165" width="0.9385%" height="15" fill="rgb(249,43,39)" fg:x="134" fg:w="125"/><text x="1.2561%" y="175.50"></text></g><g><title>cc`network_model_nc::NetworkModelNC::compute_loss_observations (131 samples, 0.98%)</title><rect x="0.9760%" y="181" width="0.9836%" height="15" fill="rgb(209,38,44)" fg:x="130" fg:w="131"/><text x="1.2260%" y="191.50"></text></g><g><title>cc`&lt;cc::CongCtrlState&lt;NM&gt; as minimax::State&gt;::make_move (133 samples, 1.00%)</title><rect x="0.9760%" y="213" width="0.9986%" height="15" fill="rgb(236,212,23)" fg:x="130" fg:w="133"/><text x="1.2260%" y="223.50"></text></g><g><title>cc`&lt;network_model_nc::NetworkModelNC as cc_common::NetworkModel&gt;::compute_feasible_network_moves (133 samples, 1.00%)</title><rect x="0.9760%" y="197" width="0.9986%" height="15" fill="rgb(242,79,21)" fg:x="130" fg:w="133"/><text x="1.2260%" y="207.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="1.9746%" y="149" width="0.0150%" height="15" fill="rgb(211,96,35)" fg:x="263" fg:w="2"/><text x="2.2246%" y="159.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (4 samples, 0.03%)</title><rect x="1.9896%" y="149" width="0.0300%" height="15" fill="rgb(253,215,40)" fg:x="265" fg:w="4"/><text x="2.2396%" y="159.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="2.0422%" y="133" width="0.0150%" height="15" fill="rgb(211,81,21)" fg:x="272" fg:w="2"/><text x="2.2922%" y="143.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (5 samples, 0.04%)</title><rect x="2.0572%" y="133" width="0.0375%" height="15" fill="rgb(208,190,38)" fg:x="274" fg:w="5"/><text x="2.3072%" y="143.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (5 samples, 0.04%)</title><rect x="2.0572%" y="117" width="0.0375%" height="15" fill="rgb(235,213,38)" fg:x="274" fg:w="5"/><text x="2.3072%" y="127.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_b_t_5_l_4 (12 samples, 0.09%)</title><rect x="2.0347%" y="149" width="0.0901%" height="15" fill="rgb(237,122,38)" fg:x="271" fg:w="12"/><text x="2.2847%" y="159.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (3 samples, 0.02%)</title><rect x="2.1023%" y="133" width="0.0225%" height="15" fill="rgb(244,218,35)" fg:x="280" fg:w="3"/><text x="2.3523%" y="143.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_b_t_5_l_5 (2 samples, 0.02%)</title><rect x="2.1248%" y="149" width="0.0150%" height="15" fill="rgb(240,68,47)" fg:x="283" fg:w="2"/><text x="2.3748%" y="159.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (7 samples, 0.05%)</title><rect x="2.1548%" y="133" width="0.0526%" height="15" fill="rgb(210,16,53)" fg:x="287" fg:w="7"/><text x="2.4048%" y="143.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (6 samples, 0.05%)</title><rect x="2.1623%" y="117" width="0.0450%" height="15" fill="rgb(235,124,12)" fg:x="288" fg:w="6"/><text x="2.4123%" y="127.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (2 samples, 0.02%)</title><rect x="2.2074%" y="133" width="0.0150%" height="15" fill="rgb(224,169,11)" fg:x="294" fg:w="2"/><text x="2.4574%" y="143.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (4 samples, 0.03%)</title><rect x="2.2224%" y="133" width="0.0300%" height="15" fill="rgb(250,166,2)" fg:x="296" fg:w="4"/><text x="2.4724%" y="143.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_c_t_5_l_4 (16 samples, 0.12%)</title><rect x="2.1398%" y="149" width="0.1201%" height="15" fill="rgb(242,216,29)" fg:x="285" fg:w="16"/><text x="2.3898%" y="159.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_c_t_5_l_5 (4 samples, 0.03%)</title><rect x="2.2599%" y="149" width="0.0300%" height="15" fill="rgb(230,116,27)" fg:x="301" fg:w="4"/><text x="2.5099%" y="159.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (2 samples, 0.02%)</title><rect x="2.2749%" y="133" width="0.0150%" height="15" fill="rgb(228,99,48)" fg:x="303" fg:w="2"/><text x="2.5249%" y="143.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (55 samples, 0.41%)</title><rect x="2.3726%" y="133" width="0.4129%" height="15" fill="rgb(253,11,6)" fg:x="316" fg:w="55"/><text x="2.6226%" y="143.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (41 samples, 0.31%)</title><rect x="2.4777%" y="117" width="0.3078%" height="15" fill="rgb(247,143,39)" fg:x="330" fg:w="41"/><text x="2.7277%" y="127.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.02%)</title><rect x="2.7930%" y="117" width="0.0225%" height="15" fill="rgb(236,97,10)" fg:x="372" fg:w="3"/><text x="3.0430%" y="127.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="2.8230%" y="117" width="0.0150%" height="15" fill="rgb(233,208,19)" fg:x="376" fg:w="2"/><text x="3.0730%" y="127.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (3 samples, 0.02%)</title><rect x="2.8381%" y="117" width="0.0225%" height="15" fill="rgb(216,164,2)" fg:x="378" fg:w="3"/><text x="3.0881%" y="127.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (12 samples, 0.09%)</title><rect x="2.7930%" y="133" width="0.0901%" height="15" fill="rgb(220,129,5)" fg:x="372" fg:w="12"/><text x="3.0430%" y="143.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="2.8981%" y="117" width="0.0150%" height="15" fill="rgb(242,17,10)" fg:x="386" fg:w="2"/><text x="3.1481%" y="127.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.02%)</title><rect x="2.9131%" y="117" width="0.0225%" height="15" fill="rgb(242,107,0)" fg:x="388" fg:w="3"/><text x="3.1631%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="2.9206%" y="101" width="0.0150%" height="15" fill="rgb(251,28,31)" fg:x="389" fg:w="2"/><text x="3.1706%" y="111.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (2 samples, 0.02%)</title><rect x="2.9357%" y="117" width="0.0150%" height="15" fill="rgb(233,223,10)" fg:x="391" fg:w="2"/><text x="3.1857%" y="127.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (10 samples, 0.08%)</title><rect x="2.8831%" y="133" width="0.0751%" height="15" fill="rgb(215,21,27)" fg:x="384" fg:w="10"/><text x="3.1331%" y="143.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (40 samples, 0.30%)</title><rect x="2.9582%" y="133" width="0.3003%" height="15" fill="rgb(232,23,21)" fg:x="394" fg:w="40"/><text x="3.2082%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="3.2735%" y="133" width="0.0150%" height="15" fill="rgb(244,5,23)" fg:x="436" fg:w="2"/><text x="3.5235%" y="143.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_l_4_t_5_l_4 (135 samples, 1.01%)</title><rect x="2.2900%" y="149" width="1.0136%" height="15" fill="rgb(226,81,46)" fg:x="305" fg:w="135"/><text x="2.5400%" y="159.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="3.3261%" y="133" width="0.0150%" height="15" fill="rgb(247,70,30)" fg:x="443" fg:w="2"/><text x="3.5761%" y="143.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (33 samples, 0.25%)</title><rect x="3.3411%" y="133" width="0.2478%" height="15" fill="rgb(212,68,19)" fg:x="445" fg:w="33"/><text x="3.5911%" y="143.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (25 samples, 0.19%)</title><rect x="3.4012%" y="117" width="0.1877%" height="15" fill="rgb(240,187,13)" fg:x="453" fg:w="25"/><text x="3.6512%" y="127.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (2 samples, 0.02%)</title><rect x="3.5889%" y="133" width="0.0150%" height="15" fill="rgb(223,113,26)" fg:x="478" fg:w="2"/><text x="3.8389%" y="143.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (2 samples, 0.02%)</title><rect x="3.6039%" y="133" width="0.0150%" height="15" fill="rgb(206,192,2)" fg:x="480" fg:w="2"/><text x="3.8539%" y="143.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_q_4_t_5_l_4 (49 samples, 0.37%)</title><rect x="3.3111%" y="149" width="0.3679%" height="15" fill="rgb(241,108,4)" fg:x="441" fg:w="49"/><text x="3.5611%" y="159.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (8 samples, 0.06%)</title><rect x="3.6189%" y="133" width="0.0601%" height="15" fill="rgb(247,173,49)" fg:x="482" fg:w="8"/><text x="3.8689%" y="143.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_q_4_t_5_l_5 (4 samples, 0.03%)</title><rect x="3.6790%" y="149" width="0.0300%" height="15" fill="rgb(224,114,35)" fg:x="490" fg:w="4"/><text x="3.9290%" y="159.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (2 samples, 0.02%)</title><rect x="3.6940%" y="133" width="0.0150%" height="15" fill="rgb(245,159,27)" fg:x="492" fg:w="2"/><text x="3.9440%" y="143.50"></text></g><g><title>cc`cc::CongCtrlState&lt;NM&gt;::compute_belief_bounds (234 samples, 1.76%)</title><rect x="1.9746%" y="181" width="1.7569%" height="15" fill="rgb(245,172,44)" fg:x="263" fg:w="234"/><text x="2.2246%" y="191.50"></text></g><g><title>cc`&lt;network_model_nc::NetworkModelNC as cc_common::NetworkModel&gt;::compute_belief_bounds (234 samples, 1.76%)</title><rect x="1.9746%" y="165" width="1.7569%" height="15" fill="rgb(236,23,11)" fg:x="263" fg:w="234"/><text x="2.2246%" y="175.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (69 samples, 0.52%)</title><rect x="3.8216%" y="133" width="0.5181%" height="15" fill="rgb(205,117,38)" fg:x="509" fg:w="69"/><text x="4.0716%" y="143.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (52 samples, 0.39%)</title><rect x="3.9492%" y="117" width="0.3904%" height="15" fill="rgb(237,72,25)" fg:x="526" fg:w="52"/><text x="4.1992%" y="127.50"></text></g><g><title>cc`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="4.3397%" y="133" width="0.0150%" height="15" fill="rgb(244,70,9)" fg:x="578" fg:w="2"/><text x="4.5897%" y="143.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.03%)</title><rect x="4.3772%" y="117" width="0.0300%" height="15" fill="rgb(217,125,39)" fg:x="583" fg:w="4"/><text x="4.6272%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="4.3922%" y="101" width="0.0150%" height="15" fill="rgb(235,36,10)" fg:x="585" fg:w="2"/><text x="4.6422%" y="111.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="4.4072%" y="101" width="0.0150%" height="15" fill="rgb(251,123,47)" fg:x="587" fg:w="2"/><text x="4.6572%" y="111.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (5 samples, 0.04%)</title><rect x="4.4072%" y="117" width="0.0375%" height="15" fill="rgb(221,13,13)" fg:x="587" fg:w="5"/><text x="4.6572%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="4.4223%" y="101" width="0.0225%" height="15" fill="rgb(238,131,9)" fg:x="589" fg:w="3"/><text x="4.6723%" y="111.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (12 samples, 0.09%)</title><rect x="4.3622%" y="133" width="0.0901%" height="15" fill="rgb(211,50,8)" fg:x="581" fg:w="12"/><text x="4.6122%" y="143.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (4 samples, 0.03%)</title><rect x="4.4748%" y="117" width="0.0300%" height="15" fill="rgb(245,182,24)" fg:x="596" fg:w="4"/><text x="4.7248%" y="127.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.02%)</title><rect x="4.4823%" y="101" width="0.0225%" height="15" fill="rgb(242,14,37)" fg:x="597" fg:w="3"/><text x="4.7323%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="4.5048%" y="117" width="0.0150%" height="15" fill="rgb(246,228,12)" fg:x="600" fg:w="2"/><text x="4.7548%" y="127.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (7 samples, 0.05%)</title><rect x="4.5349%" y="101" width="0.0526%" height="15" fill="rgb(213,55,15)" fg:x="604" fg:w="7"/><text x="4.7849%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (5 samples, 0.04%)</title><rect x="4.5499%" y="85" width="0.0375%" height="15" fill="rgb(209,9,3)" fg:x="606" fg:w="5"/><text x="4.7999%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (21 samples, 0.16%)</title><rect x="4.4523%" y="133" width="0.1577%" height="15" fill="rgb(230,59,30)" fg:x="593" fg:w="21"/><text x="4.7023%" y="143.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (11 samples, 0.08%)</title><rect x="4.5274%" y="117" width="0.0826%" height="15" fill="rgb(209,121,21)" fg:x="603" fg:w="11"/><text x="4.7774%" y="127.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.02%)</title><rect x="4.5874%" y="101" width="0.0225%" height="15" fill="rgb(220,109,13)" fg:x="611" fg:w="3"/><text x="4.8374%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (36 samples, 0.27%)</title><rect x="4.6100%" y="133" width="0.2703%" height="15" fill="rgb(232,18,1)" fg:x="614" fg:w="36"/><text x="4.8600%" y="143.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_a_4_3_t_5_l_3 (153 samples, 1.15%)</title><rect x="3.7615%" y="149" width="1.1487%" height="15" fill="rgb(215,41,42)" fg:x="501" fg:w="153"/><text x="4.0115%" y="159.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (9 samples, 0.07%)</title><rect x="4.9253%" y="133" width="0.0676%" height="15" fill="rgb(224,123,36)" fg:x="656" fg:w="9"/><text x="5.1753%" y="143.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (9 samples, 0.07%)</title><rect x="4.9253%" y="117" width="0.0676%" height="15" fill="rgb(240,125,3)" fg:x="656" fg:w="9"/><text x="5.1753%" y="127.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (2 samples, 0.02%)</title><rect x="5.0004%" y="133" width="0.0150%" height="15" fill="rgb(205,98,50)" fg:x="666" fg:w="2"/><text x="5.2504%" y="143.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (4 samples, 0.03%)</title><rect x="5.0154%" y="133" width="0.0300%" height="15" fill="rgb(205,185,37)" fg:x="668" fg:w="4"/><text x="5.2654%" y="143.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (3 samples, 0.02%)</title><rect x="5.0229%" y="117" width="0.0225%" height="15" fill="rgb(238,207,15)" fg:x="669" fg:w="3"/><text x="5.2729%" y="127.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="5.0304%" y="101" width="0.0150%" height="15" fill="rgb(213,199,42)" fg:x="670" fg:w="2"/><text x="5.2804%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_a_4_3_t_5_l_4 (25 samples, 0.19%)</title><rect x="4.9103%" y="149" width="0.1877%" height="15" fill="rgb(235,201,11)" fg:x="654" fg:w="25"/><text x="5.1603%" y="159.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (7 samples, 0.05%)</title><rect x="5.0454%" y="133" width="0.0526%" height="15" fill="rgb(207,46,11)" fg:x="672" fg:w="7"/><text x="5.2954%" y="143.50"></text></g><g><title>cc`&lt;cc::CongCtrlState&lt;NM&gt; as minimax::State&gt;::make_move (417 samples, 3.13%)</title><rect x="1.9746%" y="197" width="3.1309%" height="15" fill="rgb(241,35,35)" fg:x="263" fg:w="417"/><text x="2.2246%" y="207.50">cc`..</text></g><g><title>cc`cc::CongCtrlState&lt;NM&gt;::compute_cca_moves (183 samples, 1.37%)</title><rect x="3.7315%" y="181" width="1.3740%" height="15" fill="rgb(243,32,47)" fg:x="497" fg:w="183"/><text x="3.9815%" y="191.50"></text></g><g><title>cc`&lt;network_model_nc::NetworkModelNC as cc_common::NetworkModel&gt;::compute_max_allowed_rate (183 samples, 1.37%)</title><rect x="3.7315%" y="165" width="1.3740%" height="15" fill="rgb(247,202,23)" fg:x="497" fg:w="183"/><text x="3.9815%" y="175.50"></text></g><g><title>cc`&lt;cc::CCValue as core::cmp::PartialOrd&gt;::partial_cmp (4 samples, 0.03%)</title><rect x="5.1055%" y="181" width="0.0300%" height="15" fill="rgb(219,102,11)" fg:x="680" fg:w="4"/><text x="5.3555%" y="191.50"></text></g><g><title>cc`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.03%)</title><rect x="5.1055%" y="165" width="0.0300%" height="15" fill="rgb(243,110,44)" fg:x="680" fg:w="4"/><text x="5.3555%" y="175.50"></text></g><g><title>cc`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.02%)</title><rect x="5.1130%" y="149" width="0.0225%" height="15" fill="rgb(222,74,54)" fg:x="681" fg:w="3"/><text x="5.3630%" y="159.50"></text></g><g><title>cc`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="5.1656%" y="133" width="0.0225%" height="15" fill="rgb(216,99,12)" fg:x="688" fg:w="3"/><text x="5.4156%" y="143.50"></text></g><g><title>cc`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="5.1656%" y="117" width="0.0225%" height="15" fill="rgb(226,22,26)" fg:x="688" fg:w="3"/><text x="5.4156%" y="127.50"></text></g><g><title>cc`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.02%)</title><rect x="5.1656%" y="101" width="0.0225%" height="15" fill="rgb(217,163,10)" fg:x="688" fg:w="3"/><text x="5.4156%" y="111.50"></text></g><g><title>cc`core::hash::impls::_&lt;impl core::hash::Hash for i32&gt;::hash (2 samples, 0.02%)</title><rect x="5.1731%" y="85" width="0.0150%" height="15" fill="rgb(213,25,53)" fg:x="689" fg:w="2"/><text x="5.4231%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="5.1881%" y="133" width="0.0150%" height="15" fill="rgb(252,105,26)" fg:x="691" fg:w="2"/><text x="5.4381%" y="143.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (8 samples, 0.06%)</title><rect x="5.2031%" y="133" width="0.0601%" height="15" fill="rgb(220,39,43)" fg:x="693" fg:w="8"/><text x="5.4531%" y="143.50"></text></g><g><title>cc`DYLD-STUB$$free (4 samples, 0.03%)</title><rect x="5.2632%" y="133" width="0.0300%" height="15" fill="rgb(229,68,48)" fg:x="701" fg:w="4"/><text x="5.5132%" y="143.50"></text></g><g><title>cc`__rdl_alloc (3 samples, 0.02%)</title><rect x="5.2932%" y="133" width="0.0225%" height="15" fill="rgb(252,8,32)" fg:x="705" fg:w="3"/><text x="5.5432%" y="143.50"></text></g><g><title>cc`__rdl_dealloc (2 samples, 0.02%)</title><rect x="5.3157%" y="133" width="0.0150%" height="15" fill="rgb(223,20,43)" fg:x="708" fg:w="2"/><text x="5.5657%" y="143.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (2 samples, 0.02%)</title><rect x="5.3307%" y="133" width="0.0150%" height="15" fill="rgb(229,81,49)" fg:x="710" fg:w="2"/><text x="5.5807%" y="143.50"></text></g><g><title>cc`core::hash::impls::_&lt;impl core::hash::Hash for i32&gt;::hash (2 samples, 0.02%)</title><rect x="5.3457%" y="69" width="0.0150%" height="15" fill="rgb(236,28,36)" fg:x="712" fg:w="2"/><text x="5.5957%" y="79.50"></text></g><g><title>cc`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="5.3457%" y="117" width="0.0225%" height="15" fill="rgb(249,185,26)" fg:x="712" fg:w="3"/><text x="5.5957%" y="127.50"></text></g><g><title>cc`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="5.3457%" y="101" width="0.0225%" height="15" fill="rgb(249,174,33)" fg:x="712" fg:w="3"/><text x="5.5957%" y="111.50"></text></g><g><title>cc`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.02%)</title><rect x="5.3457%" y="85" width="0.0225%" height="15" fill="rgb(233,201,37)" fg:x="712" fg:w="3"/><text x="5.5957%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (4 samples, 0.03%)</title><rect x="5.3683%" y="117" width="0.0300%" height="15" fill="rgb(221,78,26)" fg:x="715" fg:w="4"/><text x="5.6183%" y="127.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (17 samples, 0.13%)</title><rect x="5.3983%" y="117" width="0.1276%" height="15" fill="rgb(250,127,30)" fg:x="719" fg:w="17"/><text x="5.6483%" y="127.50"></text></g><g><title>cc`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="5.5259%" y="117" width="0.0225%" height="15" fill="rgb(230,49,44)" fg:x="736" fg:w="3"/><text x="5.7759%" y="127.50"></text></g><g><title>cc`__rdl_alloc (4 samples, 0.03%)</title><rect x="5.5560%" y="117" width="0.0300%" height="15" fill="rgb(229,67,23)" fg:x="740" fg:w="4"/><text x="5.8060%" y="127.50"></text></g><g><title>cc`__rust_alloc (2 samples, 0.02%)</title><rect x="5.5935%" y="117" width="0.0150%" height="15" fill="rgb(249,83,47)" fg:x="745" fg:w="2"/><text x="5.8435%" y="127.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (2 samples, 0.02%)</title><rect x="5.6235%" y="117" width="0.0150%" height="15" fill="rgb(215,43,3)" fg:x="749" fg:w="2"/><text x="5.8735%" y="127.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (2 samples, 0.02%)</title><rect x="5.6461%" y="85" width="0.0150%" height="15" fill="rgb(238,154,13)" fg:x="752" fg:w="2"/><text x="5.8961%" y="95.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_l_4_t_5_l_4 (7 samples, 0.05%)</title><rect x="5.6386%" y="101" width="0.0526%" height="15" fill="rgb(219,56,2)" fg:x="751" fg:w="7"/><text x="5.8886%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (3 samples, 0.02%)</title><rect x="5.6686%" y="85" width="0.0225%" height="15" fill="rgb(233,0,4)" fg:x="755" fg:w="3"/><text x="5.9186%" y="95.50"></text></g><g><title>cc`network_model_nc::NetworkModelNC::compute_loss_observations (8 samples, 0.06%)</title><rect x="5.6386%" y="117" width="0.0601%" height="15" fill="rgb(235,30,7)" fg:x="751" fg:w="8"/><text x="5.8886%" y="127.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (2 samples, 0.02%)</title><rect x="5.7061%" y="101" width="0.0150%" height="15" fill="rgb(250,79,13)" fg:x="760" fg:w="2"/><text x="5.9561%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_l_3_t_5_l_3 (4 samples, 0.03%)</title><rect x="5.6986%" y="117" width="0.0300%" height="15" fill="rgb(211,146,34)" fg:x="759" fg:w="4"/><text x="5.9486%" y="127.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (5 samples, 0.04%)</title><rect x="6.9600%" y="101" width="0.0375%" height="15" fill="rgb(228,22,38)" fg:x="927" fg:w="5"/><text x="7.2100%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (20 samples, 0.15%)</title><rect x="6.9975%" y="101" width="0.1502%" height="15" fill="rgb(235,168,5)" fg:x="932" fg:w="20"/><text x="7.2475%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (980 samples, 7.36%)</title><rect x="7.1477%" y="101" width="7.3579%" height="15" fill="rgb(221,155,16)" fg:x="952" fg:w="980"/><text x="7.3977%" y="111.50">cc`&lt;num_ra..</text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (762 samples, 5.72%)</title><rect x="8.7844%" y="85" width="5.7212%" height="15" fill="rgb(215,215,53)" fg:x="1170" fg:w="762"/><text x="9.0344%" y="95.50">cc`num_..</text></g><g><title>cc`DYLD-STUB$$free (10 samples, 0.08%)</title><rect x="14.5056%" y="101" width="0.0751%" height="15" fill="rgb(223,4,10)" fg:x="1932" fg:w="10"/><text x="14.7556%" y="111.50"></text></g><g><title>cc`DYLD-STUB$$malloc (4 samples, 0.03%)</title><rect x="14.5807%" y="101" width="0.0300%" height="15" fill="rgb(234,103,6)" fg:x="1942" fg:w="4"/><text x="14.8307%" y="111.50"></text></g><g><title>cc`DYLD-STUB$$memcpy (4 samples, 0.03%)</title><rect x="14.6107%" y="101" width="0.0300%" height="15" fill="rgb(227,97,0)" fg:x="1946" fg:w="4"/><text x="14.8607%" y="111.50"></text></g><g><title>cc`__rdl_alloc (2 samples, 0.02%)</title><rect x="14.6407%" y="101" width="0.0150%" height="15" fill="rgb(234,150,53)" fg:x="1950" fg:w="2"/><text x="14.8907%" y="111.50"></text></g><g><title>cc`__rdl_dealloc (2 samples, 0.02%)</title><rect x="14.6558%" y="101" width="0.0150%" height="15" fill="rgb(228,201,54)" fg:x="1952" fg:w="2"/><text x="14.9058%" y="111.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.04%)</title><rect x="14.6858%" y="101" width="0.0375%" height="15" fill="rgb(222,22,37)" fg:x="1956" fg:w="5"/><text x="14.9358%" y="111.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (6 samples, 0.05%)</title><rect x="14.7233%" y="101" width="0.0450%" height="15" fill="rgb(237,53,32)" fg:x="1961" fg:w="6"/><text x="14.9733%" y="111.50"></text></g><g><title>cc`core::slice::sort::merge_sort (4 samples, 0.03%)</title><rect x="14.7684%" y="101" width="0.0300%" height="15" fill="rgb(233,25,53)" fg:x="1967" fg:w="4"/><text x="15.0184%" y="111.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (19 samples, 0.14%)</title><rect x="15.0161%" y="85" width="0.1427%" height="15" fill="rgb(210,40,34)" fg:x="2000" fg:w="19"/><text x="15.2661%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (30 samples, 0.23%)</title><rect x="15.1588%" y="85" width="0.2252%" height="15" fill="rgb(241,220,44)" fg:x="2019" fg:w="30"/><text x="15.4088%" y="95.50"></text></g><g><title>cc`DYLD-STUB$$free (9 samples, 0.07%)</title><rect x="15.3840%" y="85" width="0.0676%" height="15" fill="rgb(235,28,35)" fg:x="2049" fg:w="9"/><text x="15.6340%" y="95.50"></text></g><g><title>cc`DYLD-STUB$$memcpy (5 samples, 0.04%)</title><rect x="15.4591%" y="85" width="0.0375%" height="15" fill="rgb(210,56,17)" fg:x="2059" fg:w="5"/><text x="15.7091%" y="95.50"></text></g><g><title>cc`DYLD-STUB$$malloc (4 samples, 0.03%)</title><rect x="15.5642%" y="69" width="0.0300%" height="15" fill="rgb(224,130,29)" fg:x="2073" fg:w="4"/><text x="15.8142%" y="79.50"></text></g><g><title>cc`__rdl_alloc (5 samples, 0.04%)</title><rect x="15.5943%" y="69" width="0.0375%" height="15" fill="rgb(235,212,8)" fg:x="2077" fg:w="5"/><text x="15.8443%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.11%)</title><rect x="15.6318%" y="69" width="0.1051%" height="15" fill="rgb(223,33,50)" fg:x="2082" fg:w="14"/><text x="15.8818%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (48 samples, 0.36%)</title><rect x="15.5042%" y="85" width="0.3604%" height="15" fill="rgb(219,149,13)" fg:x="2065" fg:w="48"/><text x="15.7542%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.13%)</title><rect x="15.7369%" y="69" width="0.1276%" height="15" fill="rgb(250,156,29)" fg:x="2096" fg:w="17"/><text x="15.9869%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::finish_grow (9 samples, 0.07%)</title><rect x="15.8646%" y="85" width="0.0676%" height="15" fill="rgb(216,193,19)" fg:x="2113" fg:w="9"/><text x="16.1146%" y="95.50"></text></g><g><title>cc`core::slice::sort::merge_sort (3 samples, 0.02%)</title><rect x="15.9321%" y="85" width="0.0225%" height="15" fill="rgb(216,135,14)" fg:x="2122" fg:w="3"/><text x="16.1821%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.05%)</title><rect x="16.0222%" y="53" width="0.0526%" height="15" fill="rgb(241,47,5)" fg:x="2134" fg:w="7"/><text x="16.2722%" y="63.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (24 samples, 0.18%)</title><rect x="15.9997%" y="69" width="0.1802%" height="15" fill="rgb(233,42,35)" fg:x="2131" fg:w="24"/><text x="16.2497%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.11%)</title><rect x="16.0748%" y="53" width="0.1051%" height="15" fill="rgb(231,13,6)" fg:x="2141" fg:w="14"/><text x="16.3248%" y="63.50"></text></g><g><title>cc`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="16.1799%" y="69" width="0.0150%" height="15" fill="rgb(207,181,40)" fg:x="2155" fg:w="2"/><text x="16.4299%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (21 samples, 0.16%)</title><rect x="16.2099%" y="69" width="0.1577%" height="15" fill="rgb(254,173,49)" fg:x="2159" fg:w="21"/><text x="16.4599%" y="79.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.02%)</title><rect x="16.3751%" y="69" width="0.0225%" height="15" fill="rgb(221,1,38)" fg:x="2181" fg:w="3"/><text x="16.6251%" y="79.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (68 samples, 0.51%)</title><rect x="15.9547%" y="85" width="0.5105%" height="15" fill="rgb(206,124,46)" fg:x="2125" fg:w="68"/><text x="16.2047%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.07%)</title><rect x="16.3976%" y="69" width="0.0676%" height="15" fill="rgb(249,21,11)" fg:x="2184" fg:w="9"/><text x="16.6476%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.02%)</title><rect x="16.4652%" y="85" width="0.0150%" height="15" fill="rgb(222,201,40)" fg:x="2193" fg:w="2"/><text x="16.7152%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.04%)</title><rect x="16.4802%" y="85" width="0.0375%" height="15" fill="rgb(235,61,29)" fg:x="2195" fg:w="5"/><text x="16.7302%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (41 samples, 0.31%)</title><rect x="16.5178%" y="85" width="0.3078%" height="15" fill="rgb(219,207,3)" fg:x="2200" fg:w="41"/><text x="16.7678%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.04%)</title><rect x="16.8256%" y="85" width="0.0375%" height="15" fill="rgb(222,56,46)" fg:x="2241" fg:w="5"/><text x="17.0756%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.07%)</title><rect x="16.8631%" y="85" width="0.0676%" height="15" fill="rgb(239,76,54)" fg:x="2246" fg:w="9"/><text x="17.1131%" y="95.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.02%)</title><rect x="16.9307%" y="85" width="0.0150%" height="15" fill="rgb(231,124,27)" fg:x="2255" fg:w="2"/><text x="17.1807%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.06%)</title><rect x="16.9457%" y="85" width="0.0601%" height="15" fill="rgb(249,195,6)" fg:x="2257" fg:w="8"/><text x="17.1957%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (295 samples, 2.21%)</title><rect x="14.7984%" y="101" width="2.2149%" height="15" fill="rgb(237,174,47)" fg:x="1971" fg:w="295"/><text x="15.0484%" y="111.50">c..</text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (10 samples, 0.08%)</title><rect x="17.1635%" y="85" width="0.0751%" height="15" fill="rgb(206,201,31)" fg:x="2286" fg:w="10"/><text x="17.4135%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (41 samples, 0.31%)</title><rect x="17.2385%" y="85" width="0.3078%" height="15" fill="rgb(231,57,52)" fg:x="2296" fg:w="41"/><text x="17.4885%" y="95.50"></text></g><g><title>cc`DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="17.5989%" y="69" width="0.0150%" height="15" fill="rgb(248,177,22)" fg:x="2344" fg:w="2"/><text x="17.8489%" y="79.50"></text></g><g><title>cc`__rdl_alloc (2 samples, 0.02%)</title><rect x="17.6139%" y="69" width="0.0150%" height="15" fill="rgb(215,211,37)" fg:x="2346" fg:w="2"/><text x="17.8639%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.05%)</title><rect x="17.6365%" y="69" width="0.0450%" height="15" fill="rgb(241,128,51)" fg:x="2349" fg:w="6"/><text x="17.8865%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (32 samples, 0.24%)</title><rect x="17.5464%" y="85" width="0.2403%" height="15" fill="rgb(227,165,31)" fg:x="2337" fg:w="32"/><text x="17.7964%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.11%)</title><rect x="17.6815%" y="69" width="0.1051%" height="15" fill="rgb(228,167,24)" fg:x="2355" fg:w="14"/><text x="17.9315%" y="79.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (17 samples, 0.13%)</title><rect x="17.8767%" y="69" width="0.1276%" height="15" fill="rgb(228,143,12)" fg:x="2381" fg:w="17"/><text x="18.1267%" y="79.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (72 samples, 0.54%)</title><rect x="17.7941%" y="85" width="0.5406%" height="15" fill="rgb(249,149,8)" fg:x="2370" fg:w="72"/><text x="18.0441%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (44 samples, 0.33%)</title><rect x="18.0044%" y="69" width="0.3304%" height="15" fill="rgb(243,35,44)" fg:x="2398" fg:w="44"/><text x="18.2544%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (3 samples, 0.02%)</title><rect x="18.3422%" y="85" width="0.0225%" height="15" fill="rgb(246,89,9)" fg:x="2443" fg:w="3"/><text x="18.5922%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (31 samples, 0.23%)</title><rect x="18.3647%" y="85" width="0.2328%" height="15" fill="rgb(233,213,13)" fg:x="2446" fg:w="31"/><text x="18.6147%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (219 samples, 1.64%)</title><rect x="17.0133%" y="101" width="1.6443%" height="15" fill="rgb(233,141,41)" fg:x="2266" fg:w="219"/><text x="17.2633%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.05%)</title><rect x="18.6050%" y="85" width="0.0526%" height="15" fill="rgb(239,167,4)" fg:x="2478" fg:w="7"/><text x="18.8550%" y="95.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (576 samples, 4.32%)</title><rect x="18.6576%" y="101" width="4.3246%" height="15" fill="rgb(209,217,16)" fg:x="2485" fg:w="576"/><text x="18.9076%" y="111.50">cc`nu..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.11%)</title><rect x="22.9897%" y="101" width="0.1051%" height="15" fill="rgb(219,88,35)" fg:x="3062" fg:w="14"/><text x="23.2397%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (47 samples, 0.35%)</title><rect x="23.0948%" y="101" width="0.3529%" height="15" fill="rgb(220,193,23)" fg:x="3076" fg:w="47"/><text x="23.3448%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.17%)</title><rect x="23.4477%" y="101" width="0.1652%" height="15" fill="rgb(230,90,52)" fg:x="3123" fg:w="22"/><text x="23.6977%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (29 samples, 0.22%)</title><rect x="23.6129%" y="101" width="0.2177%" height="15" fill="rgb(252,106,19)" fg:x="3145" fg:w="29"/><text x="23.8629%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.02%)</title><rect x="23.8306%" y="101" width="0.0150%" height="15" fill="rgb(206,74,20)" fg:x="3174" fg:w="2"/><text x="24.0806%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.15%)</title><rect x="23.8456%" y="101" width="0.1502%" height="15" fill="rgb(230,138,44)" fg:x="3176" fg:w="20"/><text x="24.0956%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_l_4_t_5_l_4 (2,446 samples, 18.36%)</title><rect x="5.7287%" y="117" width="18.3647%" height="15" fill="rgb(235,182,43)" fg:x="763" fg:w="2446"/><text x="5.9787%" y="127.50">cc`network_model_nc_qe_output..</text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.10%)</title><rect x="23.9958%" y="101" width="0.0976%" height="15" fill="rgb(242,16,51)" fg:x="3196" fg:w="13"/><text x="24.2458%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (5 samples, 0.04%)</title><rect x="24.0934%" y="117" width="0.0375%" height="15" fill="rgb(248,9,4)" fg:x="3209" fg:w="5"/><text x="24.3434%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="24.1309%" y="117" width="0.0300%" height="15" fill="rgb(210,31,22)" fg:x="3214" fg:w="4"/><text x="24.3809%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="24.1610%" y="117" width="0.0225%" height="15" fill="rgb(239,54,39)" fg:x="3218" fg:w="3"/><text x="24.4110%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.12%)</title><rect x="24.1835%" y="117" width="0.1201%" height="15" fill="rgb(230,99,41)" fg:x="3221" fg:w="16"/><text x="24.4335%" y="127.50"></text></g><g><title>cc`network_model_nc::NetworkModelNC::compute_loss_observations (2,539 samples, 19.06%)</title><rect x="5.3457%" y="133" width="19.0630%" height="15" fill="rgb(253,106,12)" fg:x="712" fg:w="2539"/><text x="5.5957%" y="143.50">cc`network_model_nc::NetworkMo..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.11%)</title><rect x="24.3036%" y="117" width="0.1051%" height="15" fill="rgb(213,46,41)" fg:x="3237" fg:w="14"/><text x="24.5536%" y="127.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (9 samples, 0.07%)</title><rect x="24.7841%" y="117" width="0.0676%" height="15" fill="rgb(215,133,35)" fg:x="3301" fg:w="9"/><text x="25.0341%" y="127.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (222 samples, 1.67%)</title><rect x="24.8517%" y="117" width="1.6668%" height="15" fill="rgb(213,28,5)" fg:x="3310" fg:w="222"/><text x="25.1017%" y="127.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (151 samples, 1.13%)</title><rect x="25.3848%" y="101" width="1.1337%" height="15" fill="rgb(215,77,49)" fg:x="3381" fg:w="151"/><text x="25.6348%" y="111.50"></text></g><g><title>cc`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="26.5185%" y="117" width="0.0225%" height="15" fill="rgb(248,100,22)" fg:x="3532" fg:w="3"/><text x="26.7685%" y="127.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.02%)</title><rect x="26.5711%" y="117" width="0.0225%" height="15" fill="rgb(208,67,9)" fg:x="3539" fg:w="3"/><text x="26.8211%" y="127.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (10 samples, 0.08%)</title><rect x="26.7137%" y="101" width="0.0751%" height="15" fill="rgb(219,133,21)" fg:x="3558" fg:w="10"/><text x="26.9637%" y="111.50"></text></g><g><title>cc`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="26.7888%" y="101" width="0.0150%" height="15" fill="rgb(246,46,29)" fg:x="3568" fg:w="2"/><text x="27.0388%" y="111.50"></text></g><g><title>cc`DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="26.8188%" y="85" width="0.0150%" height="15" fill="rgb(246,185,52)" fg:x="3572" fg:w="2"/><text x="27.0688%" y="95.50"></text></g><g><title>cc`__rdl_alloc (2 samples, 0.02%)</title><rect x="26.8338%" y="85" width="0.0150%" height="15" fill="rgb(252,136,11)" fg:x="3574" fg:w="2"/><text x="27.0838%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="26.8489%" y="85" width="0.0150%" height="15" fill="rgb(219,138,53)" fg:x="3576" fg:w="2"/><text x="27.0989%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (14 samples, 0.11%)</title><rect x="26.8113%" y="101" width="0.1051%" height="15" fill="rgb(211,51,23)" fg:x="3571" fg:w="14"/><text x="27.0613%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.05%)</title><rect x="26.8639%" y="85" width="0.0526%" height="15" fill="rgb(247,221,28)" fg:x="3578" fg:w="7"/><text x="27.1139%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="26.9164%" y="101" width="0.0225%" height="15" fill="rgb(251,222,45)" fg:x="3585" fg:w="3"/><text x="27.1664%" y="111.50"></text></g><g><title>cc`core::slice::sort::merge_sort (3 samples, 0.02%)</title><rect x="26.9390%" y="101" width="0.0225%" height="15" fill="rgb(217,162,53)" fg:x="3588" fg:w="3"/><text x="27.1890%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="27.0140%" y="69" width="0.0225%" height="15" fill="rgb(229,93,14)" fg:x="3598" fg:w="3"/><text x="27.2640%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.09%)</title><rect x="26.9915%" y="85" width="0.0901%" height="15" fill="rgb(209,67,49)" fg:x="3595" fg:w="12"/><text x="27.2415%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.05%)</title><rect x="27.0366%" y="69" width="0.0450%" height="15" fill="rgb(213,87,29)" fg:x="3601" fg:w="6"/><text x="27.2866%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="27.0816%" y="85" width="0.0225%" height="15" fill="rgb(205,151,52)" fg:x="3607" fg:w="3"/><text x="27.3316%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 0.10%)</title><rect x="27.1041%" y="85" width="0.0976%" height="15" fill="rgb(253,215,39)" fg:x="3610" fg:w="13"/><text x="27.3541%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (33 samples, 0.25%)</title><rect x="26.9615%" y="101" width="0.2478%" height="15" fill="rgb(221,220,41)" fg:x="3591" fg:w="33"/><text x="27.2115%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.06%)</title><rect x="27.2092%" y="101" width="0.0601%" height="15" fill="rgb(218,133,21)" fg:x="3624" fg:w="8"/><text x="27.4592%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.05%)</title><rect x="27.2693%" y="101" width="0.0526%" height="15" fill="rgb(221,193,43)" fg:x="3632" fg:w="7"/><text x="27.5193%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="27.3294%" y="101" width="0.0150%" height="15" fill="rgb(240,128,52)" fg:x="3640" fg:w="2"/><text x="27.5794%" y="111.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (100 samples, 0.75%)</title><rect x="26.6011%" y="117" width="0.7508%" height="15" fill="rgb(253,114,12)" fg:x="3543" fg:w="100"/><text x="26.8511%" y="127.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="27.4345%" y="101" width="0.0150%" height="15" fill="rgb(215,223,47)" fg:x="3654" fg:w="2"/><text x="27.6845%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (12 samples, 0.09%)</title><rect x="27.4495%" y="101" width="0.0901%" height="15" fill="rgb(248,225,23)" fg:x="3656" fg:w="12"/><text x="27.6995%" y="111.50"></text></g><g><title>cc`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="27.5696%" y="85" width="0.0150%" height="15" fill="rgb(250,108,0)" fg:x="3672" fg:w="2"/><text x="27.8196%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="27.5847%" y="85" width="0.0225%" height="15" fill="rgb(228,208,7)" fg:x="3674" fg:w="3"/><text x="27.8347%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.09%)</title><rect x="27.5396%" y="101" width="0.0901%" height="15" fill="rgb(244,45,10)" fg:x="3668" fg:w="12"/><text x="27.7896%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="27.6072%" y="85" width="0.0225%" height="15" fill="rgb(207,125,25)" fg:x="3677" fg:w="3"/><text x="27.8572%" y="95.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (9 samples, 0.07%)</title><rect x="27.6522%" y="85" width="0.0676%" height="15" fill="rgb(210,195,18)" fg:x="3683" fg:w="9"/><text x="27.9022%" y="95.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (14 samples, 0.11%)</title><rect x="27.6297%" y="101" width="0.1051%" height="15" fill="rgb(249,80,12)" fg:x="3680" fg:w="14"/><text x="27.8797%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="27.7198%" y="85" width="0.0150%" height="15" fill="rgb(221,65,9)" fg:x="3692" fg:w="2"/><text x="27.9698%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (15 samples, 0.11%)</title><rect x="27.7348%" y="101" width="0.1126%" height="15" fill="rgb(235,49,36)" fg:x="3694" fg:w="15"/><text x="27.9848%" y="111.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (74 samples, 0.56%)</title><rect x="27.3519%" y="117" width="0.5556%" height="15" fill="rgb(225,32,20)" fg:x="3643" fg:w="74"/><text x="27.6019%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.05%)</title><rect x="27.8549%" y="101" width="0.0526%" height="15" fill="rgb(215,141,46)" fg:x="3710" fg:w="7"/><text x="28.1049%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (142 samples, 1.07%)</title><rect x="27.9075%" y="117" width="1.0661%" height="15" fill="rgb(250,160,47)" fg:x="3717" fg:w="142"/><text x="28.1575%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.04%)</title><rect x="28.9736%" y="117" width="0.0375%" height="15" fill="rgb(216,222,40)" fg:x="3859" fg:w="5"/><text x="29.2236%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (15 samples, 0.11%)</title><rect x="29.0112%" y="117" width="0.1126%" height="15" fill="rgb(234,217,39)" fg:x="3864" fg:w="15"/><text x="29.2612%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.05%)</title><rect x="29.1238%" y="117" width="0.0450%" height="15" fill="rgb(207,178,40)" fg:x="3879" fg:w="6"/><text x="29.3738%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.08%)</title><rect x="29.1689%" y="117" width="0.0826%" height="15" fill="rgb(221,136,13)" fg:x="3885" fg:w="11"/><text x="29.4189%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.05%)</title><rect x="29.2590%" y="117" width="0.0526%" height="15" fill="rgb(249,199,10)" fg:x="3897" fg:w="7"/><text x="29.5090%" y="127.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_l_3_t_5_l_3 (658 samples, 4.94%)</title><rect x="24.4087%" y="133" width="4.9403%" height="15" fill="rgb(249,222,13)" fg:x="3251" fg:w="658"/><text x="24.6587%" y="143.50">cc`net..</text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.04%)</title><rect x="29.3115%" y="117" width="0.0375%" height="15" fill="rgb(244,185,38)" fg:x="3904" fg:w="5"/><text x="29.5615%" y="127.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="29.5067%" y="117" width="0.0150%" height="15" fill="rgb(236,202,9)" fg:x="3930" fg:w="2"/><text x="29.7567%" y="127.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (83 samples, 0.62%)</title><rect x="29.5217%" y="117" width="0.6232%" height="15" fill="rgb(250,229,37)" fg:x="3932" fg:w="83"/><text x="29.7717%" y="127.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (59 samples, 0.44%)</title><rect x="29.7019%" y="101" width="0.4430%" height="15" fill="rgb(206,174,23)" fg:x="3956" fg:w="59"/><text x="29.9519%" y="111.50"></text></g><g><title>cc`DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="30.1599%" y="117" width="0.0150%" height="15" fill="rgb(211,33,43)" fg:x="4017" fg:w="2"/><text x="30.4099%" y="127.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.02%)</title><rect x="30.1824%" y="101" width="0.0225%" height="15" fill="rgb(245,58,50)" fg:x="4020" fg:w="3"/><text x="30.4324%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (6 samples, 0.05%)</title><rect x="30.2050%" y="101" width="0.0450%" height="15" fill="rgb(244,68,36)" fg:x="4023" fg:w="6"/><text x="30.4550%" y="111.50"></text></g><g><title>cc`__rdl_alloc (2 samples, 0.02%)</title><rect x="30.2801%" y="85" width="0.0150%" height="15" fill="rgb(232,229,15)" fg:x="4033" fg:w="2"/><text x="30.5301%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="30.2951%" y="85" width="0.0150%" height="15" fill="rgb(254,30,23)" fg:x="4035" fg:w="2"/><text x="30.5451%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.06%)</title><rect x="30.2575%" y="101" width="0.0601%" height="15" fill="rgb(235,160,14)" fg:x="4030" fg:w="8"/><text x="30.5075%" y="111.50"></text></g><g><title>cc`core::slice::sort::merge_sort (2 samples, 0.02%)</title><rect x="30.3251%" y="101" width="0.0150%" height="15" fill="rgb(212,155,44)" fg:x="4039" fg:w="2"/><text x="30.5751%" y="111.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.02%)</title><rect x="30.3401%" y="85" width="0.0225%" height="15" fill="rgb(226,2,50)" fg:x="4041" fg:w="3"/><text x="30.5901%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.06%)</title><rect x="30.3701%" y="85" width="0.0601%" height="15" fill="rgb(234,177,6)" fg:x="4045" fg:w="8"/><text x="30.6201%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (15 samples, 0.11%)</title><rect x="30.3401%" y="101" width="0.1126%" height="15" fill="rgb(217,24,9)" fg:x="4041" fg:w="15"/><text x="30.5901%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="30.4377%" y="85" width="0.0150%" height="15" fill="rgb(220,13,46)" fg:x="4054" fg:w="2"/><text x="30.6877%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.05%)</title><rect x="30.4527%" y="101" width="0.0450%" height="15" fill="rgb(239,221,27)" fg:x="4056" fg:w="6"/><text x="30.7027%" y="111.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (45 samples, 0.34%)</title><rect x="30.1749%" y="117" width="0.3379%" height="15" fill="rgb(222,198,25)" fg:x="4019" fg:w="45"/><text x="30.4249%" y="127.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="30.5353%" y="101" width="0.0150%" height="15" fill="rgb(211,99,13)" fg:x="4067" fg:w="2"/><text x="30.7853%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="30.5578%" y="85" width="0.0150%" height="15" fill="rgb(232,111,31)" fg:x="4070" fg:w="2"/><text x="30.8078%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.02%)</title><rect x="30.5578%" y="101" width="0.0225%" height="15" fill="rgb(245,82,37)" fg:x="4070" fg:w="3"/><text x="30.8078%" y="111.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (4 samples, 0.03%)</title><rect x="30.5804%" y="85" width="0.0300%" height="15" fill="rgb(227,149,46)" fg:x="4073" fg:w="4"/><text x="30.8304%" y="95.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (8 samples, 0.06%)</title><rect x="30.5804%" y="101" width="0.0601%" height="15" fill="rgb(218,36,50)" fg:x="4073" fg:w="8"/><text x="30.8304%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (4 samples, 0.03%)</title><rect x="30.6104%" y="85" width="0.0300%" height="15" fill="rgb(226,80,48)" fg:x="4077" fg:w="4"/><text x="30.8604%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.03%)</title><rect x="30.6404%" y="101" width="0.0300%" height="15" fill="rgb(238,224,15)" fg:x="4081" fg:w="4"/><text x="30.8904%" y="111.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (22 samples, 0.17%)</title><rect x="30.5128%" y="117" width="0.1652%" height="15" fill="rgb(241,136,10)" fg:x="4064" fg:w="22"/><text x="30.7628%" y="127.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (59 samples, 0.44%)</title><rect x="30.6780%" y="117" width="0.4430%" height="15" fill="rgb(208,32,45)" fg:x="4086" fg:w="59"/><text x="30.9280%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.04%)</title><rect x="31.1285%" y="117" width="0.0375%" height="15" fill="rgb(207,135,9)" fg:x="4146" fg:w="5"/><text x="31.3785%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="31.1660%" y="117" width="0.0150%" height="15" fill="rgb(206,86,44)" fg:x="4151" fg:w="2"/><text x="31.4160%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="31.1810%" y="117" width="0.0150%" height="15" fill="rgb(245,177,15)" fg:x="4153" fg:w="2"/><text x="31.4310%" y="127.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_l_4_t_5_l_4 (247 samples, 1.85%)</title><rect x="29.3491%" y="133" width="1.8545%" height="15" fill="rgb(206,64,50)" fg:x="3909" fg:w="247"/><text x="29.5991%" y="143.50">c..</text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (5 samples, 0.04%)</title><rect x="31.2035%" y="133" width="0.0375%" height="15" fill="rgb(234,36,40)" fg:x="4156" fg:w="5"/><text x="31.4535%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="31.2411%" y="133" width="0.0300%" height="15" fill="rgb(213,64,8)" fg:x="4161" fg:w="4"/><text x="31.4911%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.05%)</title><rect x="31.2711%" y="133" width="0.0526%" height="15" fill="rgb(210,75,36)" fg:x="4165" fg:w="7"/><text x="31.5211%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.05%)</title><rect x="31.3237%" y="133" width="0.0450%" height="15" fill="rgb(229,88,21)" fg:x="4172" fg:w="6"/><text x="31.5737%" y="143.50"></text></g><g><title>cc`network_model_nc::NetworkModelNC::compute_loss_observations (3,495 samples, 26.24%)</title><rect x="5.1580%" y="149" width="26.2407%" height="15" fill="rgb(252,204,47)" fg:x="687" fg:w="3495"/><text x="5.4080%" y="159.50">cc`network_model_nc::NetworkModelNC::compu..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="31.3687%" y="133" width="0.0300%" height="15" fill="rgb(208,77,27)" fg:x="4178" fg:w="4"/><text x="31.6187%" y="143.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (4 samples, 0.03%)</title><rect x="31.4063%" y="133" width="0.0300%" height="15" fill="rgb(221,76,26)" fg:x="4183" fg:w="4"/><text x="31.6563%" y="143.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (4 samples, 0.03%)</title><rect x="31.4063%" y="117" width="0.0300%" height="15" fill="rgb(225,139,18)" fg:x="4183" fg:w="4"/><text x="31.6563%" y="127.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (4 samples, 0.03%)</title><rect x="31.4513%" y="133" width="0.0300%" height="15" fill="rgb(230,137,11)" fg:x="4189" fg:w="4"/><text x="31.7013%" y="143.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (2 samples, 0.02%)</title><rect x="31.4663%" y="117" width="0.0150%" height="15" fill="rgb(212,28,1)" fg:x="4191" fg:w="2"/><text x="31.7163%" y="127.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (4 samples, 0.03%)</title><rect x="31.4813%" y="133" width="0.0300%" height="15" fill="rgb(248,164,17)" fg:x="4193" fg:w="4"/><text x="31.7313%" y="143.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (6 samples, 0.05%)</title><rect x="31.5114%" y="133" width="0.0450%" height="15" fill="rgb(222,171,42)" fg:x="4197" fg:w="6"/><text x="31.7614%" y="143.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_s_4_t_5_l_3 (22 samples, 0.17%)</title><rect x="31.3988%" y="149" width="0.1652%" height="15" fill="rgb(243,84,45)" fg:x="4182" fg:w="22"/><text x="31.6488%" y="159.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (4 samples, 0.03%)</title><rect x="31.5639%" y="133" width="0.0300%" height="15" fill="rgb(252,49,23)" fg:x="4204" fg:w="4"/><text x="31.8139%" y="143.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (2 samples, 0.02%)</title><rect x="31.5789%" y="117" width="0.0150%" height="15" fill="rgb(215,19,7)" fg:x="4206" fg:w="2"/><text x="31.8289%" y="127.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_s_4_t_5_l_4 (6 samples, 0.05%)</title><rect x="31.5639%" y="149" width="0.0450%" height="15" fill="rgb(238,81,41)" fg:x="4204" fg:w="6"/><text x="31.8139%" y="159.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (2 samples, 0.02%)</title><rect x="31.5940%" y="133" width="0.0150%" height="15" fill="rgb(210,199,37)" fg:x="4208" fg:w="2"/><text x="31.8440%" y="143.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (3 samples, 0.02%)</title><rect x="31.6090%" y="149" width="0.0225%" height="15" fill="rgb(244,192,49)" fg:x="4210" fg:w="3"/><text x="31.8590%" y="159.50"></text></g><g><title>cc`&lt;cc::CongCtrlState&lt;NM&gt; as minimax::State&gt;::make_move (3,532 samples, 26.52%)</title><rect x="5.1355%" y="181" width="26.5185%" height="15" fill="rgb(226,211,11)" fg:x="684" fg:w="3532"/><text x="5.3855%" y="191.50">cc`&lt;cc::CongCtrlState&lt;NM&gt; as minimax::Stat..</text></g><g><title>cc`&lt;network_model_nc::NetworkModelNC as cc_common::NetworkModel&gt;::compute_feasible_network_moves (3,532 samples, 26.52%)</title><rect x="5.1355%" y="165" width="26.5185%" height="15" fill="rgb(236,162,54)" fg:x="684" fg:w="3532"/><text x="5.3855%" y="175.50">cc`&lt;network_model_nc::NetworkModelNC as cc..</text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="31.7216%" y="149" width="0.0150%" height="15" fill="rgb(220,229,9)" fg:x="4225" fg:w="2"/><text x="31.9716%" y="159.50"></text></g><g><title>cc`core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="31.7441%" y="149" width="0.0225%" height="15" fill="rgb(250,87,22)" fg:x="4228" fg:w="3"/><text x="31.9941%" y="159.50"></text></g><g><title>cc`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.05%)</title><rect x="31.7892%" y="133" width="0.0450%" height="15" fill="rgb(239,43,17)" fg:x="4234" fg:w="6"/><text x="32.0392%" y="143.50"></text></g><g><title>cc`core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="31.8342%" y="133" width="0.0225%" height="15" fill="rgb(231,177,25)" fg:x="4240" fg:w="3"/><text x="32.0842%" y="143.50"></text></g><g><title>cc`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.05%)</title><rect x="31.8943%" y="117" width="0.0450%" height="15" fill="rgb(219,179,1)" fg:x="4248" fg:w="6"/><text x="32.1443%" y="127.50"></text></g><g><title>cc`core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="31.9393%" y="117" width="0.0150%" height="15" fill="rgb(238,219,53)" fg:x="4254" fg:w="2"/><text x="32.1893%" y="127.50"></text></g><g><title>cc`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.11%)</title><rect x="31.8567%" y="133" width="0.1126%" height="15" fill="rgb(232,167,36)" fg:x="4243" fg:w="15"/><text x="32.1067%" y="143.50"></text></g><g><title>cc`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (32 samples, 0.24%)</title><rect x="31.7666%" y="149" width="0.2403%" height="15" fill="rgb(244,19,51)" fg:x="4231" fg:w="32"/><text x="32.0166%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="31.9919%" y="133" width="0.0150%" height="15" fill="rgb(224,6,22)" fg:x="4261" fg:w="2"/><text x="32.2419%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.02%)</title><rect x="32.0069%" y="149" width="0.0150%" height="15" fill="rgb(224,145,5)" fg:x="4263" fg:w="2"/><text x="32.2569%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.02%)</title><rect x="32.0069%" y="133" width="0.0150%" height="15" fill="rgb(234,130,49)" fg:x="4263" fg:w="2"/><text x="32.2569%" y="143.50"></text></g><g><title>cc`&lt;cc::CCValue as core::cmp::PartialOrd&gt;::partial_cmp (49 samples, 0.37%)</title><rect x="31.6690%" y="165" width="0.3679%" height="15" fill="rgb(254,6,2)" fg:x="4218" fg:w="49"/><text x="31.9190%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="32.0219%" y="149" width="0.0150%" height="15" fill="rgb(208,96,46)" fg:x="4265" fg:w="2"/><text x="32.2719%" y="159.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (21 samples, 0.16%)</title><rect x="32.0895%" y="117" width="0.1577%" height="15" fill="rgb(239,3,39)" fg:x="4274" fg:w="21"/><text x="32.3395%" y="127.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (54 samples, 0.41%)</title><rect x="32.2472%" y="117" width="0.4054%" height="15" fill="rgb(233,210,1)" fg:x="4295" fg:w="54"/><text x="32.4972%" y="127.50"></text></g><g><title>cc`DYLD-STUB$$free (6 samples, 0.05%)</title><rect x="32.6526%" y="117" width="0.0450%" height="15" fill="rgb(244,137,37)" fg:x="4349" fg:w="6"/><text x="32.9026%" y="127.50"></text></g><g><title>cc`__rdl_alloc (2 samples, 0.02%)</title><rect x="32.6976%" y="117" width="0.0150%" height="15" fill="rgb(240,136,2)" fg:x="4355" fg:w="2"/><text x="32.9476%" y="127.50"></text></g><g><title>cc`__rdl_dealloc (3 samples, 0.02%)</title><rect x="32.7127%" y="117" width="0.0225%" height="15" fill="rgb(239,18,37)" fg:x="4357" fg:w="3"/><text x="32.9627%" y="127.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (3 samples, 0.02%)</title><rect x="32.7802%" y="101" width="0.0225%" height="15" fill="rgb(218,185,22)" fg:x="4366" fg:w="3"/><text x="33.0302%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="32.7877%" y="85" width="0.0150%" height="15" fill="rgb(225,218,4)" fg:x="4367" fg:w="2"/><text x="33.0377%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (10 samples, 0.08%)</title><rect x="32.7427%" y="117" width="0.0751%" height="15" fill="rgb(230,182,32)" fg:x="4361" fg:w="10"/><text x="32.9927%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="32.8028%" y="101" width="0.0150%" height="15" fill="rgb(242,56,43)" fg:x="4369" fg:w="2"/><text x="33.0528%" y="111.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (3 samples, 0.02%)</title><rect x="32.8178%" y="117" width="0.0225%" height="15" fill="rgb(233,99,24)" fg:x="4371" fg:w="3"/><text x="33.0678%" y="127.50"></text></g><g><title>cc`network_model_nc::NetworkModelNC::get_observation_vectors (3 samples, 0.02%)</title><rect x="32.8403%" y="117" width="0.0225%" height="15" fill="rgb(234,209,42)" fg:x="4374" fg:w="3"/><text x="33.0903%" y="127.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="32.8478%" y="101" width="0.0150%" height="15" fill="rgb(227,7,12)" fg:x="4375" fg:w="2"/><text x="33.0978%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (11 samples, 0.08%)</title><rect x="32.9004%" y="101" width="0.0826%" height="15" fill="rgb(245,203,43)" fg:x="4382" fg:w="11"/><text x="33.1504%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (6 samples, 0.05%)</title><rect x="32.9379%" y="85" width="0.0450%" height="15" fill="rgb(238,205,33)" fg:x="4387" fg:w="6"/><text x="33.1879%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="32.9830%" y="85" width="0.0150%" height="15" fill="rgb(231,56,7)" fg:x="4393" fg:w="2"/><text x="33.2330%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (4 samples, 0.03%)</title><rect x="32.9830%" y="101" width="0.0300%" height="15" fill="rgb(244,186,29)" fg:x="4393" fg:w="4"/><text x="33.2330%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_b_t_5_l_3 (26 samples, 0.20%)</title><rect x="32.8628%" y="117" width="0.1952%" height="15" fill="rgb(234,111,31)" fg:x="4377" fg:w="26"/><text x="33.1128%" y="127.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (5 samples, 0.04%)</title><rect x="33.0205%" y="101" width="0.0375%" height="15" fill="rgb(241,149,10)" fg:x="4398" fg:w="5"/><text x="33.2705%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (7 samples, 0.05%)</title><rect x="33.2007%" y="101" width="0.0526%" height="15" fill="rgb(249,206,44)" fg:x="4422" fg:w="7"/><text x="33.4507%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (100 samples, 0.75%)</title><rect x="33.2532%" y="101" width="0.7508%" height="15" fill="rgb(251,153,30)" fg:x="4429" fg:w="100"/><text x="33.5032%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (75 samples, 0.56%)</title><rect x="33.4409%" y="85" width="0.5631%" height="15" fill="rgb(239,152,38)" fg:x="4454" fg:w="75"/><text x="33.6909%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (5 samples, 0.04%)</title><rect x="34.0266%" y="85" width="0.0375%" height="15" fill="rgb(249,139,47)" fg:x="4532" fg:w="5"/><text x="34.2766%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="34.0716%" y="69" width="0.0150%" height="15" fill="rgb(244,64,35)" fg:x="4538" fg:w="2"/><text x="34.3216%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.04%)</title><rect x="34.0641%" y="85" width="0.0375%" height="15" fill="rgb(216,46,15)" fg:x="4537" fg:w="5"/><text x="34.3141%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="34.0866%" y="69" width="0.0150%" height="15" fill="rgb(250,74,19)" fg:x="4540" fg:w="2"/><text x="34.3366%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.02%)</title><rect x="34.1092%" y="69" width="0.0225%" height="15" fill="rgb(249,42,33)" fg:x="4543" fg:w="3"/><text x="34.3592%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="34.1092%" y="53" width="0.0225%" height="15" fill="rgb(242,149,17)" fg:x="4543" fg:w="3"/><text x="34.3592%" y="63.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (8 samples, 0.06%)</title><rect x="34.1017%" y="85" width="0.0601%" height="15" fill="rgb(244,29,21)" fg:x="4542" fg:w="8"/><text x="34.3517%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.03%)</title><rect x="34.1317%" y="69" width="0.0300%" height="15" fill="rgb(220,130,37)" fg:x="4546" fg:w="4"/><text x="34.3817%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="34.1692%" y="85" width="0.0225%" height="15" fill="rgb(211,67,2)" fg:x="4551" fg:w="3"/><text x="34.4192%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="34.1918%" y="85" width="0.0225%" height="15" fill="rgb(235,68,52)" fg:x="4554" fg:w="3"/><text x="34.4418%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (28 samples, 0.21%)</title><rect x="34.0191%" y="101" width="0.2102%" height="15" fill="rgb(246,142,3)" fg:x="4531" fg:w="28"/><text x="34.2691%" y="111.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="34.2368%" y="85" width="0.0150%" height="15" fill="rgb(241,25,7)" fg:x="4560" fg:w="2"/><text x="34.4868%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="34.2368%" y="69" width="0.0150%" height="15" fill="rgb(242,119,39)" fg:x="4560" fg:w="2"/><text x="34.4868%" y="79.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (7 samples, 0.05%)</title><rect x="34.2293%" y="101" width="0.0526%" height="15" fill="rgb(241,98,45)" fg:x="4559" fg:w="7"/><text x="34.4793%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (55 samples, 0.41%)</title><rect x="34.2819%" y="101" width="0.4129%" height="15" fill="rgb(254,28,30)" fg:x="4566" fg:w="55"/><text x="34.5319%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="34.7098%" y="101" width="0.0150%" height="15" fill="rgb(241,142,54)" fg:x="4623" fg:w="2"/><text x="34.9598%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="34.7248%" y="101" width="0.0150%" height="15" fill="rgb(222,85,15)" fg:x="4625" fg:w="2"/><text x="34.9748%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_b_t_5_l_4 (225 samples, 1.69%)</title><rect x="33.0580%" y="117" width="1.6893%" height="15" fill="rgb(210,85,47)" fg:x="4403" fg:w="225"/><text x="33.3080%" y="127.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.02%)</title><rect x="34.7924%" y="101" width="0.0225%" height="15" fill="rgb(224,206,25)" fg:x="4634" fg:w="3"/><text x="35.0424%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (19 samples, 0.14%)</title><rect x="34.8149%" y="101" width="0.1427%" height="15" fill="rgb(243,201,19)" fg:x="4637" fg:w="19"/><text x="35.0649%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (15 samples, 0.11%)</title><rect x="34.8450%" y="85" width="0.1126%" height="15" fill="rgb(236,59,4)" fg:x="4641" fg:w="15"/><text x="35.0950%" y="95.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (7 samples, 0.05%)</title><rect x="34.9726%" y="101" width="0.0526%" height="15" fill="rgb(254,179,45)" fg:x="4658" fg:w="7"/><text x="35.2226%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_b_t_5_l_5 (38 samples, 0.29%)</title><rect x="34.7474%" y="117" width="0.2853%" height="15" fill="rgb(226,14,10)" fg:x="4628" fg:w="38"/><text x="34.9974%" y="127.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="35.0552%" y="85" width="0.0150%" height="15" fill="rgb(244,27,41)" fg:x="4669" fg:w="2"/><text x="35.3052%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (4 samples, 0.03%)</title><rect x="35.0552%" y="101" width="0.0300%" height="15" fill="rgb(235,35,32)" fg:x="4669" fg:w="4"/><text x="35.3052%" y="111.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (2 samples, 0.02%)</title><rect x="35.0852%" y="101" width="0.0150%" height="15" fill="rgb(218,68,31)" fg:x="4673" fg:w="2"/><text x="35.3352%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_c_t_5_l_3 (16 samples, 0.12%)</title><rect x="35.0327%" y="117" width="0.1201%" height="15" fill="rgb(207,120,37)" fg:x="4666" fg:w="16"/><text x="35.2827%" y="127.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (7 samples, 0.05%)</title><rect x="35.1002%" y="101" width="0.0526%" height="15" fill="rgb(227,98,0)" fg:x="4675" fg:w="7"/><text x="35.3502%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (6 samples, 0.05%)</title><rect x="35.3930%" y="101" width="0.0450%" height="15" fill="rgb(207,7,3)" fg:x="4714" fg:w="6"/><text x="35.6430%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (84 samples, 0.63%)</title><rect x="35.4381%" y="101" width="0.6307%" height="15" fill="rgb(206,98,19)" fg:x="4720" fg:w="84"/><text x="35.6881%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (67 samples, 0.50%)</title><rect x="35.5657%" y="85" width="0.5030%" height="15" fill="rgb(217,5,26)" fg:x="4737" fg:w="67"/><text x="35.8157%" y="95.50"></text></g><g><title>cc`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="36.0688%" y="101" width="0.0225%" height="15" fill="rgb(235,190,38)" fg:x="4804" fg:w="3"/><text x="36.3188%" y="111.50"></text></g><g><title>cc`__rdl_alloc (2 samples, 0.02%)</title><rect x="36.0913%" y="101" width="0.0150%" height="15" fill="rgb(247,86,24)" fg:x="4807" fg:w="2"/><text x="36.3413%" y="111.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (7 samples, 0.05%)</title><rect x="36.1964%" y="85" width="0.0526%" height="15" fill="rgb(205,101,16)" fg:x="4821" fg:w="7"/><text x="36.4464%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (6 samples, 0.05%)</title><rect x="36.2039%" y="69" width="0.0450%" height="15" fill="rgb(246,168,33)" fg:x="4822" fg:w="6"/><text x="36.4539%" y="79.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (8 samples, 0.06%)</title><rect x="36.2490%" y="85" width="0.0601%" height="15" fill="rgb(231,114,1)" fg:x="4828" fg:w="8"/><text x="36.4990%" y="95.50"></text></g><g><title>cc`__rdl_alloc (2 samples, 0.02%)</title><rect x="36.3090%" y="69" width="0.0150%" height="15" fill="rgb(207,184,53)" fg:x="4836" fg:w="2"/><text x="36.5590%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="36.3316%" y="69" width="0.0150%" height="15" fill="rgb(224,95,51)" fg:x="4839" fg:w="2"/><text x="36.5816%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.06%)</title><rect x="36.3090%" y="85" width="0.0601%" height="15" fill="rgb(212,188,45)" fg:x="4836" fg:w="8"/><text x="36.5590%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="36.3466%" y="69" width="0.0225%" height="15" fill="rgb(223,154,38)" fg:x="4841" fg:w="3"/><text x="36.5966%" y="79.50"></text></g><g><title>cc`core::slice::sort::merge_sort (2 samples, 0.02%)</title><rect x="36.3691%" y="85" width="0.0150%" height="15" fill="rgb(251,22,52)" fg:x="4844" fg:w="2"/><text x="36.6191%" y="95.50"></text></g><g><title>cc`__rdl_alloc (2 samples, 0.02%)</title><rect x="36.4066%" y="53" width="0.0150%" height="15" fill="rgb(229,209,22)" fg:x="4849" fg:w="2"/><text x="36.6566%" y="63.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.06%)</title><rect x="36.3991%" y="69" width="0.0601%" height="15" fill="rgb(234,138,34)" fg:x="4848" fg:w="8"/><text x="36.6491%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.04%)</title><rect x="36.4217%" y="53" width="0.0375%" height="15" fill="rgb(212,95,11)" fg:x="4851" fg:w="5"/><text x="36.6717%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.07%)</title><rect x="36.4667%" y="69" width="0.0676%" height="15" fill="rgb(240,179,47)" fg:x="4857" fg:w="9"/><text x="36.7167%" y="79.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (21 samples, 0.16%)</title><rect x="36.3841%" y="85" width="0.1577%" height="15" fill="rgb(240,163,11)" fg:x="4846" fg:w="21"/><text x="36.6341%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="36.5418%" y="85" width="0.0225%" height="15" fill="rgb(236,37,12)" fg:x="4867" fg:w="3"/><text x="36.7918%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.05%)</title><rect x="36.5643%" y="85" width="0.0526%" height="15" fill="rgb(232,164,16)" fg:x="4870" fg:w="7"/><text x="36.8143%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="36.6169%" y="85" width="0.0150%" height="15" fill="rgb(244,205,15)" fg:x="4877" fg:w="2"/><text x="36.8669%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="36.6319%" y="85" width="0.0150%" height="15" fill="rgb(223,117,47)" fg:x="4879" fg:w="2"/><text x="36.8819%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (74 samples, 0.56%)</title><rect x="36.1063%" y="101" width="0.5556%" height="15" fill="rgb(244,107,35)" fg:x="4809" fg:w="74"/><text x="36.3563%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (6 samples, 0.05%)</title><rect x="36.6769%" y="85" width="0.0450%" height="15" fill="rgb(205,140,8)" fg:x="4885" fg:w="6"/><text x="36.9269%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.02%)</title><rect x="36.7220%" y="85" width="0.0225%" height="15" fill="rgb(228,84,46)" fg:x="4891" fg:w="3"/><text x="36.9720%" y="95.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="36.7445%" y="69" width="0.0150%" height="15" fill="rgb(254,188,9)" fg:x="4894" fg:w="2"/><text x="36.9945%" y="79.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (4 samples, 0.03%)</title><rect x="36.7445%" y="85" width="0.0300%" height="15" fill="rgb(206,112,54)" fg:x="4894" fg:w="4"/><text x="36.9945%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="36.7595%" y="69" width="0.0150%" height="15" fill="rgb(216,84,49)" fg:x="4896" fg:w="2"/><text x="37.0095%" y="79.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (28 samples, 0.21%)</title><rect x="36.6619%" y="101" width="0.2102%" height="15" fill="rgb(214,194,35)" fg:x="4883" fg:w="28"/><text x="36.9119%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.09%)</title><rect x="36.7820%" y="85" width="0.0901%" height="15" fill="rgb(249,28,3)" fg:x="4899" fg:w="12"/><text x="37.0320%" y="95.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (70 samples, 0.53%)</title><rect x="36.8721%" y="101" width="0.5256%" height="15" fill="rgb(222,56,52)" fg:x="4911" fg:w="70"/><text x="37.1221%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="37.3977%" y="101" width="0.0150%" height="15" fill="rgb(245,217,50)" fg:x="4981" fg:w="2"/><text x="37.6477%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.05%)</title><rect x="37.4127%" y="101" width="0.0526%" height="15" fill="rgb(213,201,24)" fg:x="4983" fg:w="7"/><text x="37.6627%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.04%)</title><rect x="37.4653%" y="101" width="0.0375%" height="15" fill="rgb(248,116,28)" fg:x="4990" fg:w="5"/><text x="37.7153%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.06%)</title><rect x="37.5028%" y="101" width="0.0601%" height="15" fill="rgb(219,72,43)" fg:x="4995" fg:w="8"/><text x="37.7528%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="37.5629%" y="101" width="0.0300%" height="15" fill="rgb(209,138,14)" fg:x="5003" fg:w="4"/><text x="37.8129%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_c_t_5_l_4 (329 samples, 2.47%)</title><rect x="35.1528%" y="117" width="2.4702%" height="15" fill="rgb(222,18,33)" fg:x="4682" fg:w="329"/><text x="35.4028%" y="127.50">cc..</text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.03%)</title><rect x="37.5929%" y="101" width="0.0300%" height="15" fill="rgb(213,199,7)" fg:x="5007" fg:w="4"/><text x="37.8429%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (7 samples, 0.05%)</title><rect x="37.6380%" y="101" width="0.0526%" height="15" fill="rgb(250,110,10)" fg:x="5013" fg:w="7"/><text x="37.8880%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (5 samples, 0.04%)</title><rect x="37.6530%" y="85" width="0.0375%" height="15" fill="rgb(248,123,6)" fg:x="5015" fg:w="5"/><text x="37.9030%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (2 samples, 0.02%)</title><rect x="37.6905%" y="101" width="0.0150%" height="15" fill="rgb(206,91,31)" fg:x="5020" fg:w="2"/><text x="37.9405%" y="111.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="37.7055%" y="85" width="0.0150%" height="15" fill="rgb(211,154,13)" fg:x="5022" fg:w="2"/><text x="37.9555%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (3 samples, 0.02%)</title><rect x="37.7055%" y="101" width="0.0225%" height="15" fill="rgb(225,148,7)" fg:x="5022" fg:w="3"/><text x="37.9555%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (4 samples, 0.03%)</title><rect x="37.7281%" y="101" width="0.0300%" height="15" fill="rgb(220,160,43)" fg:x="5025" fg:w="4"/><text x="37.9781%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.02%)</title><rect x="37.7656%" y="101" width="0.0150%" height="15" fill="rgb(213,52,39)" fg:x="5030" fg:w="2"/><text x="38.0156%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_c_t_5_l_5 (22 samples, 0.17%)</title><rect x="37.6229%" y="117" width="0.1652%" height="15" fill="rgb(243,137,7)" fg:x="5011" fg:w="22"/><text x="37.8729%" y="127.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="38.0284%" y="101" width="0.0150%" height="15" fill="rgb(230,79,13)" fg:x="5065" fg:w="2"/><text x="38.2784%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.02%)</title><rect x="38.0434%" y="101" width="0.0225%" height="15" fill="rgb(247,105,23)" fg:x="5067" fg:w="3"/><text x="38.2934%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (107 samples, 0.80%)</title><rect x="38.0659%" y="101" width="0.8034%" height="15" fill="rgb(223,179,41)" fg:x="5070" fg:w="107"/><text x="38.3159%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (73 samples, 0.55%)</title><rect x="38.3212%" y="85" width="0.5481%" height="15" fill="rgb(218,9,34)" fg:x="5104" fg:w="73"/><text x="38.5712%" y="95.50"></text></g><g><title>cc`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="38.8693%" y="101" width="0.0225%" height="15" fill="rgb(222,106,8)" fg:x="5177" fg:w="3"/><text x="39.1193%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="38.9143%" y="85" width="0.0150%" height="15" fill="rgb(211,220,0)" fg:x="5183" fg:w="2"/><text x="39.1643%" y="95.50"></text></g><g><title>cc`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="38.9293%" y="85" width="0.0225%" height="15" fill="rgb(229,52,16)" fg:x="5185" fg:w="3"/><text x="39.1793%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.02%)</title><rect x="38.9594%" y="69" width="0.0225%" height="15" fill="rgb(212,155,18)" fg:x="5189" fg:w="3"/><text x="39.2094%" y="79.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (8 samples, 0.06%)</title><rect x="38.9594%" y="85" width="0.0601%" height="15" fill="rgb(242,21,14)" fg:x="5189" fg:w="8"/><text x="39.2094%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.04%)</title><rect x="38.9819%" y="69" width="0.0375%" height="15" fill="rgb(222,19,48)" fg:x="5192" fg:w="5"/><text x="39.2319%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="39.0194%" y="85" width="0.0225%" height="15" fill="rgb(232,45,27)" fg:x="5197" fg:w="3"/><text x="39.2694%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (21 samples, 0.16%)</title><rect x="38.8993%" y="101" width="0.1577%" height="15" fill="rgb(249,103,42)" fg:x="5181" fg:w="21"/><text x="39.1493%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (7 samples, 0.05%)</title><rect x="39.0945%" y="85" width="0.0526%" height="15" fill="rgb(246,81,33)" fg:x="5207" fg:w="7"/><text x="39.3445%" y="95.50"></text></g><g><title>cc`DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="39.1471%" y="69" width="0.0150%" height="15" fill="rgb(252,33,42)" fg:x="5214" fg:w="2"/><text x="39.3971%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.04%)</title><rect x="39.1471%" y="85" width="0.0375%" height="15" fill="rgb(209,212,41)" fg:x="5214" fg:w="5"/><text x="39.3971%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="39.1696%" y="69" width="0.0150%" height="15" fill="rgb(207,154,6)" fg:x="5217" fg:w="2"/><text x="39.4196%" y="79.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (4 samples, 0.03%)</title><rect x="39.2447%" y="69" width="0.0300%" height="15" fill="rgb(223,64,47)" fg:x="5227" fg:w="4"/><text x="39.4947%" y="79.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (18 samples, 0.14%)</title><rect x="39.1846%" y="85" width="0.1351%" height="15" fill="rgb(211,161,38)" fg:x="5219" fg:w="18"/><text x="39.4346%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (6 samples, 0.05%)</title><rect x="39.2747%" y="69" width="0.0450%" height="15" fill="rgb(219,138,40)" fg:x="5231" fg:w="6"/><text x="39.5247%" y="79.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (39 samples, 0.29%)</title><rect x="39.0570%" y="101" width="0.2928%" height="15" fill="rgb(241,228,46)" fg:x="5202" fg:w="39"/><text x="39.3070%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="39.3273%" y="85" width="0.0225%" height="15" fill="rgb(223,209,38)" fg:x="5238" fg:w="3"/><text x="39.5773%" y="95.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (61 samples, 0.46%)</title><rect x="39.3498%" y="101" width="0.4580%" height="15" fill="rgb(236,164,45)" fg:x="5241" fg:w="61"/><text x="39.5998%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="39.8153%" y="101" width="0.0225%" height="15" fill="rgb(231,15,5)" fg:x="5303" fg:w="3"/><text x="40.0653%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="39.8378%" y="101" width="0.0225%" height="15" fill="rgb(252,35,15)" fg:x="5306" fg:w="3"/><text x="40.0878%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="39.8603%" y="101" width="0.0150%" height="15" fill="rgb(248,181,18)" fg:x="5309" fg:w="2"/><text x="40.1103%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="39.8754%" y="101" width="0.0300%" height="15" fill="rgb(233,39,42)" fg:x="5311" fg:w="4"/><text x="40.1254%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_l_4_t_5_l_3 (283 samples, 2.12%)</title><rect x="37.7881%" y="117" width="2.1248%" height="15" fill="rgb(238,110,33)" fg:x="5033" fg:w="283"/><text x="38.0381%" y="127.50">c..</text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (7 samples, 0.05%)</title><rect x="41.2418%" y="101" width="0.0526%" height="15" fill="rgb(233,195,10)" fg:x="5493" fg:w="7"/><text x="41.4918%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (24 samples, 0.18%)</title><rect x="41.2944%" y="101" width="0.1802%" height="15" fill="rgb(254,105,3)" fg:x="5500" fg:w="24"/><text x="41.5444%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (874 samples, 6.56%)</title><rect x="41.4746%" y="101" width="6.5621%" height="15" fill="rgb(221,225,9)" fg:x="5524" fg:w="874"/><text x="41.7246%" y="111.50">cc`&lt;num_r..</text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (703 samples, 5.28%)</title><rect x="42.7585%" y="85" width="5.2782%" height="15" fill="rgb(224,227,45)" fg:x="5695" fg:w="703"/><text x="43.0085%" y="95.50">cc`num..</text></g><g><title>cc`DYLD-STUB$$free (6 samples, 0.05%)</title><rect x="48.0366%" y="101" width="0.0450%" height="15" fill="rgb(229,198,43)" fg:x="6398" fg:w="6"/><text x="48.2866%" y="111.50"></text></g><g><title>cc`DYLD-STUB$$malloc (3 samples, 0.02%)</title><rect x="48.0817%" y="101" width="0.0225%" height="15" fill="rgb(206,209,35)" fg:x="6404" fg:w="3"/><text x="48.3317%" y="111.50"></text></g><g><title>cc`DYLD-STUB$$memcpy (5 samples, 0.04%)</title><rect x="48.1042%" y="101" width="0.0375%" height="15" fill="rgb(245,195,53)" fg:x="6407" fg:w="5"/><text x="48.3542%" y="111.50"></text></g><g><title>cc`__rdl_alloc (5 samples, 0.04%)</title><rect x="48.1418%" y="101" width="0.0375%" height="15" fill="rgb(240,92,26)" fg:x="6412" fg:w="5"/><text x="48.3918%" y="111.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.03%)</title><rect x="48.1943%" y="101" width="0.0300%" height="15" fill="rgb(207,40,23)" fg:x="6419" fg:w="4"/><text x="48.4443%" y="111.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (7 samples, 0.05%)</title><rect x="48.2243%" y="101" width="0.0526%" height="15" fill="rgb(223,111,35)" fg:x="6423" fg:w="7"/><text x="48.4743%" y="111.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (8 samples, 0.06%)</title><rect x="48.5697%" y="85" width="0.0601%" height="15" fill="rgb(229,147,28)" fg:x="6469" fg:w="8"/><text x="48.8197%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (34 samples, 0.26%)</title><rect x="48.6298%" y="85" width="0.2553%" height="15" fill="rgb(211,29,28)" fg:x="6477" fg:w="34"/><text x="48.8798%" y="95.50"></text></g><g><title>cc`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="48.8851%" y="85" width="0.0225%" height="15" fill="rgb(228,72,33)" fg:x="6511" fg:w="3"/><text x="49.1351%" y="95.50"></text></g><g><title>cc`DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="48.9076%" y="85" width="0.0150%" height="15" fill="rgb(205,214,31)" fg:x="6514" fg:w="2"/><text x="49.1576%" y="95.50"></text></g><g><title>cc`DYLD-STUB$$malloc (5 samples, 0.04%)</title><rect x="48.9751%" y="69" width="0.0375%" height="15" fill="rgb(224,111,15)" fg:x="6523" fg:w="5"/><text x="49.2251%" y="79.50"></text></g><g><title>cc`__rdl_alloc (5 samples, 0.04%)</title><rect x="49.0127%" y="69" width="0.0375%" height="15" fill="rgb(253,21,26)" fg:x="6528" fg:w="5"/><text x="49.2627%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="49.0577%" y="69" width="0.0300%" height="15" fill="rgb(245,139,43)" fg:x="6534" fg:w="4"/><text x="49.3077%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (43 samples, 0.32%)</title><rect x="48.9301%" y="85" width="0.3228%" height="15" fill="rgb(252,170,7)" fg:x="6517" fg:w="43"/><text x="49.1801%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.17%)</title><rect x="49.0878%" y="69" width="0.1652%" height="15" fill="rgb(231,118,14)" fg:x="6538" fg:w="22"/><text x="49.3378%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::finish_grow (8 samples, 0.06%)</title><rect x="49.2529%" y="85" width="0.0601%" height="15" fill="rgb(238,83,0)" fg:x="6560" fg:w="8"/><text x="49.5029%" y="95.50"></text></g><g><title>cc`core::slice::sort::merge_sort (2 samples, 0.02%)</title><rect x="49.3130%" y="85" width="0.0150%" height="15" fill="rgb(221,39,39)" fg:x="6568" fg:w="2"/><text x="49.5630%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="49.4181%" y="53" width="0.0150%" height="15" fill="rgb(222,119,46)" fg:x="6582" fg:w="2"/><text x="49.6681%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="49.4331%" y="53" width="0.0150%" height="15" fill="rgb(222,165,49)" fg:x="6584" fg:w="2"/><text x="49.6831%" y="63.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (20 samples, 0.15%)</title><rect x="49.3881%" y="69" width="0.1502%" height="15" fill="rgb(219,113,52)" fg:x="6578" fg:w="20"/><text x="49.6381%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.09%)</title><rect x="49.4482%" y="53" width="0.0901%" height="15" fill="rgb(214,7,15)" fg:x="6586" fg:w="12"/><text x="49.6982%" y="63.50"></text></g><g><title>cc`core::slice::sort::merge_sort (2 samples, 0.02%)</title><rect x="49.5458%" y="69" width="0.0150%" height="15" fill="rgb(235,32,4)" fg:x="6599" fg:w="2"/><text x="49.7958%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (44 samples, 0.33%)</title><rect x="49.5608%" y="69" width="0.3304%" height="15" fill="rgb(238,90,54)" fg:x="6601" fg:w="44"/><text x="49.8108%" y="79.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (84 samples, 0.63%)</title><rect x="49.3280%" y="85" width="0.6307%" height="15" fill="rgb(213,208,19)" fg:x="6570" fg:w="84"/><text x="49.5780%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.06%)</title><rect x="49.8986%" y="69" width="0.0601%" height="15" fill="rgb(233,156,4)" fg:x="6646" fg:w="8"/><text x="50.1486%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="49.9587%" y="85" width="0.0225%" height="15" fill="rgb(207,194,5)" fg:x="6654" fg:w="3"/><text x="50.2087%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (33 samples, 0.25%)</title><rect x="49.9812%" y="85" width="0.2478%" height="15" fill="rgb(206,111,30)" fg:x="6657" fg:w="33"/><text x="50.2312%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.05%)</title><rect x="50.2290%" y="85" width="0.0526%" height="15" fill="rgb(243,70,54)" fg:x="6690" fg:w="7"/><text x="50.4790%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.08%)</title><rect x="50.2816%" y="85" width="0.0826%" height="15" fill="rgb(242,28,8)" fg:x="6697" fg:w="11"/><text x="50.5316%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.05%)</title><rect x="50.3641%" y="85" width="0.0526%" height="15" fill="rgb(219,106,18)" fg:x="6708" fg:w="7"/><text x="50.6141%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (285 samples, 2.14%)</title><rect x="48.2844%" y="101" width="2.1398%" height="15" fill="rgb(244,222,10)" fg:x="6431" fg:w="285"/><text x="48.5344%" y="111.50">c..</text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (17 samples, 0.13%)</title><rect x="50.6344%" y="85" width="0.1276%" height="15" fill="rgb(236,179,52)" fg:x="6744" fg:w="17"/><text x="50.8844%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (42 samples, 0.32%)</title><rect x="50.7621%" y="85" width="0.3153%" height="15" fill="rgb(213,23,39)" fg:x="6761" fg:w="42"/><text x="51.0121%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="51.0999%" y="69" width="0.0150%" height="15" fill="rgb(238,48,10)" fg:x="6806" fg:w="2"/><text x="51.3499%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="51.1149%" y="69" width="0.0300%" height="15" fill="rgb(251,196,23)" fg:x="6808" fg:w="4"/><text x="51.3649%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (22 samples, 0.17%)</title><rect x="51.0774%" y="85" width="0.1652%" height="15" fill="rgb(250,152,24)" fg:x="6803" fg:w="22"/><text x="51.3274%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.10%)</title><rect x="51.1450%" y="69" width="0.0976%" height="15" fill="rgb(209,150,17)" fg:x="6812" fg:w="13"/><text x="51.3950%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="51.2426%" y="85" width="0.0225%" height="15" fill="rgb(234,202,34)" fg:x="6825" fg:w="3"/><text x="51.4926%" y="95.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (32 samples, 0.24%)</title><rect x="51.3402%" y="69" width="0.2403%" height="15" fill="rgb(253,148,53)" fg:x="6838" fg:w="32"/><text x="51.5902%" y="79.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (86 samples, 0.65%)</title><rect x="51.2651%" y="85" width="0.6457%" height="15" fill="rgb(218,129,16)" fg:x="6828" fg:w="86"/><text x="51.5151%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (44 samples, 0.33%)</title><rect x="51.5804%" y="69" width="0.3304%" height="15" fill="rgb(216,85,19)" fg:x="6870" fg:w="44"/><text x="51.8304%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (3 samples, 0.02%)</title><rect x="51.9183%" y="85" width="0.0225%" height="15" fill="rgb(235,228,7)" fg:x="6915" fg:w="3"/><text x="52.1683%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (26 samples, 0.20%)</title><rect x="51.9408%" y="85" width="0.1952%" height="15" fill="rgb(245,175,0)" fg:x="6918" fg:w="26"/><text x="52.1908%" y="95.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.02%)</title><rect x="52.1436%" y="85" width="0.0225%" height="15" fill="rgb(208,168,36)" fg:x="6945" fg:w="3"/><text x="52.3936%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (236 samples, 1.77%)</title><rect x="50.4242%" y="101" width="1.7719%" height="15" fill="rgb(246,171,24)" fg:x="6716" fg:w="236"/><text x="50.6742%" y="111.50">c..</text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.03%)</title><rect x="52.1661%" y="85" width="0.0300%" height="15" fill="rgb(215,142,24)" fg:x="6948" fg:w="4"/><text x="52.4161%" y="95.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (563 samples, 4.23%)</title><rect x="52.1961%" y="101" width="4.2270%" height="15" fill="rgb(250,187,7)" fg:x="6952" fg:w="563"/><text x="52.4461%" y="111.50">cc`nu..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.07%)</title><rect x="56.4307%" y="101" width="0.0676%" height="15" fill="rgb(228,66,33)" fg:x="7516" fg:w="9"/><text x="56.6807%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (45 samples, 0.34%)</title><rect x="56.4982%" y="101" width="0.3379%" height="15" fill="rgb(234,215,21)" fg:x="7525" fg:w="45"/><text x="56.7482%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (27 samples, 0.20%)</title><rect x="56.8361%" y="101" width="0.2027%" height="15" fill="rgb(222,191,20)" fg:x="7570" fg:w="27"/><text x="57.0861%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (32 samples, 0.24%)</title><rect x="57.0388%" y="101" width="0.2403%" height="15" fill="rgb(245,79,54)" fg:x="7597" fg:w="32"/><text x="57.2888%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.02%)</title><rect x="57.2791%" y="101" width="0.0150%" height="15" fill="rgb(240,10,37)" fg:x="7629" fg:w="2"/><text x="57.5291%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.14%)</title><rect x="57.2941%" y="101" width="0.1351%" height="15" fill="rgb(214,192,32)" fg:x="7631" fg:w="18"/><text x="57.5441%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_l_4_t_5_l_4 (2,347 samples, 17.62%)</title><rect x="39.9129%" y="117" width="17.6214%" height="15" fill="rgb(209,36,54)" fg:x="5316" fg:w="2347"/><text x="40.1629%" y="127.50">cc`network_model_nc_qe_outp..</text></g><g><title>libsystem_platform.dylib`_platform_memset (14 samples, 0.11%)</title><rect x="57.4292%" y="101" width="0.1051%" height="15" fill="rgb(220,10,11)" fg:x="7649" fg:w="14"/><text x="57.6792%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (52 samples, 0.39%)</title><rect x="57.6320%" y="101" width="0.3904%" height="15" fill="rgb(221,106,17)" fg:x="7676" fg:w="52"/><text x="57.8820%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (39 samples, 0.29%)</title><rect x="57.7296%" y="85" width="0.2928%" height="15" fill="rgb(251,142,44)" fg:x="7689" fg:w="39"/><text x="57.9796%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.02%)</title><rect x="58.0524%" y="85" width="0.0225%" height="15" fill="rgb(238,13,15)" fg:x="7732" fg:w="3"/><text x="58.3024%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="58.0599%" y="69" width="0.0150%" height="15" fill="rgb(208,107,27)" fg:x="7733" fg:w="2"/><text x="58.3099%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="58.0824%" y="85" width="0.0150%" height="15" fill="rgb(205,136,37)" fg:x="7736" fg:w="2"/><text x="58.3324%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (11 samples, 0.08%)</title><rect x="58.0299%" y="101" width="0.0826%" height="15" fill="rgb(250,205,27)" fg:x="7729" fg:w="11"/><text x="58.2799%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="58.0975%" y="85" width="0.0150%" height="15" fill="rgb(210,80,43)" fg:x="7738" fg:w="2"/><text x="58.3475%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="58.1200%" y="85" width="0.0150%" height="15" fill="rgb(247,160,36)" fg:x="7741" fg:w="2"/><text x="58.3700%" y="95.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (4 samples, 0.03%)</title><rect x="58.1575%" y="69" width="0.0300%" height="15" fill="rgb(234,13,49)" fg:x="7746" fg:w="4"/><text x="58.4075%" y="79.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.02%)</title><rect x="58.1650%" y="53" width="0.0225%" height="15" fill="rgb(234,122,0)" fg:x="7747" fg:w="3"/><text x="58.4150%" y="63.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (9 samples, 0.07%)</title><rect x="58.1425%" y="85" width="0.0676%" height="15" fill="rgb(207,146,38)" fg:x="7744" fg:w="9"/><text x="58.3925%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.02%)</title><rect x="58.1876%" y="69" width="0.0225%" height="15" fill="rgb(207,177,25)" fg:x="7750" fg:w="3"/><text x="58.4376%" y="79.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (15 samples, 0.11%)</title><rect x="58.1125%" y="101" width="0.1126%" height="15" fill="rgb(211,178,42)" fg:x="7740" fg:w="15"/><text x="58.3625%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="58.2101%" y="85" width="0.0150%" height="15" fill="rgb(230,69,54)" fg:x="7753" fg:w="2"/><text x="58.4601%" y="95.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (28 samples, 0.21%)</title><rect x="58.2251%" y="101" width="0.2102%" height="15" fill="rgb(214,135,41)" fg:x="7755" fg:w="28"/><text x="58.4751%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_q_4_t_5_l_3 (121 samples, 0.91%)</title><rect x="57.5343%" y="117" width="0.9085%" height="15" fill="rgb(237,67,25)" fg:x="7663" fg:w="121"/><text x="57.7843%" y="127.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="58.8783%" y="101" width="0.0150%" height="15" fill="rgb(222,189,50)" fg:x="7842" fg:w="2"/><text x="59.1283%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (21 samples, 0.16%)</title><rect x="58.8933%" y="101" width="0.1577%" height="15" fill="rgb(245,148,34)" fg:x="7844" fg:w="21"/><text x="59.1433%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (486 samples, 3.65%)</title><rect x="59.0510%" y="101" width="3.6489%" height="15" fill="rgb(222,29,6)" fg:x="7865" fg:w="486"/><text x="59.3010%" y="111.50">cc`&lt;..</text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (364 samples, 2.73%)</title><rect x="59.9670%" y="85" width="2.7329%" height="15" fill="rgb(221,189,43)" fg:x="7987" fg:w="364"/><text x="60.2170%" y="95.50">cc..</text></g><g><title>cc`DYLD-STUB$$free (4 samples, 0.03%)</title><rect x="62.6999%" y="101" width="0.0300%" height="15" fill="rgb(207,36,27)" fg:x="8351" fg:w="4"/><text x="62.9499%" y="111.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (2 samples, 0.02%)</title><rect x="62.7525%" y="101" width="0.0150%" height="15" fill="rgb(217,90,24)" fg:x="8358" fg:w="2"/><text x="63.0025%" y="111.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (8 samples, 0.06%)</title><rect x="62.8726%" y="85" width="0.0601%" height="15" fill="rgb(224,66,35)" fg:x="8374" fg:w="8"/><text x="63.1226%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="62.9176%" y="69" width="0.0150%" height="15" fill="rgb(221,13,50)" fg:x="8380" fg:w="2"/><text x="63.1676%" y="79.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (10 samples, 0.08%)</title><rect x="62.9327%" y="85" width="0.0751%" height="15" fill="rgb(236,68,49)" fg:x="8382" fg:w="10"/><text x="63.1827%" y="95.50"></text></g><g><title>cc`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="63.0077%" y="85" width="0.0225%" height="15" fill="rgb(229,146,28)" fg:x="8392" fg:w="3"/><text x="63.2577%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.06%)</title><rect x="63.0303%" y="85" width="0.0601%" height="15" fill="rgb(225,31,38)" fg:x="8395" fg:w="8"/><text x="63.2803%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="63.0603%" y="69" width="0.0300%" height="15" fill="rgb(250,208,3)" fg:x="8399" fg:w="4"/><text x="63.3103%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="63.1204%" y="53" width="0.0150%" height="15" fill="rgb(246,54,23)" fg:x="8407" fg:w="2"/><text x="63.3704%" y="63.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.07%)</title><rect x="63.1053%" y="69" width="0.0676%" height="15" fill="rgb(243,76,11)" fg:x="8405" fg:w="9"/><text x="63.3553%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.04%)</title><rect x="63.1354%" y="53" width="0.0375%" height="15" fill="rgb(245,21,50)" fg:x="8409" fg:w="5"/><text x="63.3854%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.07%)</title><rect x="63.1729%" y="69" width="0.0676%" height="15" fill="rgb(228,9,43)" fg:x="8414" fg:w="9"/><text x="63.4229%" y="79.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.02%)</title><rect x="63.2405%" y="69" width="0.0150%" height="15" fill="rgb(208,100,47)" fg:x="8423" fg:w="2"/><text x="63.4905%" y="79.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (22 samples, 0.17%)</title><rect x="63.1053%" y="85" width="0.1652%" height="15" fill="rgb(232,26,8)" fg:x="8405" fg:w="22"/><text x="63.3553%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="63.2555%" y="69" width="0.0150%" height="15" fill="rgb(216,166,38)" fg:x="8425" fg:w="2"/><text x="63.5055%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="63.2780%" y="85" width="0.0150%" height="15" fill="rgb(251,202,51)" fg:x="8428" fg:w="2"/><text x="63.5280%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.07%)</title><rect x="63.2930%" y="85" width="0.0676%" height="15" fill="rgb(254,216,34)" fg:x="8430" fg:w="9"/><text x="63.5430%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.04%)</title><rect x="63.3606%" y="85" width="0.0375%" height="15" fill="rgb(251,32,27)" fg:x="8439" fg:w="5"/><text x="63.6106%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="63.3982%" y="85" width="0.0150%" height="15" fill="rgb(208,127,28)" fg:x="8444" fg:w="2"/><text x="63.6482%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (89 samples, 0.67%)</title><rect x="62.7750%" y="101" width="0.6682%" height="15" fill="rgb(224,137,22)" fg:x="8361" fg:w="89"/><text x="63.0250%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="63.4132%" y="85" width="0.0300%" height="15" fill="rgb(254,70,32)" fg:x="8446" fg:w="4"/><text x="63.6632%" y="95.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (9 samples, 0.07%)</title><rect x="63.4882%" y="85" width="0.0676%" height="15" fill="rgb(229,75,37)" fg:x="8456" fg:w="9"/><text x="63.7382%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="63.5408%" y="69" width="0.0150%" height="15" fill="rgb(252,64,23)" fg:x="8463" fg:w="2"/><text x="63.7908%" y="79.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (10 samples, 0.08%)</title><rect x="63.5558%" y="85" width="0.0751%" height="15" fill="rgb(232,162,48)" fg:x="8465" fg:w="10"/><text x="63.8058%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.03%)</title><rect x="63.6309%" y="85" width="0.0300%" height="15" fill="rgb(246,160,12)" fg:x="8475" fg:w="4"/><text x="63.8809%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="63.6459%" y="69" width="0.0150%" height="15" fill="rgb(247,166,0)" fg:x="8477" fg:w="2"/><text x="63.8959%" y="79.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (15 samples, 0.11%)</title><rect x="63.6684%" y="69" width="0.1126%" height="15" fill="rgb(249,219,21)" fg:x="8480" fg:w="15"/><text x="63.9184%" y="79.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (7 samples, 0.05%)</title><rect x="63.7285%" y="53" width="0.0526%" height="15" fill="rgb(205,209,3)" fg:x="8488" fg:w="7"/><text x="63.9785%" y="63.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (25 samples, 0.19%)</title><rect x="63.6609%" y="85" width="0.1877%" height="15" fill="rgb(243,44,1)" fg:x="8479" fg:w="25"/><text x="63.9109%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (9 samples, 0.07%)</title><rect x="63.7811%" y="69" width="0.0676%" height="15" fill="rgb(206,159,16)" fg:x="8495" fg:w="9"/><text x="64.0311%" y="79.50"></text></g><g><title>cc`core::slice::sort::merge_sort (2 samples, 0.02%)</title><rect x="63.8486%" y="85" width="0.0150%" height="15" fill="rgb(244,77,30)" fg:x="8504" fg:w="2"/><text x="64.0986%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.06%)</title><rect x="63.8637%" y="85" width="0.0601%" height="15" fill="rgb(218,69,12)" fg:x="8506" fg:w="8"/><text x="64.1137%" y="95.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.02%)</title><rect x="63.9237%" y="85" width="0.0150%" height="15" fill="rgb(212,87,7)" fg:x="8514" fg:w="2"/><text x="64.1737%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (69 samples, 0.52%)</title><rect x="63.4432%" y="101" width="0.5181%" height="15" fill="rgb(245,114,25)" fg:x="8450" fg:w="69"/><text x="63.6932%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.02%)</title><rect x="63.9387%" y="85" width="0.0225%" height="15" fill="rgb(210,61,42)" fg:x="8516" fg:w="3"/><text x="64.1887%" y="95.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (296 samples, 2.22%)</title><rect x="63.9613%" y="101" width="2.2224%" height="15" fill="rgb(211,52,33)" fg:x="8519" fg:w="296"/><text x="64.2113%" y="111.50">c..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="66.1836%" y="101" width="0.0150%" height="15" fill="rgb(234,58,33)" fg:x="8815" fg:w="2"/><text x="66.4336%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.04%)</title><rect x="66.1987%" y="101" width="0.0375%" height="15" fill="rgb(220,115,36)" fg:x="8817" fg:w="5"/><text x="66.4487%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.06%)</title><rect x="66.2362%" y="101" width="0.0601%" height="15" fill="rgb(243,153,54)" fg:x="8822" fg:w="8"/><text x="66.4862%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.05%)</title><rect x="66.2963%" y="101" width="0.0450%" height="15" fill="rgb(251,47,18)" fg:x="8830" fg:w="6"/><text x="66.5463%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.05%)</title><rect x="66.3488%" y="101" width="0.0526%" height="15" fill="rgb(242,102,42)" fg:x="8837" fg:w="7"/><text x="66.5988%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_q_4_t_5_l_4 (1,066 samples, 8.00%)</title><rect x="58.4428%" y="117" width="8.0036%" height="15" fill="rgb(234,31,38)" fg:x="7784" fg:w="1066"/><text x="58.6928%" y="127.50">cc`network_..</text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.05%)</title><rect x="66.4014%" y="101" width="0.0450%" height="15" fill="rgb(221,117,51)" fg:x="8844" fg:w="6"/><text x="66.6514%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="66.4690%" y="101" width="0.0150%" height="15" fill="rgb(212,20,18)" fg:x="8853" fg:w="2"/><text x="66.7190%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (38 samples, 0.29%)</title><rect x="66.4840%" y="101" width="0.2853%" height="15" fill="rgb(245,133,36)" fg:x="8855" fg:w="38"/><text x="66.7340%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (29 samples, 0.22%)</title><rect x="66.5515%" y="85" width="0.2177%" height="15" fill="rgb(212,6,19)" fg:x="8864" fg:w="29"/><text x="66.8015%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="66.7693%" y="85" width="0.0150%" height="15" fill="rgb(218,1,36)" fg:x="8893" fg:w="2"/><text x="67.0193%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="66.7693%" y="69" width="0.0150%" height="15" fill="rgb(246,84,54)" fg:x="8893" fg:w="2"/><text x="67.0193%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="66.7843%" y="85" width="0.0225%" height="15" fill="rgb(242,110,6)" fg:x="8895" fg:w="3"/><text x="67.0343%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (6 samples, 0.05%)</title><rect x="66.7693%" y="101" width="0.0450%" height="15" fill="rgb(214,47,5)" fg:x="8893" fg:w="6"/><text x="67.0193%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_q_4_t_5_l_5 (72 samples, 0.54%)</title><rect x="66.4464%" y="117" width="0.5406%" height="15" fill="rgb(218,159,25)" fg:x="8850" fg:w="72"/><text x="66.6964%" y="127.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (22 samples, 0.17%)</title><rect x="66.8218%" y="101" width="0.1652%" height="15" fill="rgb(215,211,28)" fg:x="8900" fg:w="22"/><text x="67.0718%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (28 samples, 0.21%)</title><rect x="66.9870%" y="117" width="0.2102%" height="15" fill="rgb(238,59,32)" fg:x="8922" fg:w="28"/><text x="67.2370%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.08%)</title><rect x="67.1972%" y="117" width="0.0826%" height="15" fill="rgb(226,82,3)" fg:x="8950" fg:w="11"/><text x="67.4472%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.09%)</title><rect x="67.2798%" y="117" width="0.0901%" height="15" fill="rgb(240,164,32)" fg:x="8961" fg:w="12"/><text x="67.5298%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.17%)</title><rect x="67.3699%" y="117" width="0.1652%" height="15" fill="rgb(232,46,7)" fg:x="8973" fg:w="22"/><text x="67.6199%" y="127.50"></text></g><g><title>cc`&lt;network_model_nc::NetworkModelNC as cc_common::NetworkModel&gt;::compute_belief_bounds (4,755 samples, 35.70%)</title><rect x="32.0595%" y="133" width="35.7009%" height="15" fill="rgb(229,129,53)" fg:x="4270" fg:w="4755"/><text x="32.3095%" y="143.50">cc`&lt;network_model_nc::NetworkModelNC as cc_common::Network..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (30 samples, 0.23%)</title><rect x="67.5351%" y="117" width="0.2252%" height="15" fill="rgb(234,188,29)" fg:x="8995" fg:w="30"/><text x="67.7851%" y="127.50"></text></g><g><title>cc`cc::CongCtrlState&lt;NM&gt;::get_relevant_history (2 samples, 0.02%)</title><rect x="67.7904%" y="133" width="0.0150%" height="15" fill="rgb(246,141,4)" fg:x="9029" fg:w="2"/><text x="68.0404%" y="143.50"></text></g><g><title>cc`cc::CongCtrlState&lt;NM&gt;::compute_belief_bounds (4,763 samples, 35.76%)</title><rect x="32.0595%" y="149" width="35.7609%" height="15" fill="rgb(229,23,39)" fg:x="4270" fg:w="4763"/><text x="32.3095%" y="159.50">cc`cc::CongCtrlState&lt;NM&gt;::compute_belief_bounds</text></g><g><title>cc`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="67.8204%" y="133" width="0.0225%" height="15" fill="rgb(206,12,3)" fg:x="9033" fg:w="3"/><text x="68.0704%" y="143.50"></text></g><g><title>cc`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="67.8279%" y="117" width="0.0150%" height="15" fill="rgb(252,226,20)" fg:x="9034" fg:w="2"/><text x="68.0779%" y="127.50"></text></g><g><title>cc`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.02%)</title><rect x="67.8279%" y="101" width="0.0150%" height="15" fill="rgb(216,123,35)" fg:x="9034" fg:w="2"/><text x="68.0779%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (18 samples, 0.14%)</title><rect x="67.8429%" y="117" width="0.1351%" height="15" fill="rgb(212,68,40)" fg:x="9036" fg:w="18"/><text x="68.0929%" y="127.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (30 samples, 0.23%)</title><rect x="67.9781%" y="117" width="0.2252%" height="15" fill="rgb(254,125,32)" fg:x="9054" fg:w="30"/><text x="68.2281%" y="127.50"></text></g><g><title>cc`DYLD-STUB$$free (8 samples, 0.06%)</title><rect x="68.2033%" y="117" width="0.0601%" height="15" fill="rgb(253,97,22)" fg:x="9084" fg:w="8"/><text x="68.4533%" y="127.50"></text></g><g><title>cc`DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="68.2634%" y="117" width="0.0150%" height="15" fill="rgb(241,101,14)" fg:x="9092" fg:w="2"/><text x="68.5134%" y="127.50"></text></g><g><title>cc`__rdl_alloc (2 samples, 0.02%)</title><rect x="68.2784%" y="117" width="0.0150%" height="15" fill="rgb(238,103,29)" fg:x="9094" fg:w="2"/><text x="68.5284%" y="127.50"></text></g><g><title>cc`__rdl_dealloc (2 samples, 0.02%)</title><rect x="68.2934%" y="117" width="0.0150%" height="15" fill="rgb(233,195,47)" fg:x="9096" fg:w="2"/><text x="68.5434%" y="127.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (3 samples, 0.02%)</title><rect x="68.3159%" y="117" width="0.0225%" height="15" fill="rgb(246,218,30)" fg:x="9099" fg:w="3"/><text x="68.5659%" y="127.50"></text></g><g><title>cc`network_model_nc::NetworkModelNC::get_observation_vectors (3 samples, 0.02%)</title><rect x="68.3385%" y="117" width="0.0225%" height="15" fill="rgb(219,145,47)" fg:x="9102" fg:w="3"/><text x="68.5885%" y="127.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (74 samples, 0.56%)</title><rect x="68.5036%" y="101" width="0.5556%" height="15" fill="rgb(243,12,26)" fg:x="9124" fg:w="74"/><text x="68.7536%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (51 samples, 0.38%)</title><rect x="68.6763%" y="85" width="0.3829%" height="15" fill="rgb(214,87,16)" fg:x="9147" fg:w="51"/><text x="68.9263%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="69.0818%" y="85" width="0.0150%" height="15" fill="rgb(208,99,42)" fg:x="9201" fg:w="2"/><text x="69.3318%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.02%)</title><rect x="69.0968%" y="85" width="0.0225%" height="15" fill="rgb(253,99,2)" fg:x="9203" fg:w="3"/><text x="69.3468%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (3 samples, 0.02%)</title><rect x="69.1193%" y="85" width="0.0225%" height="15" fill="rgb(220,168,23)" fg:x="9206" fg:w="3"/><text x="69.3693%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (11 samples, 0.08%)</title><rect x="69.0667%" y="101" width="0.0826%" height="15" fill="rgb(242,38,24)" fg:x="9199" fg:w="11"/><text x="69.3167%" y="111.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (10 samples, 0.08%)</title><rect x="69.1869%" y="69" width="0.0751%" height="15" fill="rgb(225,182,9)" fg:x="9215" fg:w="10"/><text x="69.4369%" y="79.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (8 samples, 0.06%)</title><rect x="69.2019%" y="53" width="0.0601%" height="15" fill="rgb(243,178,37)" fg:x="9217" fg:w="8"/><text x="69.4519%" y="63.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (22 samples, 0.17%)</title><rect x="69.1493%" y="101" width="0.1652%" height="15" fill="rgb(232,139,19)" fg:x="9210" fg:w="22"/><text x="69.3993%" y="111.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (19 samples, 0.14%)</title><rect x="69.1719%" y="85" width="0.1427%" height="15" fill="rgb(225,201,24)" fg:x="9213" fg:w="19"/><text x="69.4219%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (7 samples, 0.05%)</title><rect x="69.2620%" y="69" width="0.0526%" height="15" fill="rgb(221,47,46)" fg:x="9225" fg:w="7"/><text x="69.5120%" y="79.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (44 samples, 0.33%)</title><rect x="69.3145%" y="101" width="0.3304%" height="15" fill="rgb(249,23,13)" fg:x="9232" fg:w="44"/><text x="69.5645%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="69.6599%" y="101" width="0.0225%" height="15" fill="rgb(219,9,5)" fg:x="9278" fg:w="3"/><text x="69.9099%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_a_4_3_t_5_l_2 (179 samples, 1.34%)</title><rect x="68.3610%" y="117" width="1.3439%" height="15" fill="rgb(254,171,16)" fg:x="9105" fg:w="179"/><text x="68.6110%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="69.6824%" y="101" width="0.0225%" height="15" fill="rgb(230,171,20)" fg:x="9281" fg:w="3"/><text x="69.9324%" y="111.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (6 samples, 0.05%)</title><rect x="71.5144%" y="101" width="0.0450%" height="15" fill="rgb(210,71,41)" fg:x="9525" fg:w="6"/><text x="71.7644%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (37 samples, 0.28%)</title><rect x="71.5594%" y="101" width="0.2778%" height="15" fill="rgb(206,173,20)" fg:x="9531" fg:w="37"/><text x="71.8094%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (1,536 samples, 11.53%)</title><rect x="71.8372%" y="101" width="11.5324%" height="15" fill="rgb(233,88,34)" fg:x="9568" fg:w="1536"/><text x="72.0872%" y="111.50">cc`&lt;num_rational:..</text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (1,231 samples, 9.24%)</title><rect x="74.1272%" y="85" width="9.2424%" height="15" fill="rgb(223,209,46)" fg:x="9873" fg:w="1231"/><text x="74.3772%" y="95.50">cc`num_ration..</text></g><g><title>cc`DYLD-STUB$$free (11 samples, 0.08%)</title><rect x="83.3696%" y="101" width="0.0826%" height="15" fill="rgb(250,43,18)" fg:x="11104" fg:w="11"/><text x="83.6196%" y="111.50"></text></g><g><title>cc`DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="83.4522%" y="101" width="0.0150%" height="15" fill="rgb(208,13,10)" fg:x="11115" fg:w="2"/><text x="83.7022%" y="111.50"></text></g><g><title>cc`DYLD-STUB$$memcpy (5 samples, 0.04%)</title><rect x="83.4672%" y="101" width="0.0375%" height="15" fill="rgb(212,200,36)" fg:x="11117" fg:w="5"/><text x="83.7172%" y="111.50"></text></g><g><title>cc`__rdl_alloc (3 samples, 0.02%)</title><rect x="83.5048%" y="101" width="0.0225%" height="15" fill="rgb(225,90,30)" fg:x="11122" fg:w="3"/><text x="83.7548%" y="111.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="83.5348%" y="101" width="0.0150%" height="15" fill="rgb(236,182,39)" fg:x="11126" fg:w="2"/><text x="83.7848%" y="111.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (6 samples, 0.05%)</title><rect x="83.5498%" y="101" width="0.0450%" height="15" fill="rgb(212,144,35)" fg:x="11128" fg:w="6"/><text x="83.7998%" y="111.50"></text></g><g><title>cc`core::slice::sort::merge_sort (4 samples, 0.03%)</title><rect x="83.5949%" y="101" width="0.0300%" height="15" fill="rgb(228,63,44)" fg:x="11134" fg:w="4"/><text x="83.8449%" y="111.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (36 samples, 0.27%)</title><rect x="83.9628%" y="85" width="0.2703%" height="15" fill="rgb(228,109,6)" fg:x="11183" fg:w="36"/><text x="84.2128%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (25 samples, 0.19%)</title><rect x="84.0453%" y="69" width="0.1877%" height="15" fill="rgb(238,117,24)" fg:x="11194" fg:w="25"/><text x="84.2953%" y="79.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (41 samples, 0.31%)</title><rect x="84.2331%" y="85" width="0.3078%" height="15" fill="rgb(242,26,26)" fg:x="11219" fg:w="41"/><text x="84.4831%" y="95.50"></text></g><g><title>cc`DYLD-STUB$$free (8 samples, 0.06%)</title><rect x="84.5409%" y="85" width="0.0601%" height="15" fill="rgb(221,92,48)" fg:x="11260" fg:w="8"/><text x="84.7909%" y="95.50"></text></g><g><title>cc`__rdl_alloc (8 samples, 0.06%)</title><rect x="84.6685%" y="69" width="0.0601%" height="15" fill="rgb(209,209,32)" fg:x="11277" fg:w="8"/><text x="84.9185%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.07%)</title><rect x="84.7361%" y="69" width="0.0676%" height="15" fill="rgb(221,70,22)" fg:x="11286" fg:w="9"/><text x="84.9861%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (46 samples, 0.35%)</title><rect x="84.6009%" y="85" width="0.3454%" height="15" fill="rgb(248,145,5)" fg:x="11268" fg:w="46"/><text x="84.8509%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.14%)</title><rect x="84.8037%" y="69" width="0.1427%" height="15" fill="rgb(226,116,26)" fg:x="11295" fg:w="19"/><text x="85.0537%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::finish_grow (8 samples, 0.06%)</title><rect x="84.9463%" y="85" width="0.0601%" height="15" fill="rgb(244,5,17)" fg:x="11314" fg:w="8"/><text x="85.1963%" y="95.50"></text></g><g><title>cc`core::slice::sort::merge_sort (2 samples, 0.02%)</title><rect x="85.0064%" y="85" width="0.0150%" height="15" fill="rgb(252,159,33)" fg:x="11322" fg:w="2"/><text x="85.2564%" y="95.50"></text></g><g><title>cc`DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="85.0815%" y="53" width="0.0150%" height="15" fill="rgb(206,71,0)" fg:x="11332" fg:w="2"/><text x="85.3315%" y="63.50"></text></g><g><title>cc`__rdl_alloc (2 samples, 0.02%)</title><rect x="85.0965%" y="53" width="0.0150%" height="15" fill="rgb(233,118,54)" fg:x="11334" fg:w="2"/><text x="85.3465%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.04%)</title><rect x="85.1115%" y="53" width="0.0375%" height="15" fill="rgb(234,83,48)" fg:x="11336" fg:w="5"/><text x="85.3615%" y="63.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (23 samples, 0.17%)</title><rect x="85.0514%" y="69" width="0.1727%" height="15" fill="rgb(228,3,54)" fg:x="11328" fg:w="23"/><text x="85.3014%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.08%)</title><rect x="85.1490%" y="53" width="0.0751%" height="15" fill="rgb(226,155,13)" fg:x="11341" fg:w="10"/><text x="85.3990%" y="63.50"></text></g><g><title>cc`core::slice::sort::merge_sort (2 samples, 0.02%)</title><rect x="85.2316%" y="69" width="0.0150%" height="15" fill="rgb(241,28,37)" fg:x="11352" fg:w="2"/><text x="85.4816%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (25 samples, 0.19%)</title><rect x="85.2541%" y="69" width="0.1877%" height="15" fill="rgb(233,93,10)" fg:x="11355" fg:w="25"/><text x="85.5041%" y="79.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (63 samples, 0.47%)</title><rect x="85.0214%" y="85" width="0.4730%" height="15" fill="rgb(225,113,19)" fg:x="11324" fg:w="63"/><text x="85.2714%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.04%)</title><rect x="85.4569%" y="69" width="0.0375%" height="15" fill="rgb(241,2,18)" fg:x="11382" fg:w="5"/><text x="85.7069%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.02%)</title><rect x="85.4944%" y="85" width="0.0150%" height="15" fill="rgb(228,207,21)" fg:x="11387" fg:w="2"/><text x="85.7444%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.04%)</title><rect x="85.5094%" y="85" width="0.0375%" height="15" fill="rgb(213,211,35)" fg:x="11389" fg:w="5"/><text x="85.7594%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (33 samples, 0.25%)</title><rect x="85.5470%" y="85" width="0.2478%" height="15" fill="rgb(209,83,10)" fg:x="11394" fg:w="33"/><text x="85.7970%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.08%)</title><rect x="85.7947%" y="85" width="0.0826%" height="15" fill="rgb(209,164,1)" fg:x="11427" fg:w="11"/><text x="86.0447%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.05%)</title><rect x="85.8773%" y="85" width="0.0450%" height="15" fill="rgb(213,184,43)" fg:x="11438" fg:w="6"/><text x="86.1273%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.04%)</title><rect x="85.9299%" y="85" width="0.0375%" height="15" fill="rgb(231,61,34)" fg:x="11445" fg:w="5"/><text x="86.1799%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (313 samples, 2.35%)</title><rect x="83.6249%" y="101" width="2.3500%" height="15" fill="rgb(235,75,3)" fg:x="11138" fg:w="313"/><text x="83.8749%" y="111.50">c..</text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (42 samples, 0.32%)</title><rect x="86.1401%" y="85" width="0.3153%" height="15" fill="rgb(220,106,47)" fg:x="11473" fg:w="42"/><text x="86.3901%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (33 samples, 0.25%)</title><rect x="86.2077%" y="69" width="0.2478%" height="15" fill="rgb(210,196,33)" fg:x="11482" fg:w="33"/><text x="86.4577%" y="79.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (37 samples, 0.28%)</title><rect x="86.4554%" y="85" width="0.2778%" height="15" fill="rgb(229,154,42)" fg:x="11515" fg:w="37"/><text x="86.7054%" y="95.50"></text></g><g><title>cc`DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="86.7483%" y="69" width="0.0150%" height="15" fill="rgb(228,114,26)" fg:x="11554" fg:w="2"/><text x="86.9983%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="86.7708%" y="69" width="0.0225%" height="15" fill="rgb(208,144,1)" fg:x="11557" fg:w="3"/><text x="87.0208%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="86.7933%" y="69" width="0.0225%" height="15" fill="rgb(239,112,37)" fg:x="11560" fg:w="3"/><text x="87.0433%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (23 samples, 0.17%)</title><rect x="86.7332%" y="85" width="0.1727%" height="15" fill="rgb(210,96,50)" fg:x="11552" fg:w="23"/><text x="86.9832%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.09%)</title><rect x="86.8158%" y="69" width="0.0901%" height="15" fill="rgb(222,178,2)" fg:x="11563" fg:w="12"/><text x="87.0658%" y="79.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (64 samples, 0.48%)</title><rect x="87.0261%" y="69" width="0.4805%" height="15" fill="rgb(226,74,18)" fg:x="11591" fg:w="64"/><text x="87.2761%" y="79.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (39 samples, 0.29%)</title><rect x="87.2138%" y="53" width="0.2928%" height="15" fill="rgb(225,67,54)" fg:x="11616" fg:w="39"/><text x="87.4638%" y="63.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (139 samples, 1.04%)</title><rect x="86.9134%" y="85" width="1.0436%" height="15" fill="rgb(251,92,32)" fg:x="11576" fg:w="139"/><text x="87.1634%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (60 samples, 0.45%)</title><rect x="87.5066%" y="69" width="0.4505%" height="15" fill="rgb(228,149,22)" fg:x="11655" fg:w="60"/><text x="87.7566%" y="79.50"></text></g><g><title>cc`core::slice::sort::merge_sort (4 samples, 0.03%)</title><rect x="87.9571%" y="85" width="0.0300%" height="15" fill="rgb(243,54,13)" fg:x="11715" fg:w="4"/><text x="88.2071%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (3 samples, 0.02%)</title><rect x="87.9871%" y="85" width="0.0225%" height="15" fill="rgb(243,180,28)" fg:x="11719" fg:w="3"/><text x="88.2371%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (27 samples, 0.20%)</title><rect x="88.0096%" y="85" width="0.2027%" height="15" fill="rgb(208,167,24)" fg:x="11722" fg:w="27"/><text x="88.2596%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (303 samples, 2.27%)</title><rect x="85.9749%" y="101" width="2.2749%" height="15" fill="rgb(245,73,45)" fg:x="11451" fg:w="303"/><text x="86.2249%" y="111.50">c..</text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.04%)</title><rect x="88.2123%" y="85" width="0.0375%" height="15" fill="rgb(237,203,48)" fg:x="11749" fg:w="5"/><text x="88.4623%" y="95.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (820 samples, 6.16%)</title><rect x="88.2499%" y="101" width="6.1566%" height="15" fill="rgb(211,197,16)" fg:x="11754" fg:w="820"/><text x="88.4999%" y="111.50">cc`num_r..</text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.02%)</title><rect x="94.4065%" y="101" width="0.0150%" height="15" fill="rgb(243,99,51)" fg:x="12574" fg:w="2"/><text x="94.6565%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.08%)</title><rect x="94.4215%" y="101" width="0.0751%" height="15" fill="rgb(215,123,29)" fg:x="12576" fg:w="10"/><text x="94.6715%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (39 samples, 0.29%)</title><rect x="94.4966%" y="101" width="0.2928%" height="15" fill="rgb(239,186,37)" fg:x="12586" fg:w="39"/><text x="94.7466%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (25 samples, 0.19%)</title><rect x="94.7894%" y="101" width="0.1877%" height="15" fill="rgb(252,136,39)" fg:x="12625" fg:w="25"/><text x="95.0394%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.14%)</title><rect x="94.9846%" y="101" width="0.1351%" height="15" fill="rgb(223,213,32)" fg:x="12651" fg:w="18"/><text x="95.2346%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.02%)</title><rect x="95.1198%" y="101" width="0.0150%" height="15" fill="rgb(233,115,5)" fg:x="12669" fg:w="2"/><text x="95.3698%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.12%)</title><rect x="95.1348%" y="101" width="0.1201%" height="15" fill="rgb(207,226,44)" fg:x="12671" fg:w="16"/><text x="95.3848%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_a_4_3_t_5_l_3 (3,419 samples, 25.67%)</title><rect x="69.7049%" y="117" width="25.6701%" height="15" fill="rgb(208,126,0)" fg:x="9284" fg:w="3419"/><text x="69.9549%" y="127.50">cc`network_model_nc_qe_output::compute_a_..</text></g><g><title>libsystem_platform.dylib`_platform_memset (16 samples, 0.12%)</title><rect x="95.2549%" y="101" width="0.1201%" height="15" fill="rgb(244,66,21)" fg:x="12687" fg:w="16"/><text x="95.5049%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.02%)</title><rect x="95.7129%" y="101" width="0.0225%" height="15" fill="rgb(222,97,12)" fg:x="12748" fg:w="3"/><text x="95.9629%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Add&gt;::add (207 samples, 1.55%)</title><rect x="95.7354%" y="101" width="1.5542%" height="15" fill="rgb(219,213,19)" fg:x="12751" fg:w="207"/><text x="95.9854%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (164 samples, 1.23%)</title><rect x="96.0583%" y="85" width="1.2313%" height="15" fill="rgb(252,169,30)" fg:x="12794" fg:w="164"/><text x="96.3083%" y="95.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (8 samples, 0.06%)</title><rect x="97.3046%" y="85" width="0.0601%" height="15" fill="rgb(206,32,51)" fg:x="12960" fg:w="8"/><text x="97.5546%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (5 samples, 0.04%)</title><rect x="97.3271%" y="69" width="0.0375%" height="15" fill="rgb(250,172,42)" fg:x="12963" fg:w="5"/><text x="97.5771%" y="79.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (5 samples, 0.04%)</title><rect x="97.3647%" y="85" width="0.0375%" height="15" fill="rgb(209,34,43)" fg:x="12968" fg:w="5"/><text x="97.6147%" y="95.50"></text></g><g><title>cc`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="97.4022%" y="85" width="0.0150%" height="15" fill="rgb(223,11,35)" fg:x="12973" fg:w="2"/><text x="97.6522%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.04%)</title><rect x="97.4172%" y="85" width="0.0375%" height="15" fill="rgb(251,219,26)" fg:x="12975" fg:w="5"/><text x="97.6672%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="97.4322%" y="69" width="0.0225%" height="15" fill="rgb(231,119,3)" fg:x="12977" fg:w="3"/><text x="97.6822%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="97.4548%" y="85" width="0.0150%" height="15" fill="rgb(216,97,11)" fg:x="12980" fg:w="2"/><text x="97.7048%" y="95.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.03%)</title><rect x="97.4773%" y="69" width="0.0300%" height="15" fill="rgb(223,59,9)" fg:x="12983" fg:w="4"/><text x="97.7273%" y="79.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (7 samples, 0.05%)</title><rect x="97.4773%" y="85" width="0.0526%" height="15" fill="rgb(233,93,31)" fg:x="12983" fg:w="7"/><text x="97.7273%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.04%)</title><rect x="97.5374%" y="85" width="0.0375%" height="15" fill="rgb(239,81,33)" fg:x="12991" fg:w="5"/><text x="97.7874%" y="95.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::intersection (38 samples, 0.29%)</title><rect x="97.2971%" y="101" width="0.2853%" height="15" fill="rgb(213,120,34)" fg:x="12959" fg:w="38"/><text x="97.5471%" y="111.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (4 samples, 0.03%)</title><rect x="97.6124%" y="85" width="0.0300%" height="15" fill="rgb(243,49,53)" fg:x="13001" fg:w="4"/><text x="97.8624%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.02%)</title><rect x="97.6199%" y="69" width="0.0225%" height="15" fill="rgb(247,216,33)" fg:x="13002" fg:w="3"/><text x="97.8699%" y="79.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (5 samples, 0.04%)</title><rect x="97.6425%" y="85" width="0.0375%" height="15" fill="rgb(226,26,14)" fg:x="13005" fg:w="5"/><text x="97.8925%" y="95.50"></text></g><g><title>cc`&lt;ds::interval::Interval&lt;T&gt; as core::cmp::Ord&gt;::cmp (13 samples, 0.10%)</title><rect x="97.7100%" y="69" width="0.0976%" height="15" fill="rgb(215,49,53)" fg:x="13014" fg:w="13"/><text x="97.9600%" y="79.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (9 samples, 0.07%)</title><rect x="97.7401%" y="53" width="0.0676%" height="15" fill="rgb(245,162,40)" fg:x="13018" fg:w="9"/><text x="97.9901%" y="63.50"></text></g><g><title>cc`core::slice::sort::insertion_sort_shift_left (29 samples, 0.22%)</title><rect x="97.6875%" y="85" width="0.2177%" height="15" fill="rgb(229,68,17)" fg:x="13011" fg:w="29"/><text x="97.9375%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::cmp::Ord&gt;::cmp (13 samples, 0.10%)</title><rect x="97.8076%" y="69" width="0.0976%" height="15" fill="rgb(213,182,10)" fg:x="13027" fg:w="13"/><text x="98.0576%" y="79.50"></text></g><g><title>cc`ds::interval::IntervalList&lt;T&gt;::sort_merge_intervals (45 samples, 0.34%)</title><rect x="97.5824%" y="101" width="0.3379%" height="15" fill="rgb(245,125,30)" fg:x="12997" fg:w="45"/><text x="97.8324%" y="111.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (88 samples, 0.66%)</title><rect x="97.9203%" y="101" width="0.6607%" height="15" fill="rgb(232,202,2)" fg:x="13042" fg:w="88"/><text x="98.1703%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="98.5885%" y="101" width="0.0150%" height="15" fill="rgb(237,140,51)" fg:x="13131" fg:w="2"/><text x="98.8385%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="98.6035%" y="101" width="0.0150%" height="15" fill="rgb(236,157,25)" fg:x="13133" fg:w="2"/><text x="98.8535%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="98.6185%" y="101" width="0.0225%" height="15" fill="rgb(219,209,0)" fg:x="13135" fg:w="3"/><text x="98.8685%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="98.6410%" y="101" width="0.0225%" height="15" fill="rgb(240,116,54)" fg:x="13138" fg:w="3"/><text x="98.8910%" y="111.50"></text></g><g><title>cc`network_model_nc_qe_output::compute_a_4_3_t_5_l_4 (439 samples, 3.30%)</title><rect x="95.3750%" y="117" width="3.2960%" height="15" fill="rgb(216,10,36)" fg:x="12703" fg:w="439"/><text x="95.6250%" y="127.50">cc`..</text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (16 samples, 0.12%)</title><rect x="98.6711%" y="117" width="0.1201%" height="15" fill="rgb(222,72,44)" fg:x="13142" fg:w="16"/><text x="98.9211%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.05%)</title><rect x="98.7912%" y="117" width="0.0526%" height="15" fill="rgb(232,159,9)" fg:x="13158" fg:w="7"/><text x="99.0412%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.05%)</title><rect x="98.8438%" y="117" width="0.0526%" height="15" fill="rgb(210,39,32)" fg:x="13165" fg:w="7"/><text x="99.0938%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.08%)</title><rect x="98.8963%" y="117" width="0.0826%" height="15" fill="rgb(216,194,45)" fg:x="13172" fg:w="11"/><text x="99.1463%" y="127.50"></text></g><g><title>cc`&lt;network_model_nc::NetworkModelNC as cc_common::NetworkModel&gt;::compute_max_allowed_rate (4,155 samples, 31.20%)</title><rect x="67.8429%" y="133" width="31.1960%" height="15" fill="rgb(218,18,35)" fg:x="9036" fg:w="4155"/><text x="68.0929%" y="143.50">cc`&lt;network_model_nc::NetworkModelNC as cc_common:..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.06%)</title><rect x="98.9789%" y="117" width="0.0601%" height="15" fill="rgb(207,83,51)" fg:x="13183" fg:w="8"/><text x="99.2289%" y="127.50"></text></g><g><title>cc`cc::CongCtrlState&lt;NM&gt;::get_relevant_history (2 samples, 0.02%)</title><rect x="99.0465%" y="133" width="0.0150%" height="15" fill="rgb(225,63,43)" fg:x="13192" fg:w="2"/><text x="99.2965%" y="143.50"></text></g><g><title>cc`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (4 samples, 0.03%)</title><rect x="99.0615%" y="133" width="0.0300%" height="15" fill="rgb(207,57,36)" fg:x="13194" fg:w="4"/><text x="99.3115%" y="143.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (4 samples, 0.03%)</title><rect x="99.0615%" y="117" width="0.0300%" height="15" fill="rgb(216,99,33)" fg:x="13194" fg:w="4"/><text x="99.3115%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (2 samples, 0.02%)</title><rect x="99.0765%" y="101" width="0.0150%" height="15" fill="rgb(225,42,16)" fg:x="13196" fg:w="2"/><text x="99.3265%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="99.0915%" y="133" width="0.0225%" height="15" fill="rgb(220,201,45)" fg:x="13198" fg:w="3"/><text x="99.3415%" y="143.50"></text></g><g><title>cc`cc::CongCtrlState&lt;NM&gt;::compute_cca_moves (4,169 samples, 31.30%)</title><rect x="67.8204%" y="149" width="31.3011%" height="15" fill="rgb(225,33,4)" fg:x="9033" fg:w="4169"/><text x="68.0704%" y="159.50">cc`cc::CongCtrlState&lt;NM&gt;::compute_cca_moves</text></g><g><title>cc`&lt;cc::CongCtrlState&lt;NM&gt; as minimax::State&gt;::make_move (8,936 samples, 67.09%)</title><rect x="32.0369%" y="165" width="67.0921%" height="15" fill="rgb(224,33,50)" fg:x="4267" fg:w="8936"/><text x="32.2869%" y="175.50">cc`&lt;cc::CongCtrlState&lt;NM&gt; as minimax::State&gt;::make_move</text></g><g><title>cc`core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="99.1291%" y="165" width="0.0150%" height="15" fill="rgb(246,198,51)" fg:x="13203" fg:w="2"/><text x="99.3791%" y="175.50"></text></g><g><title>cc`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.02%)</title><rect x="99.1441%" y="165" width="0.0225%" height="15" fill="rgb(205,22,4)" fg:x="13205" fg:w="3"/><text x="99.3941%" y="175.50"></text></g><g><title>cc`alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="99.1816%" y="117" width="0.0225%" height="15" fill="rgb(206,3,8)" fg:x="13210" fg:w="3"/><text x="99.4316%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.02%)</title><rect x="99.1816%" y="101" width="0.0225%" height="15" fill="rgb(251,23,15)" fg:x="13210" fg:w="3"/><text x="99.4316%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.02%)</title><rect x="99.1891%" y="85" width="0.0150%" height="15" fill="rgb(252,88,28)" fg:x="13211" fg:w="2"/><text x="99.4391%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.02%)</title><rect x="99.1891%" y="69" width="0.0150%" height="15" fill="rgb(212,127,14)" fg:x="13211" fg:w="2"/><text x="99.4391%" y="79.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.03%)</title><rect x="99.1816%" y="133" width="0.0300%" height="15" fill="rgb(247,145,37)" fg:x="13210" fg:w="4"/><text x="99.4316%" y="143.50"></text></g><g><title>cc`&lt;cc::CongCtrlState&lt;NM&gt; as minimax::State&gt;::tt_state (5 samples, 0.04%)</title><rect x="99.1816%" y="149" width="0.0375%" height="15" fill="rgb(209,117,53)" fg:x="13210" fg:w="5"/><text x="99.4316%" y="159.50"></text></g><g><title>cc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="99.2417%" y="149" width="0.0150%" height="15" fill="rgb(212,90,42)" fg:x="13218" fg:w="2"/><text x="99.4917%" y="159.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Sub&gt;::sub (11 samples, 0.08%)</title><rect x="99.2792%" y="133" width="0.0826%" height="15" fill="rgb(218,164,37)" fg:x="13223" fg:w="11"/><text x="99.5292%" y="143.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (8 samples, 0.06%)</title><rect x="99.3017%" y="117" width="0.0601%" height="15" fill="rgb(246,65,34)" fg:x="13226" fg:w="8"/><text x="99.5517%" y="127.50"></text></g><g><title>cc`cc::CongCtrlState&lt;NM&gt;::compute_metrics (16 samples, 0.12%)</title><rect x="99.2567%" y="149" width="0.1201%" height="15" fill="rgb(231,100,33)" fg:x="13220" fg:w="16"/><text x="99.5067%" y="159.50"></text></g><g><title>cc`num_rational::Ratio&lt;T&gt;::reduce (2 samples, 0.02%)</title><rect x="99.3618%" y="133" width="0.0150%" height="15" fill="rgb(228,126,14)" fg:x="13234" fg:w="2"/><text x="99.6118%" y="143.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::hash::Hash&gt;::hash::recurse (6 samples, 0.05%)</title><rect x="99.3994%" y="117" width="0.0450%" height="15" fill="rgb(215,173,21)" fg:x="13239" fg:w="6"/><text x="99.6494%" y="127.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::hash::Hash&gt;::hash::recurse (4 samples, 0.03%)</title><rect x="99.4144%" y="101" width="0.0300%" height="15" fill="rgb(210,6,40)" fg:x="13241" fg:w="4"/><text x="99.6644%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::hash::Hash&gt;::hash::recurse (10 samples, 0.08%)</title><rect x="99.3918%" y="133" width="0.0751%" height="15" fill="rgb(212,48,18)" fg:x="13238" fg:w="10"/><text x="99.6418%" y="143.50"></text></g><g><title>cc`core::hash::impls::_&lt;impl core::hash::Hash for i32&gt;::hash (3 samples, 0.02%)</title><rect x="99.4444%" y="117" width="0.0225%" height="15" fill="rgb(230,214,11)" fg:x="13245" fg:w="3"/><text x="99.6944%" y="127.50"></text></g><g><title>cc`core::hash::BuildHasher::hash_one (14 samples, 0.11%)</title><rect x="99.3768%" y="149" width="0.1051%" height="15" fill="rgb(254,105,39)" fg:x="13236" fg:w="14"/><text x="99.6268%" y="159.50"></text></g><g><title>cc`core::hash::impls::_&lt;impl core::hash::Hash for i32&gt;::hash (2 samples, 0.02%)</title><rect x="99.4669%" y="133" width="0.0150%" height="15" fill="rgb(245,158,5)" fg:x="13248" fg:w="2"/><text x="99.7169%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.02%)</title><rect x="99.4819%" y="117" width="0.0150%" height="15" fill="rgb(249,208,11)" fg:x="13250" fg:w="2"/><text x="99.7319%" y="127.50"></text></g><g><title>cc`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.03%)</title><rect x="99.4819%" y="133" width="0.0300%" height="15" fill="rgb(210,39,28)" fg:x="13250" fg:w="4"/><text x="99.7319%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="99.4970%" y="117" width="0.0150%" height="15" fill="rgb(211,56,53)" fg:x="13252" fg:w="2"/><text x="99.7470%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="99.4970%" y="101" width="0.0150%" height="15" fill="rgb(226,201,30)" fg:x="13252" fg:w="2"/><text x="99.7470%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.02%)</title><rect x="99.4970%" y="85" width="0.0150%" height="15" fill="rgb(239,101,34)" fg:x="13252" fg:w="2"/><text x="99.7470%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::hash::Hash&gt;::hash::recurse (4 samples, 0.03%)</title><rect x="99.5195%" y="85" width="0.0300%" height="15" fill="rgb(226,209,5)" fg:x="13255" fg:w="4"/><text x="99.7695%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::hash::Hash&gt;::hash::recurse (4 samples, 0.03%)</title><rect x="99.5195%" y="69" width="0.0300%" height="15" fill="rgb(250,105,47)" fg:x="13255" fg:w="4"/><text x="99.7695%" y="79.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::hash::Hash&gt;::hash::recurse (2 samples, 0.02%)</title><rect x="99.5345%" y="53" width="0.0150%" height="15" fill="rgb(230,72,3)" fg:x="13257" fg:w="2"/><text x="99.7845%" y="63.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::hash::Hash&gt;::hash::recurse (8 samples, 0.06%)</title><rect x="99.5120%" y="101" width="0.0601%" height="15" fill="rgb(232,218,39)" fg:x="13254" fg:w="8"/><text x="99.7620%" y="111.50"></text></g><g><title>cc`core::hash::impls::_&lt;impl core::hash::Hash for i32&gt;::hash (3 samples, 0.02%)</title><rect x="99.5495%" y="85" width="0.0225%" height="15" fill="rgb(248,166,6)" fg:x="13259" fg:w="3"/><text x="99.7995%" y="95.50"></text></g><g><title>cc`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (12 samples, 0.09%)</title><rect x="99.5120%" y="133" width="0.0901%" height="15" fill="rgb(247,89,20)" fg:x="13254" fg:w="12"/><text x="99.7620%" y="143.50"></text></g><g><title>cc`core::hash::BuildHasher::hash_one (12 samples, 0.09%)</title><rect x="99.5120%" y="117" width="0.0901%" height="15" fill="rgb(248,130,54)" fg:x="13254" fg:w="12"/><text x="99.7620%" y="127.50"></text></g><g><title>cc`core::hash::impls::_&lt;impl core::hash::Hash for i32&gt;::hash (4 samples, 0.03%)</title><rect x="99.5720%" y="101" width="0.0300%" height="15" fill="rgb(234,196,4)" fg:x="13262" fg:w="4"/><text x="99.8220%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::hash::Hash&gt;::hash::recurse (3 samples, 0.02%)</title><rect x="99.6321%" y="85" width="0.0225%" height="15" fill="rgb(250,143,31)" fg:x="13270" fg:w="3"/><text x="99.8821%" y="95.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::hash::Hash&gt;::hash::recurse (2 samples, 0.02%)</title><rect x="99.6396%" y="69" width="0.0150%" height="15" fill="rgb(211,110,34)" fg:x="13271" fg:w="2"/><text x="99.8896%" y="79.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::hash::Hash&gt;::hash::recurse (5 samples, 0.04%)</title><rect x="99.6321%" y="101" width="0.0375%" height="15" fill="rgb(215,124,48)" fg:x="13270" fg:w="5"/><text x="99.8821%" y="111.50"></text></g><g><title>cc`core::hash::impls::_&lt;impl core::hash::Hash for i32&gt;::hash (2 samples, 0.02%)</title><rect x="99.6546%" y="85" width="0.0150%" height="15" fill="rgb(216,46,13)" fg:x="13273" fg:w="2"/><text x="99.9046%" y="95.50"></text></g><g><title>cc`core::hash::BuildHasher::hash_one (8 samples, 0.06%)</title><rect x="99.6321%" y="117" width="0.0601%" height="15" fill="rgb(205,184,25)" fg:x="13270" fg:w="8"/><text x="99.8821%" y="127.50"></text></g><g><title>cc`core::hash::impls::_&lt;impl core::hash::Hash for i32&gt;::hash (3 samples, 0.02%)</title><rect x="99.6696%" y="101" width="0.0225%" height="15" fill="rgb(228,1,10)" fg:x="13275" fg:w="3"/><text x="99.9196%" y="111.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::hash::Hash&gt;::hash::recurse (6 samples, 0.05%)</title><rect x="99.7072%" y="53" width="0.0450%" height="15" fill="rgb(213,116,27)" fg:x="13280" fg:w="6"/><text x="99.9572%" y="63.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::hash::Hash&gt;::hash::recurse (3 samples, 0.02%)</title><rect x="99.7297%" y="37" width="0.0225%" height="15" fill="rgb(241,95,50)" fg:x="13283" fg:w="3"/><text x="99.9797%" y="47.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::hash::Hash&gt;::hash::recurse (8 samples, 0.06%)</title><rect x="99.6997%" y="69" width="0.0601%" height="15" fill="rgb(238,48,32)" fg:x="13279" fg:w="8"/><text x="99.9497%" y="79.50"></text></g><g><title>cc`&lt;num_rational::Ratio&lt;T&gt; as core::hash::Hash&gt;::hash::recurse (14 samples, 0.11%)</title><rect x="99.6997%" y="85" width="0.1051%" height="15" fill="rgb(235,113,49)" fg:x="13279" fg:w="14"/><text x="99.9497%" y="95.50"></text></g><g><title>cc`core::hash::impls::_&lt;impl core::hash::Hash for i32&gt;::hash (6 samples, 0.05%)</title><rect x="99.7597%" y="69" width="0.0450%" height="15" fill="rgb(205,127,43)" fg:x="13287" fg:w="6"/><text x="100.0097%" y="79.50"></text></g><g><title>cc`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (34 samples, 0.26%)</title><rect x="99.6021%" y="133" width="0.2553%" height="15" fill="rgb(250,162,2)" fg:x="13266" fg:w="34"/><text x="99.8521%" y="143.50"></text></g><g><title>cc`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (22 samples, 0.17%)</title><rect x="99.6922%" y="117" width="0.1652%" height="15" fill="rgb(220,13,41)" fg:x="13278" fg:w="22"/><text x="99.9422%" y="127.50"></text></g><g><title>cc`core::hash::BuildHasher::hash_one (21 samples, 0.16%)</title><rect x="99.6997%" y="101" width="0.1577%" height="15" fill="rgb(249,221,25)" fg:x="13279" fg:w="21"/><text x="99.9497%" y="111.50"></text></g><g><title>cc`core::hash::impls::_&lt;impl core::hash::Hash for i32&gt;::hash (7 samples, 0.05%)</title><rect x="99.8048%" y="85" width="0.0526%" height="15" fill="rgb(215,208,19)" fg:x="13293" fg:w="7"/><text x="100.0548%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.06%)</title><rect x="99.8573%" y="133" width="0.0601%" height="15" fill="rgb(236,175,2)" fg:x="13300" fg:w="8"/><text x="100.1073%" y="143.50"></text></g><g><title>cc`minimax::TranspositionTable&lt;S&gt;::insert (59 samples, 0.44%)</title><rect x="99.4819%" y="149" width="0.4430%" height="15" fill="rgb(241,52,2)" fg:x="13250" fg:w="59"/><text x="99.7319%" y="159.50"></text></g><g><title>cc`minimax::Search&lt;S&gt;::deepen_tree (103 samples, 0.77%)</title><rect x="99.1666%" y="165" width="0.7733%" height="15" fill="rgb(248,140,14)" fg:x="13208" fg:w="103"/><text x="99.4166%" y="175.50"></text></g><g><title>cc`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2 samples, 0.02%)</title><rect x="99.9399%" y="149" width="0.0150%" height="15" fill="rgb(253,22,42)" fg:x="13311" fg:w="2"/><text x="100.1899%" y="159.50"></text></g><g><title>cc`core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="99.9399%" y="133" width="0.0150%" height="15" fill="rgb(234,61,47)" fg:x="13311" fg:w="2"/><text x="100.1899%" y="143.50"></text></g><g><title>cc`minimax::TranspositionTable&lt;S&gt;::insert (3 samples, 0.02%)</title><rect x="99.9399%" y="165" width="0.0225%" height="15" fill="rgb(208,226,15)" fg:x="13311" fg:w="3"/><text x="100.1899%" y="175.50"></text></g><g><title>cc`minimax::Search&lt;S&gt;::best_move (13,203 samples, 99.13%)</title><rect x="0.8559%" y="245" width="99.1291%" height="15" fill="rgb(217,221,4)" fg:x="114" fg:w="13203"/><text x="1.1059%" y="255.50">cc`minimax::Search&lt;S&gt;::best_move</text></g><g><title>cc`minimax::Search&lt;S&gt;::deepen_tree (13,187 samples, 99.01%)</title><rect x="0.9760%" y="229" width="99.0089%" height="15" fill="rgb(212,174,34)" fg:x="130" fg:w="13187"/><text x="1.2260%" y="239.50">cc`minimax::Search&lt;S&gt;::deepen_tree</text></g><g><title>cc`minimax::Search&lt;S&gt;::deepen_tree (13,054 samples, 98.01%)</title><rect x="1.9746%" y="213" width="98.0104%" height="15" fill="rgb(253,83,4)" fg:x="263" fg:w="13054"/><text x="2.2246%" y="223.50">cc`minimax::Search&lt;S&gt;::deepen_tree</text></g><g><title>cc`minimax::Search&lt;S&gt;::deepen_tree (12,637 samples, 94.88%)</title><rect x="5.1055%" y="197" width="94.8795%" height="15" fill="rgb(250,195,49)" fg:x="680" fg:w="12637"/><text x="5.3555%" y="207.50">cc`minimax::Search&lt;S&gt;::deepen_tree</text></g><g><title>cc`minimax::Search&lt;S&gt;::deepen_tree (9,100 samples, 68.32%)</title><rect x="31.6615%" y="181" width="68.3234%" height="15" fill="rgb(241,192,25)" fg:x="4217" fg:w="9100"/><text x="31.9115%" y="191.50">cc`minimax::Search&lt;S&gt;::deepen_tree</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.02%)</title><rect x="99.9700%" y="165" width="0.0150%" height="15" fill="rgb(208,124,10)" fg:x="13315" fg:w="2"/><text x="100.2200%" y="175.50"></text></g><g><title>dyld`start (13,318 samples, 99.99%)</title><rect x="0.0000%" y="341" width="99.9925%" height="15" fill="rgb(222,33,0)" fg:x="0" fg:w="13318"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>cc`main (13,318 samples, 99.99%)</title><rect x="0.0000%" y="325" width="99.9925%" height="15" fill="rgb(234,209,28)" fg:x="0" fg:w="13318"/><text x="0.2500%" y="335.50">cc`main</text></g><g><title>cc`std::rt::lang_start_internal (13,318 samples, 99.99%)</title><rect x="0.0000%" y="309" width="99.9925%" height="15" fill="rgb(224,11,23)" fg:x="0" fg:w="13318"/><text x="0.2500%" y="319.50">cc`std::rt::lang_start_internal</text></g><g><title>cc`std::rt::lang_start::_{{closure}} (13,318 samples, 99.99%)</title><rect x="0.0000%" y="293" width="99.9925%" height="15" fill="rgb(232,99,1)" fg:x="0" fg:w="13318"/><text x="0.2500%" y="303.50">cc`std::rt::lang_start::_{{closure}}</text></g><g><title>cc`std::sys_common::backtrace::__rust_begin_short_backtrace (13,318 samples, 99.99%)</title><rect x="0.0000%" y="277" width="99.9925%" height="15" fill="rgb(237,95,45)" fg:x="0" fg:w="13318"/><text x="0.2500%" y="287.50">cc`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>cc`cc::main (13,318 samples, 99.99%)</title><rect x="0.0000%" y="261" width="99.9925%" height="15" fill="rgb(208,109,11)" fg:x="0" fg:w="13318"/><text x="0.2500%" y="271.50">cc`cc::main</text></g><g><title>all (13,319 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(216,190,48)" fg:x="0" fg:w="13319"/><text x="0.2500%" y="367.50"></text></g></svg></svg>